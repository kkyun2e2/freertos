
Temperture_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005918  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000098  080059b0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080059b0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6dd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229a  00000000  00000000  0002f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018882  00000000  00000000  000335a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010813  00000000  00000000  0004be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b27b  00000000  00000000  0005c63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f78b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  000f7908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005834 	.word	0x08005834

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005834 	.word	0x08005834

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <AvgFilter>:
 */

#include "filter.h"

uint16_t AvgFilter(uint16_t inData)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	static uint16_t filterBuffer[100];
	static uint16_t sumValue = 0;
	static uint8_t bufPos = 0;
	// 합계에서 현재위치의 버퍼값을 빼기
	sumValue -= filterBuffer[bufPos];
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <AvgFilter+0x88>)
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <AvgFilter+0x8c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <AvgFilter+0x90>)
 8000d86:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <AvgFilter+0x88>)
 8000d90:	801a      	strh	r2, [r3, #0]
	// 현재위치의 버퍼값 갱신
	filterBuffer[bufPos] = inData;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <AvgFilter+0x8c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <AvgFilter+0x90>)
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	// 합계에 현재위치의 버퍼값을 더하기
	sumValue += filterBuffer[bufPos];
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <AvgFilter+0x8c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <AvgFilter+0x90>)
 8000da8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <AvgFilter+0x88>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <AvgFilter+0x88>)
 8000db6:	801a      	strh	r2, [r3, #0]
	bufPos++;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <AvgFilter+0x8c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <AvgFilter+0x8c>)
 8000dc2:	701a      	strb	r2, [r3, #0]
	bufPos %= 100;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <AvgFilter+0x8c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <AvgFilter+0x94>)
 8000dca:	fba2 1203 	umull	r1, r2, r2, r3
 8000dce:	0952      	lsrs	r2, r2, #5
 8000dd0:	2164      	movs	r1, #100	; 0x64
 8000dd2:	fb01 f202 	mul.w	r2, r1, r2
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <AvgFilter+0x8c>)
 8000ddc:	701a      	strb	r2, [r3, #0]
	return sumValue / 100;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <AvgFilter+0x88>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <AvgFilter+0x94>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	b29b      	uxth	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	200000b4 	.word	0x200000b4
 8000dfc:	200000b6 	.word	0x200000b6
 8000e00:	200000b8 	.word	0x200000b8
 8000e04:	51eb851f 	.word	0x51eb851f

08000e08 <kalman>:

double kalman(double measurement)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	ed87 0b00 	vstr	d0, [r7]
	static double varP = 0.0001;
	static double R = 0.25;
	static double K = 1.0;
	static double X = 20.0;

	P=P+varP;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <kalman+0xe4>)
 8000e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <kalman+0xe8>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fa35 	bl	800028c <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4931      	ldr	r1, [pc, #196]	; (8000eec <kalman+0xe4>)
 8000e28:	e9c1 2300 	strd	r2, r3, [r1]
	K=P/(P+R);
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <kalman+0xe4>)
 8000e2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <kalman+0xe4>)
 8000e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <kalman+0xec>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fa25 	bl	800028c <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff fcff 	bl	800084c <__aeabi_ddiv>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4929      	ldr	r1, [pc, #164]	; (8000ef8 <kalman+0xf0>)
 8000e54:	e9c1 2300 	strd	r2, r3, [r1]
	X=(K*measurement)+(1-K)*X;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <kalman+0xf0>)
 8000e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e62:	f7ff fbc9 	bl	80005f8 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <kalman+0xf0>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f04f 0000 	mov.w	r0, #0
 8000e78:	4920      	ldr	r1, [pc, #128]	; (8000efc <kalman+0xf4>)
 8000e7a:	f7ff fa05 	bl	8000288 <__aeabi_dsub>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <kalman+0xf8>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fbb4 	bl	80005f8 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f7ff f9f8 	bl	800028c <__adddf3>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4917      	ldr	r1, [pc, #92]	; (8000f00 <kalman+0xf8>)
 8000ea2:	e9c1 2300 	strd	r2, r3, [r1]
	P=(1-K)*P;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <kalman+0xf0>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	4912      	ldr	r1, [pc, #72]	; (8000efc <kalman+0xf4>)
 8000eb2:	f7ff f9e9 	bl	8000288 <__aeabi_dsub>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <kalman+0xe4>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fb98 	bl	80005f8 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <kalman+0xe4>)
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]
	return X;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <kalman+0xf8>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	ec43 2b17 	vmov	d7, r2, r3

}
 8000edc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee0:	eef0 0a67 	vmov.f32	s1, s15
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	20000018 	.word	0x20000018
 8000efc:	3ff00000 	.word	0x3ff00000
 8000f00:	20000020 	.word	0x20000020

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f000 fc5b 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f851 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f9ad 	bl	8001270 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f16:	f000 f8ab 	bl	8001070 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f1a:	f000 f97f 	bl	800121c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f1e:	f000 f8f9 	bl	8001114 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  initUart();
 8000f22:	f000 fbd3 	bl	80016cc <initUart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		HAL_ADC_Start(&hadc1);
 8000f26:	4821      	ldr	r0, [pc, #132]	; (8000fac <main+0xa8>)
 8000f28:	f000 fd26 	bl	8001978 <HAL_ADC_Start>
  		HAL_ADC_PollForConversion(&hadc1, 1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <main+0xa8>)
 8000f30:	f000 fe09 	bl	8001b46 <HAL_ADC_PollForConversion>
  		uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000f34:	481d      	ldr	r0, [pc, #116]	; (8000fac <main+0xa8>)
 8000f36:	f000 fe91 	bl	8001c5c <HAL_ADC_GetValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  		HAL_ADC_Stop(&hadc1);
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <main+0xa8>)
 8000f40:	f000 fdce 	bl	8001ae0 <HAL_ADC_Stop>
  		int kalman_value = kalman((double)value);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fadc 	bl	8000504 <__aeabi_ui2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	ec43 2b10 	vmov	d0, r2, r3
 8000f54:	f7ff ff58 	bl	8000e08 <kalman>
 8000f58:	ec53 2b10 	vmov	r2, r3, d0
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd5c 	bl	8000a1c <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	603b      	str	r3, [r7, #0]
  			{
  				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
  				HAL_Delay(5000);
  			}*/

  		printf("%d %d %d\n",value,AvgFilter(value),(int)kalman((double)value));
 8000f68:	88fc      	ldrh	r4, [r7, #6]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff feff 	bl	8000d70 <AvgFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461d      	mov	r5, r3
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fac3 	bl	8000504 <__aeabi_ui2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b10 	vmov	d0, r2, r3
 8000f86:	f7ff ff3f 	bl	8000e08 <kalman>
 8000f8a:	ec53 2b10 	vmov	r2, r3, d0
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fd43 	bl	8000a1c <__aeabi_d2iz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	462a      	mov	r2, r5
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <main+0xac>)
 8000f9e:	f003 fcbb 	bl	8004918 <iprintf>
  		HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f000 fc80 	bl	80018a8 <HAL_Delay>
  {
 8000fa8:	e7bd      	b.n	8000f26 <main+0x22>
 8000faa:	bf00      	nop
 8000fac:	20000180 	.word	0x20000180
 8000fb0:	0800584c 	.word	0x0800584c

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fca0 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SystemClock_Config+0xb4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <SystemClock_Config+0xb4>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SystemClock_Config+0xb4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <SystemClock_Config+0xb8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <SystemClock_Config+0xb8>)
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <SystemClock_Config+0xb8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fb97 	bl	8002758 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001030:	f000 f960 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fdfa 	bl	8002c48 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800105a:	f000 f94b 	bl	80012f4 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC1_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC1_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC1_Init+0xa0>)
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC1_Init+0x98>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ce:	480e      	ldr	r0, [pc, #56]	; (8001108 <MX_ADC1_Init+0x98>)
 80010d0:	f000 fc0e 	bl	80018f0 <HAL_ADC_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 f90b 	bl	80012f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_ADC1_Init+0x98>)
 80010f0:	f000 fdc2 	bl	8001c78 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010fa:	f000 f8fb 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000180 	.word	0x20000180
 800110c:	40012000 	.word	0x40012000
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b092      	sub	sp, #72	; 0x48
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fbe2 	bl	8004908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <MX_TIM1_Init+0x100>)
 8001146:	4a34      	ldr	r2, [pc, #208]	; (8001218 <MX_TIM1_Init+0x104>)
 8001148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_TIM1_Init+0x100>)
 800114c:	220f      	movs	r2, #15
 800114e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_TIM1_Init+0x100>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_TIM1_Init+0x100>)
 8001158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800115c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM1_Init+0x100>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM1_Init+0x100>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM1_Init+0x100>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <MX_TIM1_Init+0x100>)
 8001172:	f001 ff49 	bl	8003008 <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800117c:	f000 f8ba 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118c:	4619      	mov	r1, r3
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <MX_TIM1_Init+0x100>)
 8001190:	f002 fa58 	bl	8003644 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800119a:	f000 f8ab 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	; 0x60
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_TIM1_Init+0x100>)
 80011c4:	f001 ff70 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011ce:	f000 f891 	bl	80012f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM1_Init+0x100>)
 80011f6:	f002 fa93 	bl	8003720 <HAL_TIMEx_ConfigBreakDeadTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001200:	f000 f878 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM1_Init+0x100>)
 8001206:	f000 f909 	bl	800141c <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3748      	adds	r7, #72	; 0x48
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001c8 	.word	0x200001c8
 8001218:	40010000 	.word	0x40010000

0800121c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART1_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001254:	f002 fab6 	bl	80037c4 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f849 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000210 	.word	0x20000210
 800126c:	40011000 	.word	0x40011000

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_GPIO_Init+0x7c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_GPIO_Init+0x7c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_GPIO_Init+0x7c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_GPIO_Init+0x7c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <MX_GPIO_Init+0x7c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_GPIO_Init+0x7c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_GPIO_Init+0x80>)
 80012c4:	f001 fa2e 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_GPIO_Init+0x80>)
 80012e0:	f001 f89c 	bl	800241c <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_ADC_MspInit+0x7c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d127      	bne.n	80013c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_ADC_MspInit+0x80>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_ADC_MspInit+0x84>)
 80013be:	f001 f82d 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000

080013d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_TIM_PWM_MspInit+0x3c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_TIM_PWM_MspInit+0x40>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_TIM_PWM_MspInit+0x40>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_TIM_PWM_MspInit+0x40>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40010000 	.word	0x40010000
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_TIM_MspPostInit+0x68>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d11e      	bne.n	800147c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800145a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_TIM_MspPostInit+0x70>)
 8001478:	f000 ffd0 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d134      	bne.n	800151c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014fc:	2307      	movs	r3, #7
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_UART_MspInit+0x9c>)
 8001508:	f000 ff88 	bl	800241c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2025      	movs	r0, #37	; 0x25
 8001512:	f000 feba 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001516:	2025      	movs	r0, #37	; 0x25
 8001518:	f000 fed3 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40011000 	.word	0x40011000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f974 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART1_IRQHandler+0x10>)
 800158a:	f002 fa2b 	bl	80039e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000210 	.word	0x20000210

08001598 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
  }

  return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fa:	605a      	str	r2, [r3, #4]
  return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_isatty>:

int _isatty(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f003 f922 	bl	80048b4 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20020000 	.word	0x20020000
 800169c:	00000400 	.word	0x00000400
 80016a0:	20000254 	.word	0x20000254
 80016a4:	20000370 	.word	0x20000370

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <initUart>:
int rxBufferPp;  // 링버퍼 읽기 변수 <- 읽어오는 값
uint8_t rxBuffer[rxBufferMax]; //링 버퍼 배열
uint8_t rxChar; // 읽어오는 값

void initUart() // uart 초기 리셋 함수
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rxChar, 1); // uart 읽어오는거 on/off
 80016d0:	2201      	movs	r2, #1
 80016d2:	4903      	ldr	r1, [pc, #12]	; (80016e0 <initUart+0x14>)
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <initUart+0x18>)
 80016d6:	f002 f954 	bl	8003982 <HAL_UART_Receive_IT>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000035b 	.word	0x2000035b
 80016e4:	20000210 	.word	0x20000210

080016e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // uart 인터럽트 후 읽기
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar; // 읽기 변수에 읽어오는 값 저장
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_UART_RxCpltCallback+0x4c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	490f      	ldr	r1, [pc, #60]	; (8001734 <HAL_UART_RxCpltCallback+0x4c>)
 80016f8:	600a      	str	r2, [r1, #0]
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_UART_RxCpltCallback+0x50>)
 80016fc:	7811      	ldrb	r1, [r2, #0]
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_UART_RxCpltCallback+0x54>)
 8001700:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax; // 최대 255
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_UART_RxCpltCallback+0x4c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_UART_RxCpltCallback+0x58>)
 8001708:	fb83 1302 	smull	r1, r3, r3, r2
 800170c:	4413      	add	r3, r2
 800170e:	11d9      	asrs	r1, r3, #7
 8001710:	17d3      	asrs	r3, r2, #31
 8001712:	1ac9      	subs	r1, r1, r3
 8001714:	460b      	mov	r3, r1
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	1a5b      	subs	r3, r3, r1
 800171a:	1ad1      	subs	r1, r2, r3
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_UART_RxCpltCallback+0x4c>)
 800171e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &rxChar, 1); // 인터럽트하면 다시 리시브로 활성화 시켜야함
 8001720:	2201      	movs	r2, #1
 8001722:	4905      	ldr	r1, [pc, #20]	; (8001738 <HAL_UART_RxCpltCallback+0x50>)
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <HAL_UART_RxCpltCallback+0x5c>)
 8001726:	f002 f92c 	bl	8003982 <HAL_UART_Receive_IT>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000258 	.word	0x20000258
 8001738:	2000035b 	.word	0x2000035b
 800173c:	2000025c 	.word	0x2000025c
 8001740:	80808081 	.word	0x80808081
 8001744:	20000210 	.word	0x20000210

08001748 <_write>:
	rxBufferGp %= 255; // 최대값 255
	return result; // 쓰기 변수속 값 반환
}

int _write(int file,char *p, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	b29a      	uxth	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <_write+0x24>)
 800175e:	f002 f87e 	bl	800385e <HAL_UART_Transmit>
	return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000210 	.word	0x20000210

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800178c:	4c0b      	ldr	r4, [pc, #44]	; (80017bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179a:	f7ff ff85 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 f88f 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fbaf 	bl	8000f04 <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80017b4:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 80017b8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80017bc:	20000370 	.word	0x20000370

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 fd41 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fd82 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fd59 	bl	80022de <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 fd21 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000028 	.word	0x20000028
 8001860:	20000030 	.word	0x20000030
 8001864:	2000002c 	.word	0x2000002c

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000030 	.word	0x20000030
 800188c:	2000035c 	.word	0x2000035c

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000035c 	.word	0x2000035c

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000030 	.word	0x20000030

080018f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e033      	b.n	800196e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fd1e 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001936:	f023 0302 	bic.w	r3, r3, #2
 800193a:	f043 0202 	orr.w	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 faca 	bl	8001edc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f023 0303 	bic.w	r3, r3, #3
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
 800195e:	e001      	b.n	8001964 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Start+0x1a>
 800198e:	2302      	movs	r3, #2
 8001990:	e097      	b.n	8001ac2 <HAL_ADC_Start+0x14a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d018      	beq.n	80019da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <HAL_ADC_Start+0x158>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_ADC_Start+0x15c>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9a      	lsrs	r2, r3, #18
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d15f      	bne.n	8001aa8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a26:	d106      	bne.n	8001a36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f023 0206 	bic.w	r2, r3, #6
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_ADC_Start+0x160>)
 8001a46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d129      	bne.n	8001ac0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e020      	b.n	8001ac0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <HAL_ADC_Start+0x164>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_ADC_Start+0x148>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d114      	bne.n	8001ac0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	40012000 	.word	0x40012000

08001ae0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Stop+0x16>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e021      	b.n	8001b3a <HAL_ADC_Stop+0x5a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d113      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d10b      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e063      	b.n	8001c54 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b8c:	f7ff fe80 	bl	8001890 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b92:	e021      	b.n	8001bd8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x6c>
 8001ba2:	f7ff fe75 	bl	8001890 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d212      	bcs.n	8001bd8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e03d      	b.n	8001c54 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d1d6      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0212 	mvn.w	r2, #18
 8001bee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d123      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11f      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d111      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1c>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e113      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x244>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d925      	bls.n	8001cf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68d9      	ldr	r1, [r3, #12]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	2207      	movs	r2, #7
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68d9      	ldr	r1, [r3, #12]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4403      	add	r3, r0
 8001ce2:	3b1e      	subs	r3, #30
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	e022      	b.n	8001d36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	2207      	movs	r2, #7
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6919      	ldr	r1, [r3, #16]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4403      	add	r3, r0
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d824      	bhi.n	8001d88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b05      	subs	r3, #5
 8001d50:	221f      	movs	r2, #31
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	3b05      	subs	r3, #5
 8001d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
 8001d86:	e04c      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d824      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b23      	subs	r3, #35	; 0x23
 8001da2:	221f      	movs	r2, #31
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43da      	mvns	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	400a      	ands	r2, r1
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b23      	subs	r3, #35	; 0x23
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd8:	e023      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b41      	subs	r3, #65	; 0x41
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b41      	subs	r3, #65	; 0x41
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_ADC_ConfigChannel+0x250>)
 8001e24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_ADC_ConfigChannel+0x254>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10f      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1d8>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_ADC_ConfigChannel+0x254>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12b      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x23a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_ADC_ConfigChannel+0x258>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <HAL_ADC_ConfigChannel+0x1f4>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d122      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_ADC_ConfigChannel+0x258>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d111      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_ADC_ConfigChannel+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_ADC_ConfigChannel+0x260>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	0c9a      	lsrs	r2, r3, #18
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea4:	e002      	b.n	8001eac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f9      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40012300 	.word	0x40012300
 8001ecc:	40012000 	.word	0x40012000
 8001ed0:	10000012 	.word	0x10000012
 8001ed4:	20000028 	.word	0x20000028
 8001ed8:	431bde83 	.word	0x431bde83

08001edc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee4:	4b79      	ldr	r3, [pc, #484]	; (80020cc <ADC_Init+0x1f0>)
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	021a      	lsls	r2, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <ADC_Init+0x1f4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d022      	beq.n	8001fba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e00f      	b.n	8001fda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0202 	bic.w	r2, r2, #2
 8001fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6899      	ldr	r1, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
 8001ff4:	005a      	lsls	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002016:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002026:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	3b01      	subs	r3, #1
 8002034:	035a      	lsls	r2, r3, #13
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	e007      	b.n	8002050 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	3b01      	subs	r3, #1
 800206c:	051a      	lsls	r2, r3, #20
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002092:	025a      	lsls	r2, r3, #9
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6899      	ldr	r1, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	029a      	lsls	r2, r3, #10
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40012300 	.word	0x40012300
 80020d0:	0f000001 	.word	0x0f000001

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fac4 	bl	8001890 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d008      	beq.n	8002328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e052      	b.n	80023ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0216 	bic.w	r2, r2, #22
 8002336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_DMA_Abort+0x62>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e013      	b.n	80023a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff fa89 	bl	8001890 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d90c      	bls.n	80023a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e015      	b.n	80023ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00c      	b.n	800240e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e159      	b.n	80026ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8148 	bne.w	80026e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_GPIO_Init+0x2f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x202>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x1fe>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x1fa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x1f6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x300>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x1f2>
 800260a:	2304      	movs	r3, #4
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800260e:	2307      	movs	r3, #7
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_GPIO_Init+0x304>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x304>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f aea2 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e267      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d075      	beq.n	8002862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d00c      	beq.n	800279c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d112      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b82      	ldr	r3, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279a:	d10b      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	4b7e      	ldr	r3, [pc, #504]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05b      	beq.n	8002860 <HAL_RCC_OscConfig+0x108>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d157      	bne.n	8002860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e242      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x74>
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e01d      	b.n	8002808 <HAL_RCC_OscConfig+0xb0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x98>
 80027d6:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6f      	ldr	r2, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6c      	ldr	r2, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0xb0>
 80027f0:	4b69      	ldr	r3, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a68      	ldr	r2, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b66      	ldr	r3, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a65      	ldr	r2, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff f83e 	bl	8001890 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff f83a 	bl	8001890 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e207      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0xc0>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff f82a 	bl	8001890 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002840:	f7ff f826 	bl	8001890 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1f3      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0xe8>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d063      	beq.n	8002936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	2b08      	cmp	r3, #8
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x152>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1c7      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4937      	ldr	r1, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e03a      	b.n	8002936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x244>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe ffdf 	bl	8001890 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe ffdb 	bl	8001890 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1a8      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x244>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe ffbe 	bl	8001890 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe ffba 	bl	8001890 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e187      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d036      	beq.n	80029b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x248>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe ff9e 	bl	8001890 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe ff9a 	bl	8001890 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e167      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x240>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x200>
 8002976:	e01b      	b.n	80029b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x248>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe ff87 	bl	8001890 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	e00e      	b.n	80029a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002986:	f7fe ff83 	bl	8001890 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d907      	bls.n	80029a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e150      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
 8002998:	40023800 	.word	0x40023800
 800299c:	42470000 	.word	0x42470000
 80029a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ea      	bne.n	8002986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8097 	beq.w	8002aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d118      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b74      	ldr	r3, [pc, #464]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a73      	ldr	r2, [pc, #460]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe ff43 	bl	8001890 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe ff3f 	bl	8001890 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e10c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x474>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2ea>
 8002a34:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x324>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x30c>
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x324>
 8002a64:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b55      	ldr	r3, [pc, #340]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe ff04 	bl	8001890 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff00 	bl	8001890 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0cb      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ee      	beq.n	8002a8c <HAL_RCC_OscConfig+0x334>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe feee 	bl	8001890 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe feea 	bl	8001890 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0b5      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a1 	beq.w	8002c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d05c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d141      	bne.n	8002b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe febe 	bl	8001890 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe feba 	bl	8001890 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e087      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fe93 	bl	8001890 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fe8f 	bl	8001890 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e05c      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x416>
 8002b8c:	e054      	b.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_OscConfig+0x478>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fe7c 	bl	8001890 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fe78 	bl	8001890 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e045      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x444>
 8002bba:	e03d      	b.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e038      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x4ec>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d028      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d121      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d11a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0cc      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d90c      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b8      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc0:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	494d      	ldr	r1, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d044      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e07f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e067      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4934      	ldr	r1, [pc, #208]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fdaa 	bl	8001890 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe fda6 	bl	8001890 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d20c      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e032      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4916      	ldr	r1, [pc, #88]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dce:	f000 f821 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fd0a 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08005858 	.word	0x08005858
 8002e0c:	20000028 	.word	0x20000028
 8002e10:	2000002c 	.word	0x2000002c

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b090      	sub	sp, #64	; 0x40
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	2300      	movs	r3, #0
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d00d      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x40>
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	f200 80a1 	bhi.w	8002f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x34>
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e46:	e09b      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e4c:	e09b      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4e:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e52:	e098      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5e:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	2200      	movs	r2, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	627a      	str	r2, [r7, #36]	; 0x24
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e80:	fb03 f201 	mul.w	r2, r3, r1
 8002e84:	2300      	movs	r3, #0
 8002e86:	fb00 f303 	mul.w	r3, r0, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e94:	460a      	mov	r2, r1
 8002e96:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9a:	4413      	add	r3, r2
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	61fa      	str	r2, [r7, #28]
 8002ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eae:	f7fd fddd 	bl	8000a6c <__aeabi_uldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eba:	e053      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	617a      	str	r2, [r7, #20]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ece:	f04f 0b00 	mov.w	fp, #0
 8002ed2:	4652      	mov	r2, sl
 8002ed4:	465b      	mov	r3, fp
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	ebb2 080a 	subs.w	r8, r2, sl
 8002eee:	eb63 090b 	sbc.w	r9, r3, fp
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f06:	ebb2 0408 	subs.w	r4, r2, r8
 8002f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	00eb      	lsls	r3, r5, #3
 8002f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1c:	00e2      	lsls	r2, r4, #3
 8002f1e:	4614      	mov	r4, r2
 8002f20:	461d      	mov	r5, r3
 8002f22:	eb14 030a 	adds.w	r3, r4, sl
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	eb45 030b 	adc.w	r3, r5, fp
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	60fa      	str	r2, [r7, #12]
 8002f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f58:	f7fd fd88 	bl	8000a6c <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4613      	mov	r3, r2
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3740      	adds	r7, #64	; 0x40
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	017d7840 	.word	0x017d7840

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000028 	.word	0x20000028

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08005868 	.word	0x08005868

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffdc 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	08005868 	.word	0x08005868

08003008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe f9d2 	bl	80013d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 f8f0 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0ae      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	f200 809f 	bhi.w	8003214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003215 	.word	0x08003215
 80030e4:	08003215 	.word	0x08003215
 80030e8:	08003215 	.word	0x08003215
 80030ec:	08003151 	.word	0x08003151
 80030f0:	08003215 	.word	0x08003215
 80030f4:	08003215 	.word	0x08003215
 80030f8:	08003215 	.word	0x08003215
 80030fc:	08003193 	.word	0x08003193
 8003100:	08003215 	.word	0x08003215
 8003104:	08003215 	.word	0x08003215
 8003108:	08003215 	.word	0x08003215
 800310c:	080031d3 	.word	0x080031d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f908 	bl	800332c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
      break;
 800314e:	e064      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f94e 	bl	80033f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
      break;
 8003190:	e043      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f999 	bl	80034d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0204 	bic.w	r2, r2, #4
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      break;
 80031d0:	e023      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f9e3 	bl	80035a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
      break;
 8003212:	e002      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
      break;
 8003218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <TIM_Base_SetConfig+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <TIM_Base_SetConfig+0xec>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0xf0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <TIM_Base_SetConfig+0xe8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <TIM_Base_SetConfig+0xec>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a20      	ldr	r2, [pc, #128]	; (800331c <TIM_Base_SetConfig+0xf0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <TIM_Base_SetConfig+0xf4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <TIM_Base_SetConfig+0xf8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <TIM_Base_SetConfig+0xfc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	615a      	str	r2, [r3, #20]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800

0800332c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0201 	bic.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0302 	bic.w	r3, r3, #2
 8003374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <TIM_OC1_SetConfig+0xc8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10c      	bne.n	80033a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0308 	bic.w	r3, r3, #8
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_OC1_SetConfig+0xc8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000

080033f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <TIM_OC2_SetConfig+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10d      	bne.n	8003474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <TIM_OC2_SetConfig+0xd4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000

080034d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <TIM_OC3_SetConfig+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10d      	bne.n	800354a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <TIM_OC3_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40010000 	.word	0x40010000

080035a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <TIM_OC4_SetConfig+0x9c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800360a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000

08003644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e050      	b.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d013      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40014000 	.word	0x40014000

08003720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e03d      	b.n	80037b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e03f      	b.n	8003856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fe50 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fddf 	bl	80043cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d17c      	bne.n	8003978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_UART_Transmit+0x2c>
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e075      	b.n	800397a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_UART_Transmit+0x3e>
 8003898:	2302      	movs	r3, #2
 800389a:	e06e      	b.n	800397a <HAL_UART_Transmit+0x11c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd ffed 	bl	8001890 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x82>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038f0:	e02a      	b.n	8003948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fb1f 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e036      	b.n	800397a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3302      	adds	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e007      	b.n	800393a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cf      	bne.n	80038f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 faef 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e006      	b.n	800397a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	4613      	mov	r3, r2
 800398e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d11d      	bne.n	80039d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Receive_IT+0x26>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e016      	b.n	80039da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Receive_IT+0x38>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e00f      	b.n	80039da <HAL_UART_Receive_IT+0x58>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fb24 	bl	800401c <UART_Start_Receive_IT>
 80039d4:	4603      	mov	r3, r0
 80039d6:	e000      	b.n	80039da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b0ba      	sub	sp, #232	; 0xe8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_UART_IRQHandler+0x66>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fc07 	bl	8004256 <UART_Receive_IT>
      return;
 8003a48:	e256      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80de 	beq.w	8003c10 <HAL_UART_IRQHandler+0x22c>
 8003a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80d1 	beq.w	8003c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xae>
 8003a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xd2>
 8003a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_UART_IRQHandler+0xf6>
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0204 	orr.w	r2, r3, #4
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_UART_IRQHandler+0x126>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0208 	orr.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 81ed 	beq.w	8003eee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_UART_IRQHandler+0x14e>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fb92 	bl	8004256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_UART_IRQHandler+0x17a>
 8003b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04f      	beq.n	8003bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa9a 	bl	8004098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d141      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3314      	adds	r3, #20
 8003b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1d9      	bne.n	8003b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d013      	beq.n	8003bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	4a7d      	ldr	r2, [pc, #500]	; (8003dc0 <HAL_UART_IRQHandler+0x3dc>)
 8003bcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fbff 	bl	80023d6 <HAL_DMA_Abort_IT>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be8:	4610      	mov	r0, r2
 8003bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00e      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f990 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00a      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f98c 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f988 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c0a:	e170      	b.n	8003eee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	bf00      	nop
    return;
 8003c0e:	e16e      	b.n	8003eee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 814a 	bne.w	8003eae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8143 	beq.w	8003eae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 813c 	beq.w	8003eae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	f040 80b4 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8140 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	f080 8139 	bcs.w	8003ef2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	f000 8088 	beq.w	8003da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1d9      	bne.n	8003c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e1      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e3      	bne.n	8003d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	f023 0310 	bic.w	r3, r3, #16
 8003d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d88:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e3      	bne.n	8003d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe faa8 	bl	80022f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8b6 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dbc:	e099      	b.n	8003ef2 <HAL_UART_IRQHandler+0x50e>
 8003dbe:	bf00      	nop
 8003dc0:	0800415f 	.word	0x0800415f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 808b 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8086 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e0e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e3      	bne.n	8003dea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	623b      	str	r3, [r7, #32]
   return(result);
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e46:	633a      	str	r2, [r7, #48]	; 0x30
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e8c:	61fa      	str	r2, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f83e 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eac:	e023      	b.n	8003ef6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_UART_IRQHandler+0x4ea>
 8003eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f95d 	bl	8004186 <UART_Transmit_IT>
    return;
 8003ecc:	e014      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x514>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f99d 	bl	8004226 <UART_EndTransmit_IT>
    return;
 8003eec:	e004      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
    return;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ef6:	bf00      	nop
  }
}
 8003ef8:	37e8      	adds	r7, #232	; 0xe8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop

08003f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b090      	sub	sp, #64	; 0x40
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	e050      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d04c      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f60:	f7fd fc96 	bl	8001890 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d241      	bcs.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f90:	637a      	str	r2, [r7, #52]	; 0x34
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e5      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc4:	623a      	str	r2, [r7, #32]
 8003fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	6a3a      	ldr	r2, [r7, #32]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e00f      	b.n	8004014 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d09f      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3740      	adds	r7, #64	; 0x40
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2222      	movs	r2, #34	; 0x22
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004068:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0220 	orr.w	r2, r2, #32
 8004088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b095      	sub	sp, #84	; 0x54
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c0:	643a      	str	r2, [r7, #64]	; 0x40
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b01      	cmp	r3, #1
 800410e:	d119      	bne.n	8004144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004130:	61ba      	str	r2, [r7, #24]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004152:	bf00      	nop
 8004154:	3754      	adds	r7, #84	; 0x54
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff fecb 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b21      	cmp	r3, #33	; 0x21
 8004198:	d13e      	bne.n	8004218 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a2:	d114      	bne.n	80041ce <UART_Transmit_IT+0x48>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d110      	bne.n	80041ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	621a      	str	r2, [r3, #32]
 80041cc:	e008      	b.n	80041e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6211      	str	r1, [r2, #32]
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4619      	mov	r1, r3
 80041ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10f      	bne.n	8004214 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004202:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004212:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fe5a 	bl	8003f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b08c      	sub	sp, #48	; 0x30
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b22      	cmp	r3, #34	; 0x22
 8004268:	f040 80ab 	bne.w	80043c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d117      	bne.n	80042a6 <UART_Receive_IT+0x50>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	b29a      	uxth	r2, r3
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
 80042a4:	e026      	b.n	80042f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d007      	beq.n	80042ca <UART_Receive_IT+0x74>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <UART_Receive_IT+0x82>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e008      	b.n	80042ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004304:	2b00      	cmp	r3, #0
 8004306:	d15a      	bne.n	80043be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0220 	bic.w	r2, r2, #32
 8004316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	2b01      	cmp	r3, #1
 8004346:	d135      	bne.n	80043b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	613b      	str	r3, [r7, #16]
   return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436e:	623a      	str	r2, [r7, #32]
 8004370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	6a3a      	ldr	r2, [r7, #32]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	61bb      	str	r3, [r7, #24]
   return(result);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d10a      	bne.n	80043a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fdbb 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
 80043b2:	e002      	b.n	80043ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fd f997 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e002      	b.n	80043c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3730      	adds	r7, #48	; 0x30
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b0c0      	sub	sp, #256	; 0x100
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	ea40 0301 	orr.w	r3, r0, r1
 80043f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004424:	f021 010c 	bic.w	r1, r1, #12
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	6999      	ldr	r1, [r3, #24]
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	ea40 0301 	orr.w	r3, r0, r1
 8004452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b8f      	ldr	r3, [pc, #572]	; (8004698 <UART_SetConfig+0x2cc>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d005      	beq.n	800446c <UART_SetConfig+0xa0>
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8d      	ldr	r3, [pc, #564]	; (800469c <UART_SetConfig+0x2d0>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d104      	bne.n	8004476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7fe fdb8 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8004470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004474:	e003      	b.n	800447e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004476:	f7fe fd9f 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800447a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004488:	f040 810c 	bne.w	80046a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800448c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800449a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	1891      	adds	r1, r2, r2
 80044a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044a6:	415b      	adcs	r3, r3
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ae:	4621      	mov	r1, r4
 80044b0:	eb12 0801 	adds.w	r8, r2, r1
 80044b4:	4629      	mov	r1, r5
 80044b6:	eb43 0901 	adc.w	r9, r3, r1
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ce:	4690      	mov	r8, r2
 80044d0:	4699      	mov	r9, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	eb18 0303 	adds.w	r3, r8, r3
 80044d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044dc:	462b      	mov	r3, r5
 80044de:	eb49 0303 	adc.w	r3, r9, r3
 80044e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044fa:	460b      	mov	r3, r1
 80044fc:	18db      	adds	r3, r3, r3
 80044fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004500:	4613      	mov	r3, r2
 8004502:	eb42 0303 	adc.w	r3, r2, r3
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
 8004508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800450c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004510:	f7fc faac 	bl	8000a6c <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <UART_SetConfig+0x2d4>)
 800451a:	fba3 2302 	umull	r2, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	011c      	lsls	r4, r3, #4
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800452c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	1891      	adds	r1, r2, r2
 800453a:	64b9      	str	r1, [r7, #72]	; 0x48
 800453c:	415b      	adcs	r3, r3
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004544:	4641      	mov	r1, r8
 8004546:	eb12 0a01 	adds.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb43 0b01 	adc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800455c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004564:	4692      	mov	sl, r2
 8004566:	469b      	mov	fp, r3
 8004568:	4643      	mov	r3, r8
 800456a:	eb1a 0303 	adds.w	r3, sl, r3
 800456e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004572:	464b      	mov	r3, r9
 8004574:	eb4b 0303 	adc.w	r3, fp, r3
 8004578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800458c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004590:	460b      	mov	r3, r1
 8004592:	18db      	adds	r3, r3, r3
 8004594:	643b      	str	r3, [r7, #64]	; 0x40
 8004596:	4613      	mov	r3, r2
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
 800459e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045a6:	f7fc fa61 	bl	8000a6c <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <UART_SetConfig+0x2d4>)
 80045b2:	fba3 2301 	umull	r2, r3, r3, r1
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2264      	movs	r2, #100	; 0x64
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <UART_SetConfig+0x2d4>)
 80045c8:	fba3 2302 	umull	r2, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045d4:	441c      	add	r4, r3
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f0:	415b      	adcs	r3, r3
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045f8:	4641      	mov	r1, r8
 80045fa:	1851      	adds	r1, r2, r1
 80045fc:	6339      	str	r1, [r7, #48]	; 0x30
 80045fe:	4649      	mov	r1, r9
 8004600:	414b      	adcs	r3, r1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004610:	4659      	mov	r1, fp
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4651      	mov	r1, sl
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4642      	mov	r2, r8
 8004626:	189b      	adds	r3, r3, r2
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800462c:	464b      	mov	r3, r9
 800462e:	460a      	mov	r2, r1
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800464c:	460b      	mov	r3, r1
 800464e:	18db      	adds	r3, r3, r3
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
 8004652:	4613      	mov	r3, r2
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004662:	f7fc fa03 	bl	8000a6c <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <UART_SetConfig+0x2d4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <UART_SetConfig+0x2d4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 0207 	and.w	r2, r3, #7
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004694:	e105      	b.n	80048a2 <UART_SetConfig+0x4d6>
 8004696:	bf00      	nop
 8004698:	40011000 	.word	0x40011000
 800469c:	40011400 	.word	0x40011400
 80046a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	6239      	str	r1, [r7, #32]
 80046be:	415b      	adcs	r3, r3
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c6:	4641      	mov	r1, r8
 80046c8:	1854      	adds	r4, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0501 	adc.w	r5, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	00eb      	lsls	r3, r5, #3
 80046da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046de:	00e2      	lsls	r2, r4, #3
 80046e0:	4614      	mov	r4, r2
 80046e2:	461d      	mov	r5, r3
 80046e4:	4643      	mov	r3, r8
 80046e6:	18e3      	adds	r3, r4, r3
 80046e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046ec:	464b      	mov	r3, r9
 80046ee:	eb45 0303 	adc.w	r3, r5, r3
 80046f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004712:	4629      	mov	r1, r5
 8004714:	008b      	lsls	r3, r1, #2
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471c:	4621      	mov	r1, r4
 800471e:	008a      	lsls	r2, r1, #2
 8004720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004724:	f7fc f9a2 	bl	8000a6c <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <UART_SetConfig+0x4e4>)
 800472e:	fba3 2302 	umull	r2, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	011c      	lsls	r4, r3, #4
 8004736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	61b9      	str	r1, [r7, #24]
 8004750:	415b      	adcs	r3, r3
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6139      	str	r1, [r7, #16]
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800478c:	464b      	mov	r3, r9
 800478e:	460a      	mov	r2, r1
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047b0:	4649      	mov	r1, r9
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	4641      	mov	r1, r8
 80047b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ba:	4641      	mov	r1, r8
 80047bc:	008a      	lsls	r2, r1, #2
 80047be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047c2:	f7fc f953 	bl	8000a6c <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <UART_SetConfig+0x4e4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	; 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	3332      	adds	r3, #50	; 0x32
 80047de:	4a34      	ldr	r2, [pc, #208]	; (80048b0 <UART_SetConfig+0x4e4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ea:	441c      	add	r4, r3
 80047ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f0:	2200      	movs	r2, #0
 80047f2:	673b      	str	r3, [r7, #112]	; 0x70
 80047f4:	677a      	str	r2, [r7, #116]	; 0x74
 80047f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047fa:	4642      	mov	r2, r8
 80047fc:	464b      	mov	r3, r9
 80047fe:	1891      	adds	r1, r2, r2
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	415b      	adcs	r3, r3
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800480a:	4641      	mov	r1, r8
 800480c:	1851      	adds	r1, r2, r1
 800480e:	6039      	str	r1, [r7, #0]
 8004810:	4649      	mov	r1, r9
 8004812:	414b      	adcs	r3, r1
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004822:	4659      	mov	r1, fp
 8004824:	00cb      	lsls	r3, r1, #3
 8004826:	4651      	mov	r1, sl
 8004828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482c:	4651      	mov	r1, sl
 800482e:	00ca      	lsls	r2, r1, #3
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	4603      	mov	r3, r0
 8004836:	4642      	mov	r2, r8
 8004838:	189b      	adds	r3, r3, r2
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
 800483c:	464b      	mov	r3, r9
 800483e:	460a      	mov	r2, r1
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	663b      	str	r3, [r7, #96]	; 0x60
 8004850:	667a      	str	r2, [r7, #100]	; 0x64
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800485e:	4649      	mov	r1, r9
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	4641      	mov	r1, r8
 8004864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004868:	4641      	mov	r1, r8
 800486a:	008a      	lsls	r2, r1, #2
 800486c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004870:	f7fc f8fc 	bl	8000a6c <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <UART_SetConfig+0x4e4>)
 800487a:	fba3 1302 	umull	r1, r3, r3, r2
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2164      	movs	r1, #100	; 0x64
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	3332      	adds	r3, #50	; 0x32
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <UART_SetConfig+0x4e4>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4422      	add	r2, r4
 80048a0:	609a      	str	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000034 	.word	0x20000034

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4d0d      	ldr	r5, [pc, #52]	; (80048f8 <__libc_init_array+0x38>)
 80048c4:	4c0d      	ldr	r4, [pc, #52]	; (80048fc <__libc_init_array+0x3c>)
 80048c6:	1b64      	subs	r4, r4, r5
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	2600      	movs	r6, #0
 80048cc:	42a6      	cmp	r6, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	4d0b      	ldr	r5, [pc, #44]	; (8004900 <__libc_init_array+0x40>)
 80048d2:	4c0c      	ldr	r4, [pc, #48]	; (8004904 <__libc_init_array+0x44>)
 80048d4:	f000 ffae 	bl	8005834 <_init>
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	2600      	movs	r6, #0
 80048de:	42a6      	cmp	r6, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e8:	4798      	blx	r3
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f2:	4798      	blx	r3
 80048f4:	3601      	adds	r6, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	08005910 	.word	0x08005910
 80048fc:	08005910 	.word	0x08005910
 8004900:	08005910 	.word	0x08005910
 8004904:	08005914 	.word	0x08005914

08004908 <memset>:
 8004908:	4402      	add	r2, r0
 800490a:	4603      	mov	r3, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <iprintf>:
 8004918:	b40f      	push	{r0, r1, r2, r3}
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <iprintf+0x2c>)
 800491c:	b513      	push	{r0, r1, r4, lr}
 800491e:	681c      	ldr	r4, [r3, #0]
 8004920:	b124      	cbz	r4, 800492c <iprintf+0x14>
 8004922:	69a3      	ldr	r3, [r4, #24]
 8004924:	b913      	cbnz	r3, 800492c <iprintf+0x14>
 8004926:	4620      	mov	r0, r4
 8004928:	f000 f866 	bl	80049f8 <__sinit>
 800492c:	ab05      	add	r3, sp, #20
 800492e:	9a04      	ldr	r2, [sp, #16]
 8004930:	68a1      	ldr	r1, [r4, #8]
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	4620      	mov	r0, r4
 8004936:	f000 f9bd 	bl	8004cb4 <_vfiprintf_r>
 800493a:	b002      	add	sp, #8
 800493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr
 8004944:	20000034 	.word	0x20000034

08004948 <std>:
 8004948:	2300      	movs	r3, #0
 800494a:	b510      	push	{r4, lr}
 800494c:	4604      	mov	r4, r0
 800494e:	e9c0 3300 	strd	r3, r3, [r0]
 8004952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004956:	6083      	str	r3, [r0, #8]
 8004958:	8181      	strh	r1, [r0, #12]
 800495a:	6643      	str	r3, [r0, #100]	; 0x64
 800495c:	81c2      	strh	r2, [r0, #14]
 800495e:	6183      	str	r3, [r0, #24]
 8004960:	4619      	mov	r1, r3
 8004962:	2208      	movs	r2, #8
 8004964:	305c      	adds	r0, #92	; 0x5c
 8004966:	f7ff ffcf 	bl	8004908 <memset>
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <std+0x38>)
 800496c:	6263      	str	r3, [r4, #36]	; 0x24
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <std+0x3c>)
 8004970:	62a3      	str	r3, [r4, #40]	; 0x28
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x40>)
 8004974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x44>)
 8004978:	6224      	str	r4, [r4, #32]
 800497a:	6323      	str	r3, [r4, #48]	; 0x30
 800497c:	bd10      	pop	{r4, pc}
 800497e:	bf00      	nop
 8004980:	0800525d 	.word	0x0800525d
 8004984:	0800527f 	.word	0x0800527f
 8004988:	080052b7 	.word	0x080052b7
 800498c:	080052db 	.word	0x080052db

08004990 <_cleanup_r>:
 8004990:	4901      	ldr	r1, [pc, #4]	; (8004998 <_cleanup_r+0x8>)
 8004992:	f000 b8af 	b.w	8004af4 <_fwalk_reent>
 8004996:	bf00      	nop
 8004998:	080055b5 	.word	0x080055b5

0800499c <__sfmoreglue>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	2268      	movs	r2, #104	; 0x68
 80049a0:	1e4d      	subs	r5, r1, #1
 80049a2:	4355      	muls	r5, r2
 80049a4:	460e      	mov	r6, r1
 80049a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049aa:	f000 f8e5 	bl	8004b78 <_malloc_r>
 80049ae:	4604      	mov	r4, r0
 80049b0:	b140      	cbz	r0, 80049c4 <__sfmoreglue+0x28>
 80049b2:	2100      	movs	r1, #0
 80049b4:	e9c0 1600 	strd	r1, r6, [r0]
 80049b8:	300c      	adds	r0, #12
 80049ba:	60a0      	str	r0, [r4, #8]
 80049bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049c0:	f7ff ffa2 	bl	8004908 <memset>
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd70      	pop	{r4, r5, r6, pc}

080049c8 <__sfp_lock_acquire>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__sfp_lock_acquire+0x8>)
 80049ca:	f000 b8b3 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000361 	.word	0x20000361

080049d4 <__sfp_lock_release>:
 80049d4:	4801      	ldr	r0, [pc, #4]	; (80049dc <__sfp_lock_release+0x8>)
 80049d6:	f000 b8ae 	b.w	8004b36 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	20000361 	.word	0x20000361

080049e0 <__sinit_lock_acquire>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__sinit_lock_acquire+0x8>)
 80049e2:	f000 b8a7 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	20000362 	.word	0x20000362

080049ec <__sinit_lock_release>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__sinit_lock_release+0x8>)
 80049ee:	f000 b8a2 	b.w	8004b36 <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	20000362 	.word	0x20000362

080049f8 <__sinit>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	f7ff fff0 	bl	80049e0 <__sinit_lock_acquire>
 8004a00:	69a3      	ldr	r3, [r4, #24]
 8004a02:	b11b      	cbz	r3, 8004a0c <__sinit+0x14>
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f7ff bff0 	b.w	80049ec <__sinit_lock_release>
 8004a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a10:	6523      	str	r3, [r4, #80]	; 0x50
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <__sinit+0x68>)
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <__sinit+0x6c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	bf04      	itt	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	61a3      	streq	r3, [r4, #24]
 8004a22:	4620      	mov	r0, r4
 8004a24:	f000 f820 	bl	8004a68 <__sfp>
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 f81c 	bl	8004a68 <__sfp>
 8004a30:	60a0      	str	r0, [r4, #8]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f818 	bl	8004a68 <__sfp>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60e0      	str	r0, [r4, #12]
 8004a3c:	2104      	movs	r1, #4
 8004a3e:	6860      	ldr	r0, [r4, #4]
 8004a40:	f7ff ff82 	bl	8004948 <std>
 8004a44:	68a0      	ldr	r0, [r4, #8]
 8004a46:	2201      	movs	r2, #1
 8004a48:	2109      	movs	r1, #9
 8004a4a:	f7ff ff7d 	bl	8004948 <std>
 8004a4e:	68e0      	ldr	r0, [r4, #12]
 8004a50:	2202      	movs	r2, #2
 8004a52:	2112      	movs	r1, #18
 8004a54:	f7ff ff78 	bl	8004948 <std>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61a3      	str	r3, [r4, #24]
 8004a5c:	e7d2      	b.n	8004a04 <__sinit+0xc>
 8004a5e:	bf00      	nop
 8004a60:	08005870 	.word	0x08005870
 8004a64:	08004991 	.word	0x08004991

08004a68 <__sfp>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	f7ff ffac 	bl	80049c8 <__sfp_lock_acquire>
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <__sfp+0x84>)
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	69b3      	ldr	r3, [r6, #24]
 8004a76:	b913      	cbnz	r3, 8004a7e <__sfp+0x16>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ffbd 	bl	80049f8 <__sinit>
 8004a7e:	3648      	adds	r6, #72	; 0x48
 8004a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	d503      	bpl.n	8004a90 <__sfp+0x28>
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	b30b      	cbz	r3, 8004ad0 <__sfp+0x68>
 8004a8c:	6836      	ldr	r6, [r6, #0]
 8004a8e:	e7f7      	b.n	8004a80 <__sfp+0x18>
 8004a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a94:	b9d5      	cbnz	r5, 8004acc <__sfp+0x64>
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <__sfp+0x88>)
 8004a98:	60e3      	str	r3, [r4, #12]
 8004a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8004aa0:	f000 f847 	bl	8004b32 <__retarget_lock_init_recursive>
 8004aa4:	f7ff ff96 	bl	80049d4 <__sfp_lock_release>
 8004aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ab0:	6025      	str	r5, [r4, #0]
 8004ab2:	61a5      	str	r5, [r4, #24]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004abc:	f7ff ff24 	bl	8004908 <memset>
 8004ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004acc:	3468      	adds	r4, #104	; 0x68
 8004ace:	e7d9      	b.n	8004a84 <__sfp+0x1c>
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f7ff ff62 	bl	800499c <__sfmoreglue>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	6030      	str	r0, [r6, #0]
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d1d5      	bne.n	8004a8c <__sfp+0x24>
 8004ae0:	f7ff ff78 	bl	80049d4 <__sfp_lock_release>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	e7ee      	b.n	8004ac8 <__sfp+0x60>
 8004aea:	bf00      	nop
 8004aec:	08005870 	.word	0x08005870
 8004af0:	ffff0001 	.word	0xffff0001

08004af4 <_fwalk_reent>:
 8004af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4606      	mov	r6, r0
 8004afa:	4688      	mov	r8, r1
 8004afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b00:	2700      	movs	r7, #0
 8004b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b06:	f1b9 0901 	subs.w	r9, r9, #1
 8004b0a:	d505      	bpl.n	8004b18 <_fwalk_reent+0x24>
 8004b0c:	6824      	ldr	r4, [r4, #0]
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	d1f7      	bne.n	8004b02 <_fwalk_reent+0xe>
 8004b12:	4638      	mov	r0, r7
 8004b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b18:	89ab      	ldrh	r3, [r5, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d907      	bls.n	8004b2e <_fwalk_reent+0x3a>
 8004b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b22:	3301      	adds	r3, #1
 8004b24:	d003      	beq.n	8004b2e <_fwalk_reent+0x3a>
 8004b26:	4629      	mov	r1, r5
 8004b28:	4630      	mov	r0, r6
 8004b2a:	47c0      	blx	r8
 8004b2c:	4307      	orrs	r7, r0
 8004b2e:	3568      	adds	r5, #104	; 0x68
 8004b30:	e7e9      	b.n	8004b06 <_fwalk_reent+0x12>

08004b32 <__retarget_lock_init_recursive>:
 8004b32:	4770      	bx	lr

08004b34 <__retarget_lock_acquire_recursive>:
 8004b34:	4770      	bx	lr

08004b36 <__retarget_lock_release_recursive>:
 8004b36:	4770      	bx	lr

08004b38 <sbrk_aligned>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4e0e      	ldr	r6, [pc, #56]	; (8004b74 <sbrk_aligned+0x3c>)
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	6831      	ldr	r1, [r6, #0]
 8004b40:	4605      	mov	r5, r0
 8004b42:	b911      	cbnz	r1, 8004b4a <sbrk_aligned+0x12>
 8004b44:	f000 fb7a 	bl	800523c <_sbrk_r>
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 fb75 	bl	800523c <_sbrk_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d00a      	beq.n	8004b6c <sbrk_aligned+0x34>
 8004b56:	1cc4      	adds	r4, r0, #3
 8004b58:	f024 0403 	bic.w	r4, r4, #3
 8004b5c:	42a0      	cmp	r0, r4
 8004b5e:	d007      	beq.n	8004b70 <sbrk_aligned+0x38>
 8004b60:	1a21      	subs	r1, r4, r0
 8004b62:	4628      	mov	r0, r5
 8004b64:	f000 fb6a 	bl	800523c <_sbrk_r>
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d101      	bne.n	8004b70 <sbrk_aligned+0x38>
 8004b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b70:	4620      	mov	r0, r4
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	20000368 	.word	0x20000368

08004b78 <_malloc_r>:
 8004b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	1ccd      	adds	r5, r1, #3
 8004b7e:	f025 0503 	bic.w	r5, r5, #3
 8004b82:	3508      	adds	r5, #8
 8004b84:	2d0c      	cmp	r5, #12
 8004b86:	bf38      	it	cc
 8004b88:	250c      	movcc	r5, #12
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	4607      	mov	r7, r0
 8004b8e:	db01      	blt.n	8004b94 <_malloc_r+0x1c>
 8004b90:	42a9      	cmp	r1, r5
 8004b92:	d905      	bls.n	8004ba0 <_malloc_r+0x28>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	2600      	movs	r6, #0
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba0:	4e2e      	ldr	r6, [pc, #184]	; (8004c5c <_malloc_r+0xe4>)
 8004ba2:	f000 fdbb 	bl	800571c <__malloc_lock>
 8004ba6:	6833      	ldr	r3, [r6, #0]
 8004ba8:	461c      	mov	r4, r3
 8004baa:	bb34      	cbnz	r4, 8004bfa <_malloc_r+0x82>
 8004bac:	4629      	mov	r1, r5
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f7ff ffc2 	bl	8004b38 <sbrk_aligned>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	d14d      	bne.n	8004c56 <_malloc_r+0xde>
 8004bba:	6834      	ldr	r4, [r6, #0]
 8004bbc:	4626      	mov	r6, r4
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d140      	bne.n	8004c44 <_malloc_r+0xcc>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	eb04 0803 	add.w	r8, r4, r3
 8004bcc:	f000 fb36 	bl	800523c <_sbrk_r>
 8004bd0:	4580      	cmp	r8, r0
 8004bd2:	d13a      	bne.n	8004c4a <_malloc_r+0xd2>
 8004bd4:	6821      	ldr	r1, [r4, #0]
 8004bd6:	3503      	adds	r5, #3
 8004bd8:	1a6d      	subs	r5, r5, r1
 8004bda:	f025 0503 	bic.w	r5, r5, #3
 8004bde:	3508      	adds	r5, #8
 8004be0:	2d0c      	cmp	r5, #12
 8004be2:	bf38      	it	cc
 8004be4:	250c      	movcc	r5, #12
 8004be6:	4629      	mov	r1, r5
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7ff ffa5 	bl	8004b38 <sbrk_aligned>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d02b      	beq.n	8004c4a <_malloc_r+0xd2>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	442b      	add	r3, r5
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	e00e      	b.n	8004c18 <_malloc_r+0xa0>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	1b52      	subs	r2, r2, r5
 8004bfe:	d41e      	bmi.n	8004c3e <_malloc_r+0xc6>
 8004c00:	2a0b      	cmp	r2, #11
 8004c02:	d916      	bls.n	8004c32 <_malloc_r+0xba>
 8004c04:	1961      	adds	r1, r4, r5
 8004c06:	42a3      	cmp	r3, r4
 8004c08:	6025      	str	r5, [r4, #0]
 8004c0a:	bf18      	it	ne
 8004c0c:	6059      	strne	r1, [r3, #4]
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	bf08      	it	eq
 8004c12:	6031      	streq	r1, [r6, #0]
 8004c14:	5162      	str	r2, [r4, r5]
 8004c16:	604b      	str	r3, [r1, #4]
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f104 060b 	add.w	r6, r4, #11
 8004c1e:	f000 fd83 	bl	8005728 <__malloc_unlock>
 8004c22:	f026 0607 	bic.w	r6, r6, #7
 8004c26:	1d23      	adds	r3, r4, #4
 8004c28:	1af2      	subs	r2, r6, r3
 8004c2a:	d0b6      	beq.n	8004b9a <_malloc_r+0x22>
 8004c2c:	1b9b      	subs	r3, r3, r6
 8004c2e:	50a3      	str	r3, [r4, r2]
 8004c30:	e7b3      	b.n	8004b9a <_malloc_r+0x22>
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	bf0c      	ite	eq
 8004c38:	6032      	streq	r2, [r6, #0]
 8004c3a:	605a      	strne	r2, [r3, #4]
 8004c3c:	e7ec      	b.n	8004c18 <_malloc_r+0xa0>
 8004c3e:	4623      	mov	r3, r4
 8004c40:	6864      	ldr	r4, [r4, #4]
 8004c42:	e7b2      	b.n	8004baa <_malloc_r+0x32>
 8004c44:	4634      	mov	r4, r6
 8004c46:	6876      	ldr	r6, [r6, #4]
 8004c48:	e7b9      	b.n	8004bbe <_malloc_r+0x46>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4638      	mov	r0, r7
 8004c50:	f000 fd6a 	bl	8005728 <__malloc_unlock>
 8004c54:	e7a1      	b.n	8004b9a <_malloc_r+0x22>
 8004c56:	6025      	str	r5, [r4, #0]
 8004c58:	e7de      	b.n	8004c18 <_malloc_r+0xa0>
 8004c5a:	bf00      	nop
 8004c5c:	20000364 	.word	0x20000364

08004c60 <__sfputc_r>:
 8004c60:	6893      	ldr	r3, [r2, #8]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	b410      	push	{r4}
 8004c68:	6093      	str	r3, [r2, #8]
 8004c6a:	da08      	bge.n	8004c7e <__sfputc_r+0x1e>
 8004c6c:	6994      	ldr	r4, [r2, #24]
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	db01      	blt.n	8004c76 <__sfputc_r+0x16>
 8004c72:	290a      	cmp	r1, #10
 8004c74:	d103      	bne.n	8004c7e <__sfputc_r+0x1e>
 8004c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c7a:	f000 bb33 	b.w	80052e4 <__swbuf_r>
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	1c58      	adds	r0, r3, #1
 8004c82:	6010      	str	r0, [r2, #0]
 8004c84:	7019      	strb	r1, [r3, #0]
 8004c86:	4608      	mov	r0, r1
 8004c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <__sfputs_r>:
 8004c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	18d5      	adds	r5, r2, r3
 8004c98:	42ac      	cmp	r4, r5
 8004c9a:	d101      	bne.n	8004ca0 <__sfputs_r+0x12>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e007      	b.n	8004cb0 <__sfputs_r+0x22>
 8004ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7ff ffda 	bl	8004c60 <__sfputc_r>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d1f3      	bne.n	8004c98 <__sfputs_r+0xa>
 8004cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cb4 <_vfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	460d      	mov	r5, r1
 8004cba:	b09d      	sub	sp, #116	; 0x74
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	4698      	mov	r8, r3
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	b118      	cbz	r0, 8004ccc <_vfiprintf_r+0x18>
 8004cc4:	6983      	ldr	r3, [r0, #24]
 8004cc6:	b90b      	cbnz	r3, 8004ccc <_vfiprintf_r+0x18>
 8004cc8:	f7ff fe96 	bl	80049f8 <__sinit>
 8004ccc:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <_vfiprintf_r+0x240>)
 8004cce:	429d      	cmp	r5, r3
 8004cd0:	d11b      	bne.n	8004d0a <_vfiprintf_r+0x56>
 8004cd2:	6875      	ldr	r5, [r6, #4]
 8004cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd6:	07d9      	lsls	r1, r3, #31
 8004cd8:	d405      	bmi.n	8004ce6 <_vfiprintf_r+0x32>
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	059a      	lsls	r2, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <_vfiprintf_r+0x32>
 8004ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ce2:	f7ff ff27 	bl	8004b34 <__retarget_lock_acquire_recursive>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	d501      	bpl.n	8004cf0 <_vfiprintf_r+0x3c>
 8004cec:	692b      	ldr	r3, [r5, #16]
 8004cee:	b9eb      	cbnz	r3, 8004d2c <_vfiprintf_r+0x78>
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 fb5a 	bl	80053ac <__swsetup_r>
 8004cf8:	b1c0      	cbz	r0, 8004d2c <_vfiprintf_r+0x78>
 8004cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cfc:	07dc      	lsls	r4, r3, #31
 8004cfe:	d50e      	bpl.n	8004d1e <_vfiprintf_r+0x6a>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b01d      	add	sp, #116	; 0x74
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <_vfiprintf_r+0x244>)
 8004d0c:	429d      	cmp	r5, r3
 8004d0e:	d101      	bne.n	8004d14 <_vfiprintf_r+0x60>
 8004d10:	68b5      	ldr	r5, [r6, #8]
 8004d12:	e7df      	b.n	8004cd4 <_vfiprintf_r+0x20>
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <_vfiprintf_r+0x248>)
 8004d16:	429d      	cmp	r5, r3
 8004d18:	bf08      	it	eq
 8004d1a:	68f5      	ldreq	r5, [r6, #12]
 8004d1c:	e7da      	b.n	8004cd4 <_vfiprintf_r+0x20>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	0598      	lsls	r0, r3, #22
 8004d22:	d4ed      	bmi.n	8004d00 <_vfiprintf_r+0x4c>
 8004d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d26:	f7ff ff06 	bl	8004b36 <__retarget_lock_release_recursive>
 8004d2a:	e7e9      	b.n	8004d00 <_vfiprintf_r+0x4c>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d30:	2320      	movs	r3, #32
 8004d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d3a:	2330      	movs	r3, #48	; 0x30
 8004d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f00 <_vfiprintf_r+0x24c>
 8004d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d44:	f04f 0901 	mov.w	r9, #1
 8004d48:	4623      	mov	r3, r4
 8004d4a:	469a      	mov	sl, r3
 8004d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d50:	b10a      	cbz	r2, 8004d56 <_vfiprintf_r+0xa2>
 8004d52:	2a25      	cmp	r2, #37	; 0x25
 8004d54:	d1f9      	bne.n	8004d4a <_vfiprintf_r+0x96>
 8004d56:	ebba 0b04 	subs.w	fp, sl, r4
 8004d5a:	d00b      	beq.n	8004d74 <_vfiprintf_r+0xc0>
 8004d5c:	465b      	mov	r3, fp
 8004d5e:	4622      	mov	r2, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ff93 	bl	8004c8e <__sfputs_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f000 80aa 	beq.w	8004ec2 <_vfiprintf_r+0x20e>
 8004d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d70:	445a      	add	r2, fp
 8004d72:	9209      	str	r2, [sp, #36]	; 0x24
 8004d74:	f89a 3000 	ldrb.w	r3, [sl]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a2 	beq.w	8004ec2 <_vfiprintf_r+0x20e>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d88:	f10a 0a01 	add.w	sl, sl, #1
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	9307      	str	r3, [sp, #28]
 8004d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d94:	931a      	str	r3, [sp, #104]	; 0x68
 8004d96:	4654      	mov	r4, sl
 8004d98:	2205      	movs	r2, #5
 8004d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9e:	4858      	ldr	r0, [pc, #352]	; (8004f00 <_vfiprintf_r+0x24c>)
 8004da0:	f7fb fa1e 	bl	80001e0 <memchr>
 8004da4:	9a04      	ldr	r2, [sp, #16]
 8004da6:	b9d8      	cbnz	r0, 8004de0 <_vfiprintf_r+0x12c>
 8004da8:	06d1      	lsls	r1, r2, #27
 8004daa:	bf44      	itt	mi
 8004dac:	2320      	movmi	r3, #32
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004db2:	0713      	lsls	r3, r2, #28
 8004db4:	bf44      	itt	mi
 8004db6:	232b      	movmi	r3, #43	; 0x2b
 8004db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc2:	d015      	beq.n	8004df0 <_vfiprintf_r+0x13c>
 8004dc4:	9a07      	ldr	r2, [sp, #28]
 8004dc6:	4654      	mov	r4, sl
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f04f 0c0a 	mov.w	ip, #10
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd4:	3b30      	subs	r3, #48	; 0x30
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d94e      	bls.n	8004e78 <_vfiprintf_r+0x1c4>
 8004dda:	b1b0      	cbz	r0, 8004e0a <_vfiprintf_r+0x156>
 8004ddc:	9207      	str	r2, [sp, #28]
 8004dde:	e014      	b.n	8004e0a <_vfiprintf_r+0x156>
 8004de0:	eba0 0308 	sub.w	r3, r0, r8
 8004de4:	fa09 f303 	lsl.w	r3, r9, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	46a2      	mov	sl, r4
 8004dee:	e7d2      	b.n	8004d96 <_vfiprintf_r+0xe2>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	1d19      	adds	r1, r3, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	9103      	str	r1, [sp, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfbb      	ittet	lt
 8004dfc:	425b      	neglt	r3, r3
 8004dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8004e02:	9307      	strge	r3, [sp, #28]
 8004e04:	9307      	strlt	r3, [sp, #28]
 8004e06:	bfb8      	it	lt
 8004e08:	9204      	strlt	r2, [sp, #16]
 8004e0a:	7823      	ldrb	r3, [r4, #0]
 8004e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e0e:	d10c      	bne.n	8004e2a <_vfiprintf_r+0x176>
 8004e10:	7863      	ldrb	r3, [r4, #1]
 8004e12:	2b2a      	cmp	r3, #42	; 0x2a
 8004e14:	d135      	bne.n	8004e82 <_vfiprintf_r+0x1ce>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	9203      	str	r2, [sp, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfb8      	it	lt
 8004e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e26:	3402      	adds	r4, #2
 8004e28:	9305      	str	r3, [sp, #20]
 8004e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f10 <_vfiprintf_r+0x25c>
 8004e2e:	7821      	ldrb	r1, [r4, #0]
 8004e30:	2203      	movs	r2, #3
 8004e32:	4650      	mov	r0, sl
 8004e34:	f7fb f9d4 	bl	80001e0 <memchr>
 8004e38:	b140      	cbz	r0, 8004e4c <_vfiprintf_r+0x198>
 8004e3a:	2340      	movs	r3, #64	; 0x40
 8004e3c:	eba0 000a 	sub.w	r0, r0, sl
 8004e40:	fa03 f000 	lsl.w	r0, r3, r0
 8004e44:	9b04      	ldr	r3, [sp, #16]
 8004e46:	4303      	orrs	r3, r0
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	482c      	ldr	r0, [pc, #176]	; (8004f04 <_vfiprintf_r+0x250>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9c2 	bl	80001e0 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d03f      	beq.n	8004ee0 <_vfiprintf_r+0x22c>
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <_vfiprintf_r+0x254>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_vfiprintf_r+0x1f8>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	443b      	add	r3, r7
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	e767      	b.n	8004d48 <_vfiprintf_r+0x94>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a5      	b.n	8004dce <_vfiprintf_r+0x11a>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	; 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_vfiprintf_r+0x1ee>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c5      	beq.n	8004e2a <_vfiprintf_r+0x176>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c3      	b.n	8004e2a <_vfiprintf_r+0x176>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_vfiprintf_r+0x1da>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <_vfiprintf_r+0x258>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	1c78      	adds	r0, r7, #1
 8004ec0:	d1d6      	bne.n	8004e70 <_vfiprintf_r+0x1bc>
 8004ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ec4:	07d9      	lsls	r1, r3, #31
 8004ec6:	d405      	bmi.n	8004ed4 <_vfiprintf_r+0x220>
 8004ec8:	89ab      	ldrh	r3, [r5, #12]
 8004eca:	059a      	lsls	r2, r3, #22
 8004ecc:	d402      	bmi.n	8004ed4 <_vfiprintf_r+0x220>
 8004ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed0:	f7ff fe31 	bl	8004b36 <__retarget_lock_release_recursive>
 8004ed4:	89ab      	ldrh	r3, [r5, #12]
 8004ed6:	065b      	lsls	r3, r3, #25
 8004ed8:	f53f af12 	bmi.w	8004d00 <_vfiprintf_r+0x4c>
 8004edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ede:	e711      	b.n	8004d04 <_vfiprintf_r+0x50>
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <_vfiprintf_r+0x258>)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 f880 	bl	8004ff0 <_printf_i>
 8004ef0:	e7e4      	b.n	8004ebc <_vfiprintf_r+0x208>
 8004ef2:	bf00      	nop
 8004ef4:	08005894 	.word	0x08005894
 8004ef8:	080058b4 	.word	0x080058b4
 8004efc:	08005874 	.word	0x08005874
 8004f00:	080058d4 	.word	0x080058d4
 8004f04:	080058de 	.word	0x080058de
 8004f08:	00000000 	.word	0x00000000
 8004f0c:	08004c8f 	.word	0x08004c8f
 8004f10:	080058da 	.word	0x080058da

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfb8      	it	lt
 8004f28:	4613      	movlt	r3, r2
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f30:	4607      	mov	r7, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc26      	bgt.n	8004faa <_printf_common+0x96>
 8004f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f60:	1e13      	subs	r3, r2, #0
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42b      	bmi.n	8004fc4 <_printf_common+0xb0>
 8004f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f70:	4649      	mov	r1, r9
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d01e      	beq.n	8004fb8 <_printf_common+0xa4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	68e5      	ldr	r5, [r4, #12]
 8004f7e:	6832      	ldr	r2, [r6, #0]
 8004f80:	f003 0306 	and.w	r3, r3, #6
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	bf08      	it	eq
 8004f88:	1aad      	subeq	r5, r5, r2
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	6922      	ldr	r2, [r4, #16]
 8004f8e:	bf0c      	ite	eq
 8004f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f94:	2500      	movne	r5, #0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	1a9b      	subgt	r3, r3, r2
 8004f9c:	18ed      	addgt	r5, r5, r3
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xc8>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xa8>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xac>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c6      	b.n	8004f52 <_printf_common+0x3e>
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	2030      	movs	r0, #48	; 0x30
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fce:	4422      	add	r2, r4
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd8:	3302      	adds	r3, #2
 8004fda:	e7c7      	b.n	8004f6c <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa4>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x8e>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ff8:	2f78      	cmp	r7, #120	; 0x78
 8004ffa:	4691      	mov	r9, r2
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	469a      	mov	sl, r3
 8005002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	; 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d8 	beq.w	80051c2 <_printf_i+0x1d2>
 8005012:	2f58      	cmp	r7, #88	; 0x58
 8005014:	f000 80a3 	beq.w	800515e <_printf_i+0x16e>
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	; (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	080051a9 	.word	0x080051a9
 8005060:	080050cd 	.word	0x080050cd
 8005064:	0800518b 	.word	0x0800518b
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051cb 	.word	0x080051cb
 8005074:	08005019 	.word	0x08005019
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	08005193 	.word	0x08005193
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e0a3      	b.n	80051e4 <_printf_i+0x1f4>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	6829      	ldr	r1, [r5, #0]
 80050a0:	0606      	lsls	r6, r0, #24
 80050a2:	f101 0304 	add.w	r3, r1, #4
 80050a6:	d50a      	bpl.n	80050be <_printf_i+0xce>
 80050a8:	680e      	ldr	r6, [r1, #0]
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	da03      	bge.n	80050b8 <_printf_i+0xc8>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	4276      	negs	r6, r6
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b8:	485e      	ldr	r0, [pc, #376]	; (8005234 <_printf_i+0x244>)
 80050ba:	230a      	movs	r3, #10
 80050bc:	e019      	b.n	80050f2 <_printf_i+0x102>
 80050be:	680e      	ldr	r6, [r1, #0]
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050c6:	bf18      	it	ne
 80050c8:	b236      	sxthne	r6, r6
 80050ca:	e7ef      	b.n	80050ac <_printf_i+0xbc>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1d19      	adds	r1, r3, #4
 80050d2:	6029      	str	r1, [r5, #0]
 80050d4:	0601      	lsls	r1, r0, #24
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0xec>
 80050d8:	681e      	ldr	r6, [r3, #0]
 80050da:	e002      	b.n	80050e2 <_printf_i+0xf2>
 80050dc:	0646      	lsls	r6, r0, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0xe8>
 80050e0:	881e      	ldrh	r6, [r3, #0]
 80050e2:	4854      	ldr	r0, [pc, #336]	; (8005234 <_printf_i+0x244>)
 80050e4:	2f6f      	cmp	r7, #111	; 0x6f
 80050e6:	bf0c      	ite	eq
 80050e8:	2308      	moveq	r3, #8
 80050ea:	230a      	movne	r3, #10
 80050ec:	2100      	movs	r1, #0
 80050ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f2:	6865      	ldr	r5, [r4, #4]
 80050f4:	60a5      	str	r5, [r4, #8]
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	bfa2      	ittt	ge
 80050fa:	6821      	ldrge	r1, [r4, #0]
 80050fc:	f021 0104 	bicge.w	r1, r1, #4
 8005100:	6021      	strge	r1, [r4, #0]
 8005102:	b90e      	cbnz	r6, 8005108 <_printf_i+0x118>
 8005104:	2d00      	cmp	r5, #0
 8005106:	d04d      	beq.n	80051a4 <_printf_i+0x1b4>
 8005108:	4615      	mov	r5, r2
 800510a:	fbb6 f1f3 	udiv	r1, r6, r3
 800510e:	fb03 6711 	mls	r7, r3, r1, r6
 8005112:	5dc7      	ldrb	r7, [r0, r7]
 8005114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005118:	4637      	mov	r7, r6
 800511a:	42bb      	cmp	r3, r7
 800511c:	460e      	mov	r6, r1
 800511e:	d9f4      	bls.n	800510a <_printf_i+0x11a>
 8005120:	2b08      	cmp	r3, #8
 8005122:	d10b      	bne.n	800513c <_printf_i+0x14c>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07de      	lsls	r6, r3, #31
 8005128:	d508      	bpl.n	800513c <_printf_i+0x14c>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	6861      	ldr	r1, [r4, #4]
 800512e:	4299      	cmp	r1, r3
 8005130:	bfde      	ittt	le
 8005132:	2330      	movle	r3, #48	; 0x30
 8005134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800513c:	1b52      	subs	r2, r2, r5
 800513e:	6122      	str	r2, [r4, #16]
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	464b      	mov	r3, r9
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fee2 	bl	8004f14 <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14c      	bne.n	80051ee <_printf_i+0x1fe>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b004      	add	sp, #16
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	4835      	ldr	r0, [pc, #212]	; (8005234 <_printf_i+0x244>)
 8005160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005164:	6829      	ldr	r1, [r5, #0]
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f851 6b04 	ldr.w	r6, [r1], #4
 800516c:	6029      	str	r1, [r5, #0]
 800516e:	061d      	lsls	r5, r3, #24
 8005170:	d514      	bpl.n	800519c <_printf_i+0x1ac>
 8005172:	07df      	lsls	r7, r3, #31
 8005174:	bf44      	itt	mi
 8005176:	f043 0320 	orrmi.w	r3, r3, #32
 800517a:	6023      	strmi	r3, [r4, #0]
 800517c:	b91e      	cbnz	r6, 8005186 <_printf_i+0x196>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f023 0320 	bic.w	r3, r3, #32
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	2310      	movs	r3, #16
 8005188:	e7b0      	b.n	80050ec <_printf_i+0xfc>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f043 0320 	orr.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	2378      	movs	r3, #120	; 0x78
 8005194:	4828      	ldr	r0, [pc, #160]	; (8005238 <_printf_i+0x248>)
 8005196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800519a:	e7e3      	b.n	8005164 <_printf_i+0x174>
 800519c:	0659      	lsls	r1, r3, #25
 800519e:	bf48      	it	mi
 80051a0:	b2b6      	uxthmi	r6, r6
 80051a2:	e7e6      	b.n	8005172 <_printf_i+0x182>
 80051a4:	4615      	mov	r5, r2
 80051a6:	e7bb      	b.n	8005120 <_printf_i+0x130>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	6826      	ldr	r6, [r4, #0]
 80051ac:	6961      	ldr	r1, [r4, #20]
 80051ae:	1d18      	adds	r0, r3, #4
 80051b0:	6028      	str	r0, [r5, #0]
 80051b2:	0635      	lsls	r5, r6, #24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	d501      	bpl.n	80051bc <_printf_i+0x1cc>
 80051b8:	6019      	str	r1, [r3, #0]
 80051ba:	e002      	b.n	80051c2 <_printf_i+0x1d2>
 80051bc:	0670      	lsls	r0, r6, #25
 80051be:	d5fb      	bpl.n	80051b8 <_printf_i+0x1c8>
 80051c0:	8019      	strh	r1, [r3, #0]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	4615      	mov	r5, r2
 80051c8:	e7ba      	b.n	8005140 <_printf_i+0x150>
 80051ca:	682b      	ldr	r3, [r5, #0]
 80051cc:	1d1a      	adds	r2, r3, #4
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	2100      	movs	r1, #0
 80051d6:	4628      	mov	r0, r5
 80051d8:	f7fb f802 	bl	80001e0 <memchr>
 80051dc:	b108      	cbz	r0, 80051e2 <_printf_i+0x1f2>
 80051de:	1b40      	subs	r0, r0, r5
 80051e0:	6060      	str	r0, [r4, #4]
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	2300      	movs	r3, #0
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	e7a8      	b.n	8005140 <_printf_i+0x150>
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	47d0      	blx	sl
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0ab      	beq.n	8005154 <_printf_i+0x164>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	079b      	lsls	r3, r3, #30
 8005200:	d413      	bmi.n	800522a <_printf_i+0x23a>
 8005202:	68e0      	ldr	r0, [r4, #12]
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	4298      	cmp	r0, r3
 8005208:	bfb8      	it	lt
 800520a:	4618      	movlt	r0, r3
 800520c:	e7a4      	b.n	8005158 <_printf_i+0x168>
 800520e:	2301      	movs	r3, #1
 8005210:	4632      	mov	r2, r6
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	47d0      	blx	sl
 8005218:	3001      	adds	r0, #1
 800521a:	d09b      	beq.n	8005154 <_printf_i+0x164>
 800521c:	3501      	adds	r5, #1
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	9903      	ldr	r1, [sp, #12]
 8005222:	1a5b      	subs	r3, r3, r1
 8005224:	42ab      	cmp	r3, r5
 8005226:	dcf2      	bgt.n	800520e <_printf_i+0x21e>
 8005228:	e7eb      	b.n	8005202 <_printf_i+0x212>
 800522a:	2500      	movs	r5, #0
 800522c:	f104 0619 	add.w	r6, r4, #25
 8005230:	e7f5      	b.n	800521e <_printf_i+0x22e>
 8005232:	bf00      	nop
 8005234:	080058e5 	.word	0x080058e5
 8005238:	080058f6 	.word	0x080058f6

0800523c <_sbrk_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	; (8005258 <_sbrk_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc f9f8 	bl	800163c <_sbrk>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_sbrk_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_sbrk_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	2000036c 	.word	0x2000036c

0800525c <__sread>:
 800525c:	b510      	push	{r4, lr}
 800525e:	460c      	mov	r4, r1
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	f000 fab2 	bl	80057cc <_read_r>
 8005268:	2800      	cmp	r0, #0
 800526a:	bfab      	itete	ge
 800526c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800526e:	89a3      	ldrhlt	r3, [r4, #12]
 8005270:	181b      	addge	r3, r3, r0
 8005272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005276:	bfac      	ite	ge
 8005278:	6563      	strge	r3, [r4, #84]	; 0x54
 800527a:	81a3      	strhlt	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__swrite>:
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	461f      	mov	r7, r3
 8005284:	898b      	ldrh	r3, [r1, #12]
 8005286:	05db      	lsls	r3, r3, #23
 8005288:	4605      	mov	r5, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4616      	mov	r6, r2
 800528e:	d505      	bpl.n	800529c <__swrite+0x1e>
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f000 f9c8 	bl	800562c <_lseek_r>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	4628      	mov	r0, r5
 80052ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	f000 b869 	b.w	8005388 <_write_r>

080052b6 <__sseek>:
 80052b6:	b510      	push	{r4, lr}
 80052b8:	460c      	mov	r4, r1
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 f9b5 	bl	800562c <_lseek_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	bf15      	itete	ne
 80052c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d2:	81a3      	strheq	r3, [r4, #12]
 80052d4:	bf18      	it	ne
 80052d6:	81a3      	strhne	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__sclose>:
 80052da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052de:	f000 b8d3 	b.w	8005488 <_close_r>
	...

080052e4 <__swbuf_r>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	460e      	mov	r6, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	4605      	mov	r5, r0
 80052ec:	b118      	cbz	r0, 80052f6 <__swbuf_r+0x12>
 80052ee:	6983      	ldr	r3, [r0, #24]
 80052f0:	b90b      	cbnz	r3, 80052f6 <__swbuf_r+0x12>
 80052f2:	f7ff fb81 	bl	80049f8 <__sinit>
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <__swbuf_r+0x98>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	d12b      	bne.n	8005354 <__swbuf_r+0x70>
 80052fc:	686c      	ldr	r4, [r5, #4]
 80052fe:	69a3      	ldr	r3, [r4, #24]
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	071a      	lsls	r2, r3, #28
 8005306:	d52f      	bpl.n	8005368 <__swbuf_r+0x84>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	b36b      	cbz	r3, 8005368 <__swbuf_r+0x84>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	1ac0      	subs	r0, r0, r3
 8005312:	6963      	ldr	r3, [r4, #20]
 8005314:	b2f6      	uxtb	r6, r6
 8005316:	4283      	cmp	r3, r0
 8005318:	4637      	mov	r7, r6
 800531a:	dc04      	bgt.n	8005326 <__swbuf_r+0x42>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f948 	bl	80055b4 <_fflush_r>
 8005324:	bb30      	cbnz	r0, 8005374 <__swbuf_r+0x90>
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	3b01      	subs	r3, #1
 800532a:	60a3      	str	r3, [r4, #8]
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	701e      	strb	r6, [r3, #0]
 8005334:	6963      	ldr	r3, [r4, #20]
 8005336:	3001      	adds	r0, #1
 8005338:	4283      	cmp	r3, r0
 800533a:	d004      	beq.n	8005346 <__swbuf_r+0x62>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	07db      	lsls	r3, r3, #31
 8005340:	d506      	bpl.n	8005350 <__swbuf_r+0x6c>
 8005342:	2e0a      	cmp	r6, #10
 8005344:	d104      	bne.n	8005350 <__swbuf_r+0x6c>
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f933 	bl	80055b4 <_fflush_r>
 800534e:	b988      	cbnz	r0, 8005374 <__swbuf_r+0x90>
 8005350:	4638      	mov	r0, r7
 8005352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <__swbuf_r+0x9c>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d101      	bne.n	800535e <__swbuf_r+0x7a>
 800535a:	68ac      	ldr	r4, [r5, #8]
 800535c:	e7cf      	b.n	80052fe <__swbuf_r+0x1a>
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <__swbuf_r+0xa0>)
 8005360:	429c      	cmp	r4, r3
 8005362:	bf08      	it	eq
 8005364:	68ec      	ldreq	r4, [r5, #12]
 8005366:	e7ca      	b.n	80052fe <__swbuf_r+0x1a>
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f81e 	bl	80053ac <__swsetup_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	d0cb      	beq.n	800530c <__swbuf_r+0x28>
 8005374:	f04f 37ff 	mov.w	r7, #4294967295
 8005378:	e7ea      	b.n	8005350 <__swbuf_r+0x6c>
 800537a:	bf00      	nop
 800537c:	08005894 	.word	0x08005894
 8005380:	080058b4 	.word	0x080058b4
 8005384:	08005874 	.word	0x08005874

08005388 <_write_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d07      	ldr	r5, [pc, #28]	; (80053a8 <_write_r+0x20>)
 800538c:	4604      	mov	r4, r0
 800538e:	4608      	mov	r0, r1
 8005390:	4611      	mov	r1, r2
 8005392:	2200      	movs	r2, #0
 8005394:	602a      	str	r2, [r5, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	f7fc f9d6 	bl	8001748 <_write>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_write_r+0x1e>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_write_r+0x1e>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	2000036c 	.word	0x2000036c

080053ac <__swsetup_r>:
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <__swsetup_r+0xcc>)
 80053ae:	b570      	push	{r4, r5, r6, lr}
 80053b0:	681d      	ldr	r5, [r3, #0]
 80053b2:	4606      	mov	r6, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	b125      	cbz	r5, 80053c2 <__swsetup_r+0x16>
 80053b8:	69ab      	ldr	r3, [r5, #24]
 80053ba:	b913      	cbnz	r3, 80053c2 <__swsetup_r+0x16>
 80053bc:	4628      	mov	r0, r5
 80053be:	f7ff fb1b 	bl	80049f8 <__sinit>
 80053c2:	4b2e      	ldr	r3, [pc, #184]	; (800547c <__swsetup_r+0xd0>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d10f      	bne.n	80053e8 <__swsetup_r+0x3c>
 80053c8:	686c      	ldr	r4, [r5, #4]
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d0:	0719      	lsls	r1, r3, #28
 80053d2:	d42c      	bmi.n	800542e <__swsetup_r+0x82>
 80053d4:	06dd      	lsls	r5, r3, #27
 80053d6:	d411      	bmi.n	80053fc <__swsetup_r+0x50>
 80053d8:	2309      	movs	r3, #9
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	e03e      	b.n	8005466 <__swsetup_r+0xba>
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <__swsetup_r+0xd4>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d101      	bne.n	80053f2 <__swsetup_r+0x46>
 80053ee:	68ac      	ldr	r4, [r5, #8]
 80053f0:	e7eb      	b.n	80053ca <__swsetup_r+0x1e>
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <__swsetup_r+0xd8>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	bf08      	it	eq
 80053f8:	68ec      	ldreq	r4, [r5, #12]
 80053fa:	e7e6      	b.n	80053ca <__swsetup_r+0x1e>
 80053fc:	0758      	lsls	r0, r3, #29
 80053fe:	d512      	bpl.n	8005426 <__swsetup_r+0x7a>
 8005400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005402:	b141      	cbz	r1, 8005416 <__swsetup_r+0x6a>
 8005404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <__swsetup_r+0x66>
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f991 	bl	8005734 <_free_r>
 8005412:	2300      	movs	r3, #0
 8005414:	6363      	str	r3, [r4, #52]	; 0x34
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	2300      	movs	r3, #0
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f043 0308 	orr.w	r3, r3, #8
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	b94b      	cbnz	r3, 8005446 <__swsetup_r+0x9a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543c:	d003      	beq.n	8005446 <__swsetup_r+0x9a>
 800543e:	4621      	mov	r1, r4
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f92b 	bl	800569c <__smakebuf_r>
 8005446:	89a0      	ldrh	r0, [r4, #12]
 8005448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544c:	f010 0301 	ands.w	r3, r0, #1
 8005450:	d00a      	beq.n	8005468 <__swsetup_r+0xbc>
 8005452:	2300      	movs	r3, #0
 8005454:	60a3      	str	r3, [r4, #8]
 8005456:	6963      	ldr	r3, [r4, #20]
 8005458:	425b      	negs	r3, r3
 800545a:	61a3      	str	r3, [r4, #24]
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	b943      	cbnz	r3, 8005472 <__swsetup_r+0xc6>
 8005460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005464:	d1ba      	bne.n	80053dc <__swsetup_r+0x30>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	0781      	lsls	r1, r0, #30
 800546a:	bf58      	it	pl
 800546c:	6963      	ldrpl	r3, [r4, #20]
 800546e:	60a3      	str	r3, [r4, #8]
 8005470:	e7f4      	b.n	800545c <__swsetup_r+0xb0>
 8005472:	2000      	movs	r0, #0
 8005474:	e7f7      	b.n	8005466 <__swsetup_r+0xba>
 8005476:	bf00      	nop
 8005478:	20000034 	.word	0x20000034
 800547c:	08005894 	.word	0x08005894
 8005480:	080058b4 	.word	0x080058b4
 8005484:	08005874 	.word	0x08005874

08005488 <_close_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	; (80054a4 <_close_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fc f89d 	bl	80015d2 <_close>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_close_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_close_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	2000036c 	.word	0x2000036c

080054a8 <__sflush_r>:
 80054a8:	898a      	ldrh	r2, [r1, #12]
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	4605      	mov	r5, r0
 80054b0:	0710      	lsls	r0, r2, #28
 80054b2:	460c      	mov	r4, r1
 80054b4:	d458      	bmi.n	8005568 <__sflush_r+0xc0>
 80054b6:	684b      	ldr	r3, [r1, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	dc05      	bgt.n	80054c8 <__sflush_r+0x20>
 80054bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	dc02      	bgt.n	80054c8 <__sflush_r+0x20>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d0f9      	beq.n	80054c2 <__sflush_r+0x1a>
 80054ce:	2300      	movs	r3, #0
 80054d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054d4:	682f      	ldr	r7, [r5, #0]
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	d032      	beq.n	8005540 <__sflush_r+0x98>
 80054da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	075a      	lsls	r2, r3, #29
 80054e0:	d505      	bpl.n	80054ee <__sflush_r+0x46>
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	1ac0      	subs	r0, r0, r3
 80054e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054e8:	b10b      	cbz	r3, 80054ee <__sflush_r+0x46>
 80054ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ec:	1ac0      	subs	r0, r0, r3
 80054ee:	2300      	movs	r3, #0
 80054f0:	4602      	mov	r2, r0
 80054f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f4:	6a21      	ldr	r1, [r4, #32]
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b0      	blx	r6
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	d106      	bne.n	800550e <__sflush_r+0x66>
 8005500:	6829      	ldr	r1, [r5, #0]
 8005502:	291d      	cmp	r1, #29
 8005504:	d82c      	bhi.n	8005560 <__sflush_r+0xb8>
 8005506:	4a2a      	ldr	r2, [pc, #168]	; (80055b0 <__sflush_r+0x108>)
 8005508:	40ca      	lsrs	r2, r1
 800550a:	07d6      	lsls	r6, r2, #31
 800550c:	d528      	bpl.n	8005560 <__sflush_r+0xb8>
 800550e:	2200      	movs	r2, #0
 8005510:	6062      	str	r2, [r4, #4]
 8005512:	04d9      	lsls	r1, r3, #19
 8005514:	6922      	ldr	r2, [r4, #16]
 8005516:	6022      	str	r2, [r4, #0]
 8005518:	d504      	bpl.n	8005524 <__sflush_r+0x7c>
 800551a:	1c42      	adds	r2, r0, #1
 800551c:	d101      	bne.n	8005522 <__sflush_r+0x7a>
 800551e:	682b      	ldr	r3, [r5, #0]
 8005520:	b903      	cbnz	r3, 8005524 <__sflush_r+0x7c>
 8005522:	6560      	str	r0, [r4, #84]	; 0x54
 8005524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005526:	602f      	str	r7, [r5, #0]
 8005528:	2900      	cmp	r1, #0
 800552a:	d0ca      	beq.n	80054c2 <__sflush_r+0x1a>
 800552c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005530:	4299      	cmp	r1, r3
 8005532:	d002      	beq.n	800553a <__sflush_r+0x92>
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f8fd 	bl	8005734 <_free_r>
 800553a:	2000      	movs	r0, #0
 800553c:	6360      	str	r0, [r4, #52]	; 0x34
 800553e:	e7c1      	b.n	80054c4 <__sflush_r+0x1c>
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	2301      	movs	r3, #1
 8005544:	4628      	mov	r0, r5
 8005546:	47b0      	blx	r6
 8005548:	1c41      	adds	r1, r0, #1
 800554a:	d1c7      	bne.n	80054dc <__sflush_r+0x34>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0c4      	beq.n	80054dc <__sflush_r+0x34>
 8005552:	2b1d      	cmp	r3, #29
 8005554:	d001      	beq.n	800555a <__sflush_r+0xb2>
 8005556:	2b16      	cmp	r3, #22
 8005558:	d101      	bne.n	800555e <__sflush_r+0xb6>
 800555a:	602f      	str	r7, [r5, #0]
 800555c:	e7b1      	b.n	80054c2 <__sflush_r+0x1a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	e7ad      	b.n	80054c4 <__sflush_r+0x1c>
 8005568:	690f      	ldr	r7, [r1, #16]
 800556a:	2f00      	cmp	r7, #0
 800556c:	d0a9      	beq.n	80054c2 <__sflush_r+0x1a>
 800556e:	0793      	lsls	r3, r2, #30
 8005570:	680e      	ldr	r6, [r1, #0]
 8005572:	bf08      	it	eq
 8005574:	694b      	ldreq	r3, [r1, #20]
 8005576:	600f      	str	r7, [r1, #0]
 8005578:	bf18      	it	ne
 800557a:	2300      	movne	r3, #0
 800557c:	eba6 0807 	sub.w	r8, r6, r7
 8005580:	608b      	str	r3, [r1, #8]
 8005582:	f1b8 0f00 	cmp.w	r8, #0
 8005586:	dd9c      	ble.n	80054c2 <__sflush_r+0x1a>
 8005588:	6a21      	ldr	r1, [r4, #32]
 800558a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800558c:	4643      	mov	r3, r8
 800558e:	463a      	mov	r2, r7
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	2800      	cmp	r0, #0
 8005596:	dc06      	bgt.n	80055a6 <__sflush_r+0xfe>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	e78e      	b.n	80054c4 <__sflush_r+0x1c>
 80055a6:	4407      	add	r7, r0
 80055a8:	eba8 0800 	sub.w	r8, r8, r0
 80055ac:	e7e9      	b.n	8005582 <__sflush_r+0xda>
 80055ae:	bf00      	nop
 80055b0:	20400001 	.word	0x20400001

080055b4 <_fflush_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	690b      	ldr	r3, [r1, #16]
 80055b8:	4605      	mov	r5, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b913      	cbnz	r3, 80055c4 <_fflush_r+0x10>
 80055be:	2500      	movs	r5, #0
 80055c0:	4628      	mov	r0, r5
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	b118      	cbz	r0, 80055ce <_fflush_r+0x1a>
 80055c6:	6983      	ldr	r3, [r0, #24]
 80055c8:	b90b      	cbnz	r3, 80055ce <_fflush_r+0x1a>
 80055ca:	f7ff fa15 	bl	80049f8 <__sinit>
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <_fflush_r+0x6c>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	d11b      	bne.n	800560c <_fflush_r+0x58>
 80055d4:	686c      	ldr	r4, [r5, #4]
 80055d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ef      	beq.n	80055be <_fflush_r+0xa>
 80055de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e0:	07d0      	lsls	r0, r2, #31
 80055e2:	d404      	bmi.n	80055ee <_fflush_r+0x3a>
 80055e4:	0599      	lsls	r1, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_fflush_r+0x3a>
 80055e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ea:	f7ff faa3 	bl	8004b34 <__retarget_lock_acquire_recursive>
 80055ee:	4628      	mov	r0, r5
 80055f0:	4621      	mov	r1, r4
 80055f2:	f7ff ff59 	bl	80054a8 <__sflush_r>
 80055f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055f8:	07da      	lsls	r2, r3, #31
 80055fa:	4605      	mov	r5, r0
 80055fc:	d4e0      	bmi.n	80055c0 <_fflush_r+0xc>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	059b      	lsls	r3, r3, #22
 8005602:	d4dd      	bmi.n	80055c0 <_fflush_r+0xc>
 8005604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005606:	f7ff fa96 	bl	8004b36 <__retarget_lock_release_recursive>
 800560a:	e7d9      	b.n	80055c0 <_fflush_r+0xc>
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <_fflush_r+0x70>)
 800560e:	429c      	cmp	r4, r3
 8005610:	d101      	bne.n	8005616 <_fflush_r+0x62>
 8005612:	68ac      	ldr	r4, [r5, #8]
 8005614:	e7df      	b.n	80055d6 <_fflush_r+0x22>
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <_fflush_r+0x74>)
 8005618:	429c      	cmp	r4, r3
 800561a:	bf08      	it	eq
 800561c:	68ec      	ldreq	r4, [r5, #12]
 800561e:	e7da      	b.n	80055d6 <_fflush_r+0x22>
 8005620:	08005894 	.word	0x08005894
 8005624:	080058b4 	.word	0x080058b4
 8005628:	08005874 	.word	0x08005874

0800562c <_lseek_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d07      	ldr	r5, [pc, #28]	; (800564c <_lseek_r+0x20>)
 8005630:	4604      	mov	r4, r0
 8005632:	4608      	mov	r0, r1
 8005634:	4611      	mov	r1, r2
 8005636:	2200      	movs	r2, #0
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f7fb fff0 	bl	8001620 <_lseek>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_lseek_r+0x1e>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_lseek_r+0x1e>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	2000036c 	.word	0x2000036c

08005650 <__swhatbuf_r>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	460e      	mov	r6, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	2900      	cmp	r1, #0
 800565a:	b096      	sub	sp, #88	; 0x58
 800565c:	4614      	mov	r4, r2
 800565e:	461d      	mov	r5, r3
 8005660:	da08      	bge.n	8005674 <__swhatbuf_r+0x24>
 8005662:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	061a      	lsls	r2, r3, #24
 800566c:	d410      	bmi.n	8005690 <__swhatbuf_r+0x40>
 800566e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005672:	e00e      	b.n	8005692 <__swhatbuf_r+0x42>
 8005674:	466a      	mov	r2, sp
 8005676:	f000 f8bb 	bl	80057f0 <_fstat_r>
 800567a:	2800      	cmp	r0, #0
 800567c:	dbf1      	blt.n	8005662 <__swhatbuf_r+0x12>
 800567e:	9a01      	ldr	r2, [sp, #4]
 8005680:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005684:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005688:	425a      	negs	r2, r3
 800568a:	415a      	adcs	r2, r3
 800568c:	602a      	str	r2, [r5, #0]
 800568e:	e7ee      	b.n	800566e <__swhatbuf_r+0x1e>
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	2000      	movs	r0, #0
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	b016      	add	sp, #88	; 0x58
 8005698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800569c <__smakebuf_r>:
 800569c:	898b      	ldrh	r3, [r1, #12]
 800569e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056a0:	079d      	lsls	r5, r3, #30
 80056a2:	4606      	mov	r6, r0
 80056a4:	460c      	mov	r4, r1
 80056a6:	d507      	bpl.n	80056b8 <__smakebuf_r+0x1c>
 80056a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	2301      	movs	r3, #1
 80056b2:	6163      	str	r3, [r4, #20]
 80056b4:	b002      	add	sp, #8
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	ab01      	add	r3, sp, #4
 80056ba:	466a      	mov	r2, sp
 80056bc:	f7ff ffc8 	bl	8005650 <__swhatbuf_r>
 80056c0:	9900      	ldr	r1, [sp, #0]
 80056c2:	4605      	mov	r5, r0
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7ff fa57 	bl	8004b78 <_malloc_r>
 80056ca:	b948      	cbnz	r0, 80056e0 <__smakebuf_r+0x44>
 80056cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d0:	059a      	lsls	r2, r3, #22
 80056d2:	d4ef      	bmi.n	80056b4 <__smakebuf_r+0x18>
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	f043 0302 	orr.w	r3, r3, #2
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	e7e3      	b.n	80056a8 <__smakebuf_r+0xc>
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <__smakebuf_r+0x7c>)
 80056e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	6020      	str	r0, [r4, #0]
 80056e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	9b00      	ldr	r3, [sp, #0]
 80056f0:	6163      	str	r3, [r4, #20]
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	6120      	str	r0, [r4, #16]
 80056f6:	b15b      	cbz	r3, 8005710 <__smakebuf_r+0x74>
 80056f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fc:	4630      	mov	r0, r6
 80056fe:	f000 f889 	bl	8005814 <_isatty_r>
 8005702:	b128      	cbz	r0, 8005710 <__smakebuf_r+0x74>
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	89a0      	ldrh	r0, [r4, #12]
 8005712:	4305      	orrs	r5, r0
 8005714:	81a5      	strh	r5, [r4, #12]
 8005716:	e7cd      	b.n	80056b4 <__smakebuf_r+0x18>
 8005718:	08004991 	.word	0x08004991

0800571c <__malloc_lock>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__malloc_lock+0x8>)
 800571e:	f7ff ba09 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 8005722:	bf00      	nop
 8005724:	20000360 	.word	0x20000360

08005728 <__malloc_unlock>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__malloc_unlock+0x8>)
 800572a:	f7ff ba04 	b.w	8004b36 <__retarget_lock_release_recursive>
 800572e:	bf00      	nop
 8005730:	20000360 	.word	0x20000360

08005734 <_free_r>:
 8005734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005736:	2900      	cmp	r1, #0
 8005738:	d044      	beq.n	80057c4 <_free_r+0x90>
 800573a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573e:	9001      	str	r0, [sp, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f1a1 0404 	sub.w	r4, r1, #4
 8005746:	bfb8      	it	lt
 8005748:	18e4      	addlt	r4, r4, r3
 800574a:	f7ff ffe7 	bl	800571c <__malloc_lock>
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <_free_r+0x94>)
 8005750:	9801      	ldr	r0, [sp, #4]
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x30>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005760:	f7ff bfe2 	b.w	8005728 <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x46>
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	1961      	adds	r1, r4, r5
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1949      	addeq	r1, r1, r5
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x22>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x50>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x46>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1855      	adds	r5, r2, r1
 8005788:	42a5      	cmp	r5, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x70>
 800578c:	6824      	ldr	r4, [r4, #0]
 800578e:	4421      	add	r1, r4
 8005790:	1854      	adds	r4, r2, r1
 8005792:	42a3      	cmp	r3, r4
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x26>
 8005798:	681c      	ldr	r4, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	4421      	add	r1, r4
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	e7da      	b.n	800575a <_free_r+0x26>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x78>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x26>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf04      	itt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	bf04      	itt	eq
 80057bc:	1949      	addeq	r1, r1, r5
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	6054      	str	r4, [r2, #4]
 80057c2:	e7ca      	b.n	800575a <_free_r+0x26>
 80057c4:	b003      	add	sp, #12
 80057c6:	bd30      	pop	{r4, r5, pc}
 80057c8:	20000364 	.word	0x20000364

080057cc <_read_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	; (80057ec <_read_r+0x20>)
 80057d0:	4604      	mov	r4, r0
 80057d2:	4608      	mov	r0, r1
 80057d4:	4611      	mov	r1, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f7fb fedc 	bl	8001598 <_read>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_read_r+0x1e>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_read_r+0x1e>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	2000036c 	.word	0x2000036c

080057f0 <_fstat_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	; (8005810 <_fstat_r+0x20>)
 80057f4:	2300      	movs	r3, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	f7fb fef4 	bl	80015ea <_fstat>
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	d102      	bne.n	800580c <_fstat_r+0x1c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	b103      	cbz	r3, 800580c <_fstat_r+0x1c>
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	2000036c 	.word	0x2000036c

08005814 <_isatty_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	; (8005830 <_isatty_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fef3 	bl	800160a <_isatty>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_isatty_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_isatty_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	2000036c 	.word	0x2000036c

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
