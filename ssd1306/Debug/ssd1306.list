
ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013a0  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004480  08004480  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000078  08004500  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004500  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171d  00000000  00000000  00028278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00029998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019215  00000000  00000000  0002a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e23  00000000  00000000  00043aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008616c  00000000  00000000  0004d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000233c  00000000  00000000  000d3a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080030c0 	.word	0x080030c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080030c0 	.word	0x080030c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd3f 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f841 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8cb 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f89b 	bl	80006d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800059a:	f000 f955 	bl	8000848 <ssd1306_Init>
  ssd1306_DrawRectangle(0, 0,127 , 63, 1);
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	233f      	movs	r3, #63	; 0x3f
 80005a4:	227f      	movs	r2, #127	; 0x7f
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fb89 	bl	8000cc0 <ssd1306_DrawRectangle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		//softscrollRight();
  		softscrollLeft();
 80005ae:	f000 fbef 	bl	8000d90 <softscrollLeft>
  		ssd1306_SetCursor(40, 20);
 80005b2:	2114      	movs	r1, #20
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f000 faff 	bl	8000bb8 <ssd1306_SetCursor>
  		char str[20];
  		static int count;
  		sprintf(str,"%03d",count++);
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0x80>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4910      	ldr	r1, [pc, #64]	; (8000604 <main+0x80>)
 80005c2:	600a      	str	r2, [r1, #0]
 80005c4:	1d38      	adds	r0, r7, #4
 80005c6:	461a      	mov	r2, r3
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <main+0x84>)
 80005ca:	f002 f919 	bl	8002800 <siprintf>
  		count %= 1000;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0x80>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <main+0x88>)
 80005d4:	fb83 1302 	smull	r1, r3, r3, r2
 80005d8:	1199      	asrs	r1, r3, #6
 80005da:	17d3      	asrs	r3, r2, #31
 80005dc:	1acb      	subs	r3, r1, r3
 80005de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <main+0x80>)
 80005ea:	6013      	str	r3, [r2, #0]
  		ssd1306_WriteString(str, Font_16x26, 1);
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x8c>)
 80005ee:	1d38      	adds	r0, r7, #4
 80005f0:	2301      	movs	r3, #1
 80005f2:	ca06      	ldmia	r2, {r1, r2}
 80005f4:	f000 faba 	bl	8000b6c <ssd1306_WriteString>
  		ssd1306_UpdateScreen();
 80005f8:	f000 f9b4 	bl	8000964 <ssd1306_UpdateScreen>
  		HAL_Delay(50);
 80005fc:	2032      	movs	r0, #50	; 0x32
 80005fe:	f000 fd77 	bl	80010f0 <HAL_Delay>
  {
 8000602:	e7d4      	b.n	80005ae <main+0x2a>
 8000604:	200000e8 	.word	0x200000e8
 8000608:	080030d8 	.word	0x080030d8
 800060c:	10624dd3 	.word	0x10624dd3
 8000610:	20000000 	.word	0x20000000

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f8e4 	bl	80027f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xb4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <SystemClock_Config+0xb8>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fc37 	bl	8001ef8 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f88e 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fe9a 	bl	80023e8 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ba:	f000 f879 	bl	80007b0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f000 ff97 	bl	8001640 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f84a 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000094 	.word	0x20000094
 8000724:	40005400 	.word	0x40005400
 8000728:	00061a80 	.word	0x00061a80

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0x7c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x80>)
 8000780:	f000 ff44 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8000784:	2301      	movs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x80>)
 800079c:	f000 fdb2 	bl	8001304 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port,OledReset_Pin, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <ssd1306_Reset+0x24>)
 80007c6:	f000 ff21 	bl	800160c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fc90 	bl	80010f0 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port,OledReset_Pin, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <ssd1306_Reset+0x24>)
 80007d6:	f000 ff19 	bl	800160c <HAL_GPIO_WritePin>

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000

080007e4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2301      	movs	r3, #1
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	2200      	movs	r2, #0
 8000800:	2178      	movs	r1, #120	; 0x78
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <ssd1306_WriteCommand+0x2c>)
 8000804:	f001 f860 	bl	80018c8 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000094 	.word	0x20000094

08000814 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b29b      	uxth	r3, r3
 8000822:	f04f 32ff 	mov.w	r2, #4294967295
 8000826:	9202      	str	r2, [sp, #8]
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	2178      	movs	r1, #120	; 0x78
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <ssd1306_WriteData+0x30>)
 8000836:	f001 f847 	bl	80018c8 <HAL_I2C_Mem_Write>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094

08000848 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800084c:	f7ff ffb6 	bl	80007bc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000850:	2064      	movs	r0, #100	; 0x64
 8000852:	f000 fc4d 	bl	80010f0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fa7c 	bl	8000d54 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800085c:	2020      	movs	r0, #32
 800085e:	f7ff ffc1 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ffbe 	bl	80007e4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000868:	20b0      	movs	r0, #176	; 0xb0
 800086a:	f7ff ffbb 	bl	80007e4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800086e:	20c8      	movs	r0, #200	; 0xc8
 8000870:	f7ff ffb8 	bl	80007e4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ffb5 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800087a:	2010      	movs	r0, #16
 800087c:	f7ff ffb2 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000880:	2040      	movs	r0, #64	; 0x40
 8000882:	f7ff ffaf 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	f000 fa51 	bl	8000d2e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800088c:	20a1      	movs	r0, #161	; 0xa1
 800088e:	f7ff ffa9 	bl	80007e4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000892:	20a6      	movs	r0, #166	; 0xa6
 8000894:	f7ff ffa6 	bl	80007e4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000898:	20a8      	movs	r0, #168	; 0xa8
 800089a:	f7ff ffa3 	bl	80007e4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800089e:	203f      	movs	r0, #63	; 0x3f
 80008a0:	f7ff ffa0 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008a4:	20a4      	movs	r0, #164	; 0xa4
 80008a6:	f7ff ff9d 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008aa:	20d3      	movs	r0, #211	; 0xd3
 80008ac:	f7ff ff9a 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff97 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008b6:	20d5      	movs	r0, #213	; 0xd5
 80008b8:	f7ff ff94 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008bc:	20f0      	movs	r0, #240	; 0xf0
 80008be:	f7ff ff91 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008c2:	20d9      	movs	r0, #217	; 0xd9
 80008c4:	f7ff ff8e 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008c8:	2022      	movs	r0, #34	; 0x22
 80008ca:	f7ff ff8b 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008ce:	20da      	movs	r0, #218	; 0xda
 80008d0:	f7ff ff88 	bl	80007e4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008d4:	2012      	movs	r0, #18
 80008d6:	f7ff ff85 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008da:	20db      	movs	r0, #219	; 0xdb
 80008dc:	f7ff ff82 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008e0:	2020      	movs	r0, #32
 80008e2:	f7ff ff7f 	bl	80007e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008e6:	208d      	movs	r0, #141	; 0x8d
 80008e8:	f7ff ff7c 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008ec:	2014      	movs	r0, #20
 80008ee:	f7ff ff79 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fa2e 	bl	8000d54 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f80f 	bl	800091c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008fe:	f000 f831 	bl	8000964 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <ssd1306_Init+0xd0>)
 8000904:	2200      	movs	r2, #0
 8000906:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <ssd1306_Init+0xd0>)
 800090a:	2200      	movs	r2, #0
 800090c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800090e:	4b02      	ldr	r3, [pc, #8]	; (8000918 <ssd1306_Init+0xd0>)
 8000910:	2201      	movs	r2, #1
 8000912:	711a      	strb	r2, [r3, #4]
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200004ec 	.word	0x200004ec

0800091c <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e00d      	b.n	8000948 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <ssd1306_Fill+0x1a>
 8000932:	2100      	movs	r1, #0
 8000934:	e000      	b.n	8000938 <ssd1306_Fill+0x1c>
 8000936:	21ff      	movs	r1, #255	; 0xff
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <ssd1306_Fill+0x44>)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	460a      	mov	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d3ed      	bcc.n	800092c <ssd1306_Fill+0x10>
    }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000ec 	.word	0x200000ec

08000964 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e016      	b.n	800099e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3b50      	subs	r3, #80	; 0x50
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff34 	bl	80007e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 800097c:	2002      	movs	r0, #2
 800097e:	f7ff ff31 	bl	80007e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000982:	2010      	movs	r0, #16
 8000984:	f7ff ff2e 	bl	80007e4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	01db      	lsls	r3, r3, #7
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <ssd1306_UpdateScreen+0x4c>)
 800098e:	4413      	add	r3, r2
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff3e 	bl	8000814 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3301      	adds	r3, #1
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d9e5      	bls.n	8000970 <ssd1306_UpdateScreen+0xc>
    }
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000ec 	.word	0x200000ec

080009b4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	460b      	mov	r3, r1
 80009c0:	71bb      	strb	r3, [r7, #6]
 80009c2:	4613      	mov	r3, r2
 80009c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db3d      	blt.n	8000a4a <ssd1306_DrawPixel+0x96>
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	2b3f      	cmp	r3, #63	; 0x3f
 80009d2:	d83a      	bhi.n	8000a4a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d11a      	bne.n	8000a10 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	b2d8      	uxtb	r0, r3
 80009e2:	4603      	mov	r3, r0
 80009e4:	01db      	lsls	r3, r3, #7
 80009e6:	4413      	add	r3, r2
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <ssd1306_DrawPixel+0xa4>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	2101      	movs	r1, #1
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b259      	sxtb	r1, r3
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	4603      	mov	r3, r0
 8000a04:	01db      	lsls	r3, r3, #7
 8000a06:	4413      	add	r3, r2
 8000a08:	b2c9      	uxtb	r1, r1
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <ssd1306_DrawPixel+0xa4>)
 8000a0c:	54d1      	strb	r1, [r2, r3]
 8000a0e:	e01d      	b.n	8000a4c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	b2d8      	uxtb	r0, r3
 8000a18:	4603      	mov	r3, r0
 8000a1a:	01db      	lsls	r3, r3, #7
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <ssd1306_DrawPixel+0xa4>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	b25a      	sxtb	r2, r3
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	b259      	sxtb	r1, r3
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4413      	add	r3, r2
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <ssd1306_DrawPixel+0xa4>)
 8000a46:	54d1      	strb	r1, [r2, r3]
 8000a48:	e000      	b.n	8000a4c <ssd1306_DrawPixel+0x98>
        return;
 8000a4a:	bf00      	nop
    }
}
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000ec 	.word	0x200000ec

08000a5c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	1d38      	adds	r0, r7, #4
 8000a66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	4613      	mov	r3, r2
 8000a72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b1f      	cmp	r3, #31
 8000a78:	d902      	bls.n	8000a80 <ssd1306_WriteChar+0x24>
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b7e      	cmp	r3, #126	; 0x7e
 8000a7e:	d901      	bls.n	8000a84 <ssd1306_WriteChar+0x28>
        return 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e06d      	b.n	8000b60 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	793b      	ldrb	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2b80      	cmp	r3, #128	; 0x80
 8000a90:	dc06      	bgt.n	8000aa0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000a94:	885b      	ldrh	r3, [r3, #2]
 8000a96:	461a      	mov	r2, r3
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a9c:	2b40      	cmp	r3, #64	; 0x40
 8000a9e:	dd01      	ble.n	8000aa4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e05d      	b.n	8000b60 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e04c      	b.n	8000b44 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	3b20      	subs	r3, #32
 8000ab0:	7979      	ldrb	r1, [r7, #5]
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	440b      	add	r3, r1
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	e034      	b.n	8000b34 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d012      	beq.n	8000b00 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	b2d8      	uxtb	r0, r3
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000aea:	885b      	ldrh	r3, [r3, #2]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	7bba      	ldrb	r2, [r7, #14]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f7ff ff5b 	bl	80009b4 <ssd1306_DrawPixel>
 8000afe:	e016      	b.n	8000b2e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000b10:	885b      	ldrh	r3, [r3, #2]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	b2d9      	uxtb	r1, r3
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f7ff ff43 	bl	80009b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	793b      	ldrb	r3, [r7, #4]
 8000b36:	461a      	mov	r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3c5      	bcc.n	8000aca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	797b      	ldrb	r3, [r7, #5]
 8000b46:	461a      	mov	r2, r3
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d3ad      	bcc.n	8000aaa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000b50:	881a      	ldrh	r2, [r3, #0]
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <ssd1306_WriteChar+0x10c>)
 8000b5c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3724      	adds	r7, #36	; 0x24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	200004ec 	.word	0x200004ec

08000b6c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	1d38      	adds	r0, r7, #4
 8000b76:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b7a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000b7c:	e012      	b.n	8000ba4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	7818      	ldrb	r0, [r3, #0]
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	1d3a      	adds	r2, r7, #4
 8000b86:	ca06      	ldmia	r2, {r1, r2}
 8000b88:	f7ff ff68 	bl	8000a5c <ssd1306_WriteChar>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d002      	beq.n	8000b9e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	e008      	b.n	8000bb0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e8      	bne.n	8000b7e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <ssd1306_SetCursor+0x2c>)
 8000bce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <ssd1306_SetCursor+0x2c>)
 8000bd6:	805a      	strh	r2, [r3, #2]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200004ec 	.word	0x200004ec

08000be8 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	717b      	strb	r3, [r7, #5]
 8000c02:	4613      	mov	r3, r2
 8000c04:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000c06:	797a      	ldrb	r2, [r7, #5]
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bfb8      	it	lt
 8000c10:	425b      	neglt	r3, r3
 8000c12:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000c14:	793a      	ldrb	r2, [r7, #4]
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d201      	bcs.n	8000c2e <ssd1306_Line+0x46>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e001      	b.n	8000c32 <ssd1306_Line+0x4a>
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000c34:	79ba      	ldrb	r2, [r7, #6]
 8000c36:	793b      	ldrb	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d201      	bcs.n	8000c40 <ssd1306_Line+0x58>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e001      	b.n	8000c44 <ssd1306_Line+0x5c>
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8000c4e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c52:	7939      	ldrb	r1, [r7, #4]
 8000c54:	797b      	ldrb	r3, [r7, #5]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff feac 	bl	80009b4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8000c5c:	e024      	b.n	8000ca8 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8000c5e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c62:	79b9      	ldrb	r1, [r7, #6]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fea4 	bl	80009b4 <ssd1306_DrawPixel>
    error2 = error * 2;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	425b      	negs	r3, r3
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dd08      	ble.n	8000c8e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	da08      	bge.n	8000ca8 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	797b      	ldrb	r3, [r7, #5]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d1d6      	bne.n	8000c5e <ssd1306_Line+0x76>
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	793b      	ldrb	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d1d2      	bne.n	8000c5e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8000cb8:	bf00      	nop
}
 8000cba:	3724      	adds	r7, #36	; 0x24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}

08000cc0 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4623      	mov	r3, r4
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71bb      	strb	r3, [r7, #6]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	717b      	strb	r3, [r7, #5]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8000cde:	79bc      	ldrb	r4, [r7, #6]
 8000ce0:	797a      	ldrb	r2, [r7, #5]
 8000ce2:	79b9      	ldrb	r1, [r7, #6]
 8000ce4:	79f8      	ldrb	r0, [r7, #7]
 8000ce6:	7e3b      	ldrb	r3, [r7, #24]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4623      	mov	r3, r4
 8000cec:	f7ff ff7c 	bl	8000be8 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8000cf0:	793c      	ldrb	r4, [r7, #4]
 8000cf2:	797a      	ldrb	r2, [r7, #5]
 8000cf4:	79b9      	ldrb	r1, [r7, #6]
 8000cf6:	7978      	ldrb	r0, [r7, #5]
 8000cf8:	7e3b      	ldrb	r3, [r7, #24]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	f7ff ff73 	bl	8000be8 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8000d02:	793c      	ldrb	r4, [r7, #4]
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	7939      	ldrb	r1, [r7, #4]
 8000d08:	7978      	ldrb	r0, [r7, #5]
 8000d0a:	7e3b      	ldrb	r3, [r7, #24]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4623      	mov	r3, r4
 8000d10:	f7ff ff6a 	bl	8000be8 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8000d14:	79bc      	ldrb	r4, [r7, #6]
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	7939      	ldrb	r1, [r7, #4]
 8000d1a:	79f8      	ldrb	r0, [r7, #7]
 8000d1c:	7e3b      	ldrb	r3, [r7, #24]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4623      	mov	r3, r4
 8000d22:	f7ff ff61 	bl	8000be8 <ssd1306_Line>

  return;
 8000d26:	bf00      	nop
}
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}

08000d2e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000d38:	2381      	movs	r3, #129	; 0x81
 8000d3a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fd50 	bl	80007e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd4c 	bl	80007e4 <ssd1306_WriteCommand>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000d64:	23af      	movs	r3, #175	; 0xaf
 8000d66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <ssd1306_SetDisplayOn+0x38>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	715a      	strb	r2, [r3, #5]
 8000d6e:	e004      	b.n	8000d7a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000d70:	23ae      	movs	r3, #174	; 0xae
 8000d72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <ssd1306_SetDisplayOn+0x38>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd31 	bl	80007e4 <ssd1306_WriteCommand>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200004ec 	.word	0x200004ec

08000d90 <softscrollLeft>:
uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void softscrollLeft()
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
	for(int pg =0;pg<8;pg++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e01e      	b.n	8000dda <softscrollLeft+0x4a>
		{
			for(int x=0;x<127;x++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	e00f      	b.n	8000dc2 <softscrollLeft+0x32>

		    {
			SSD1306_Buffer[x+(pg*128)] =SSD1306_Buffer[x+1+(pg*128)];
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	01db      	lsls	r3, r3, #7
 8000daa:	441a      	add	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	01d9      	lsls	r1, r3, #7
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	440b      	add	r3, r1
 8000db4:	490e      	ldr	r1, [pc, #56]	; (8000df0 <softscrollLeft+0x60>)
 8000db6:	5c89      	ldrb	r1, [r1, r2]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <softscrollLeft+0x60>)
 8000dba:	54d1      	strb	r1, [r2, r3]
			for(int x=0;x<127;x++)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2b7e      	cmp	r3, #126	; 0x7e
 8000dc6:	ddec      	ble.n	8000da2 <softscrollLeft+0x12>
		    }
			SSD1306_Buffer[127+(pg*128)]=0;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	01db      	lsls	r3, r3, #7
 8000dcc:	337f      	adds	r3, #127	; 0x7f
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <softscrollLeft+0x60>)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	54d1      	strb	r1, [r2, r3]
	for(int pg =0;pg<8;pg++)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	dddd      	ble.n	8000d9c <softscrollLeft+0xc>
		}
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200000ec 	.word	0x200000ec

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_I2C_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e92:	2304      	movs	r3, #4
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <HAL_I2C_MspInit+0x8c>)
 8000e9e:	f000 fa31 	bl	8001304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_I2C_MspInit+0x88>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8c6 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f001 fc12 	bl	8002780 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20020000 	.word	0x20020000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	200004f4 	.word	0x200004f4
 8000f90:	20000510 	.word	0x20000510

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f001 fbd1 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff facb 	bl	8000584 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ffc:	08004488 	.word	0x08004488
  ldr r2, =_sbss
 8001000:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001004:	2000050c 	.word	0x2000050c

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f931 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fed8 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f93b 	bl	80012ea <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f911 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000010 	.word	0x20000010
 80010ac:	2000000c 	.word	0x2000000c

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000010 	.word	0x20000010
 80010d4:	200004f8 	.word	0x200004f8

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200004f8 	.word	0x200004f8

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000010 	.word	0x20000010

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff8e 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff47 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff5c 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff8e 	bl	80011f0 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5d 	bl	800119c <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffb0 	bl	8001258 <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	e159      	b.n	80015d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8148 	bne.w	80015ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	2b02      	cmp	r3, #2
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d017      	beq.n	80013f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d123      	bne.n	8001448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a2 	beq.w	80015ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a56      	ldr	r2, [pc, #344]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_GPIO_Init+0x2e8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a6:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_GPIO_Init+0x2ec>)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x2f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x202>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_GPIO_Init+0x2f4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x1fe>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_GPIO_Init+0x2f8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x1fa>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x1f6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a45      	ldr	r2, [pc, #276]	; (8001604 <HAL_GPIO_Init+0x300>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x1f2>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e008      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e004      	b.n	8001508 <HAL_GPIO_Init+0x204>
 80014fe:	2302      	movs	r3, #2
 8001500:	e002      	b.n	8001508 <HAL_GPIO_Init+0x204>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_GPIO_Init+0x204>
 8001506:	2300      	movs	r3, #0
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	f002 0203 	and.w	r2, r2, #3
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	4093      	lsls	r3, r2
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001518:	4935      	ldr	r1, [pc, #212]	; (80015f0 <HAL_GPIO_Init+0x2ec>)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x304>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x304>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x304>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c8:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x304>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	f67f aea2 	bls.w	8001320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013800 	.word	0x40013800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40021000 	.word	0x40021000
 8001608:	40013c00 	.word	0x40013c00

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e12b      	b.n	80018aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fbec 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2224      	movs	r2, #36	; 0x24
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a4:	f001 f858 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a81      	ldr	r2, [pc, #516]	; (80018b4 <HAL_I2C_Init+0x274>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d807      	bhi.n	80016c4 <HAL_I2C_Init+0x84>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a80      	ldr	r2, [pc, #512]	; (80018b8 <HAL_I2C_Init+0x278>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bf94      	ite	ls
 80016bc:	2301      	movls	r3, #1
 80016be:	2300      	movhi	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e006      	b.n	80016d2 <HAL_I2C_Init+0x92>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a7d      	ldr	r2, [pc, #500]	; (80018bc <HAL_I2C_Init+0x27c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0e7      	b.n	80018aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a78      	ldr	r2, [pc, #480]	; (80018c0 <HAL_I2C_Init+0x280>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_I2C_Init+0x274>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d802      	bhi.n	8001714 <HAL_I2C_Init+0xd4>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3301      	adds	r3, #1
 8001712:	e009      	b.n	8001728 <HAL_I2C_Init+0xe8>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <HAL_I2C_Init+0x284>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	3301      	adds	r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800173a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	495c      	ldr	r1, [pc, #368]	; (80018b4 <HAL_I2C_Init+0x274>)
 8001744:	428b      	cmp	r3, r1
 8001746:	d819      	bhi.n	800177c <HAL_I2C_Init+0x13c>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e59      	subs	r1, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fbb1 f3f3 	udiv	r3, r1, r3
 8001756:	1c59      	adds	r1, r3, #1
 8001758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800175c:	400b      	ands	r3, r1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00a      	beq.n	8001778 <HAL_I2C_Init+0x138>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1e59      	subs	r1, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001770:	3301      	adds	r3, #1
 8001772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001776:	e051      	b.n	800181c <HAL_I2C_Init+0x1dc>
 8001778:	2304      	movs	r3, #4
 800177a:	e04f      	b.n	800181c <HAL_I2C_Init+0x1dc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d111      	bne.n	80017a8 <HAL_I2C_Init+0x168>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e58      	subs	r0, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	440b      	add	r3, r1
 8001792:	fbb0 f3f3 	udiv	r3, r0, r3
 8001796:	3301      	adds	r3, #1
 8001798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e012      	b.n	80017ce <HAL_I2C_Init+0x18e>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	0099      	lsls	r1, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Init+0x196>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e022      	b.n	800181c <HAL_I2C_Init+0x1dc>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10e      	bne.n	80017fc <HAL_I2C_Init+0x1bc>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1e58      	subs	r0, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	440b      	add	r3, r1
 80017ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fa:	e00f      	b.n	800181c <HAL_I2C_Init+0x1dc>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e58      	subs	r0, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	0099      	lsls	r1, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	4313      	orrs	r3, r2
 8001822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69da      	ldr	r2, [r3, #28]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800184a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6911      	ldr	r1, [r2, #16]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68d2      	ldr	r2, [r2, #12]
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	430b      	orrs	r3, r1
 800185e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	000186a0 	.word	0x000186a0
 80018b8:	001e847f 	.word	0x001e847f
 80018bc:	003d08ff 	.word	0x003d08ff
 80018c0:	431bde83 	.word	0x431bde83
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	817b      	strh	r3, [r7, #10]
 80018da:	460b      	mov	r3, r1
 80018dc:	813b      	strh	r3, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e2:	f7ff fbf9 	bl	80010d8 <HAL_GetTick>
 80018e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	f040 80d9 	bne.w	8001aa8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2319      	movs	r3, #25
 80018fc:	2201      	movs	r2, #1
 80018fe:	496d      	ldr	r1, [pc, #436]	; (8001ab4 <HAL_I2C_Mem_Write+0x1ec>)
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f971 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
 800190e:	e0cc      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_I2C_Mem_Write+0x56>
 800191a:	2302      	movs	r3, #2
 800191c:	e0c5      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d007      	beq.n	8001944 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2221      	movs	r2, #33	; 0x21
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_I2C_Mem_Write+0x1f0>)
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001986:	88f8      	ldrh	r0, [r7, #6]
 8001988:	893a      	ldrh	r2, [r7, #8]
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4603      	mov	r3, r0
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f890 	bl	8001abc <I2C_RequestMemoryWrite>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d052      	beq.n	8001a48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e081      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9f2 	bl	8001d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d107      	bne.n	80019ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_I2C_Mem_Write+0x180>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1aa      	bne.n	80019a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f9de 	bl	8001e16 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d107      	bne.n	8001a78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e016      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	817b      	strh	r3, [r7, #10]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	813b      	strh	r3, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f878 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0c:	d103      	bne.n	8001b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e05f      	b.n	8001bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1a:	897b      	ldrh	r3, [r7, #10]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	492d      	ldr	r1, [pc, #180]	; (8001be4 <I2C_RequestMemoryWrite+0x128>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f8b0 	bl	8001c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e04c      	b.n	8001bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f91a 	bl	8001d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d107      	bne.n	8001b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e02b      	b.n	8001bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	e021      	b.n	8001bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b94:	893b      	ldrh	r3, [r7, #8]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8f4 	bl	8001d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e005      	b.n	8001bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bce:	893b      	ldrh	r3, [r7, #8]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	00010002 	.word	0x00010002

08001be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	e025      	b.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d021      	beq.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff fa69 	bl	80010d8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d116      	bne.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e023      	b.n	8001c8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10d      	bne.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	e00c      	b.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4013      	ands	r3, r2
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d0b6      	beq.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ca4:	e051      	b.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb4:	d123      	bne.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e046      	b.n	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d021      	beq.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d06:	f7ff f9e7 	bl	80010d8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d302      	bcc.n	8001d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d116      	bne.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e020      	b.n	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	e00b      	b.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	43da      	mvns	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d18d      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da0:	e02d      	b.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f878 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e02d      	b.n	8001e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d021      	beq.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dba:	f7ff f98d 	bl	80010d8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d302      	bcc.n	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d116      	bne.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0220 	orr.w	r2, r3, #32
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e007      	b.n	8001e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d1ca      	bne.n	8001da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e22:	e02d      	b.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f837 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e02d      	b.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d021      	beq.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3c:	f7ff f94c 	bl	80010d8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d302      	bcc.n	8001e52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d1ca      	bne.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d11b      	bne.n	8001ee8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e267      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d075      	beq.n	8002002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d112      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2e:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d05b      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d157      	bne.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e242      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x74>
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6c      	ldr	r2, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f90:	4b69      	ldr	r3, [pc, #420]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a68      	ldr	r2, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b66      	ldr	r3, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a65      	ldr	r2, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f892 	bl	80010d8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f88e 	bl	80010d8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e207      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f87e 	bl	80010d8 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f87a 	bl	80010d8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1f3      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xe8>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002026:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1c7      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_OscConfig+0x244>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff f833 	bl	80010d8 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff f82f 	bl	80010d8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1a8      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4925      	ldr	r1, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x244>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f812 	bl	80010d8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff f80e 	bl	80010d8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e187      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d036      	beq.n	8002150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x248>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fff2 	bl	80010d8 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ffee 	bl	80010d8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e167      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x240>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x200>
 8002116:	e01b      	b.n	8002150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x248>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe ffdb 	bl	80010d8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	e00e      	b.n	8002144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ffd7 	bl	80010d8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d907      	bls.n	8002144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e150      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
 8002138:	40023800 	.word	0x40023800
 800213c:	42470000 	.word	0x42470000
 8002140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ea      	bne.n	8002126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8097 	beq.w	800228c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b7d      	ldr	r3, [pc, #500]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a7c      	ldr	r2, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b77      	ldr	r3, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x474>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <HAL_RCC_OscConfig+0x474>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a73      	ldr	r2, [pc, #460]	; (800236c <HAL_RCC_OscConfig+0x474>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7fe ff97 	bl	80010d8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7fe ff93 	bl	80010d8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e10c      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x474>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2ea>
 80021d4:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a63      	ldr	r2, [pc, #396]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x324>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x30c>
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a5e      	ldr	r2, [pc, #376]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a5b      	ldr	r2, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0x324>
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a54      	ldr	r2, [pc, #336]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002216:	f023 0304 	bic.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe ff58 	bl	80010d8 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7fe ff54 	bl	80010d8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0cb      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ee      	beq.n	800222c <HAL_RCC_OscConfig+0x334>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002250:	f7fe ff42 	bl	80010d8 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7fe ff3e 	bl	80010d8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0b5      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ee      	bne.n	8002258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4a38      	ldr	r2, [pc, #224]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a1 	beq.w	80023d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d05c      	beq.n	800235c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d141      	bne.n	800232e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_OscConfig+0x478>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff12 	bl	80010d8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe ff0e 	bl	80010d8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e087      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	3b01      	subs	r3, #1
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	491b      	ldr	r1, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x478>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fee7 	bl	80010d8 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe fee3 	bl	80010d8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e05c      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x416>
 800232c:	e054      	b.n	80023d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCC_OscConfig+0x478>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fed0 	bl	80010d8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fecc 	bl	80010d8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e045      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x470>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x444>
 800235a:	e03d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e038      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000
 8002370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x4ec>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d028      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d121      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d11a      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d111      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	085b      	lsrs	r3, r3, #1
 80023bc:	3b01      	subs	r3, #1
 80023be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0cc      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d90c      	bls.n	8002424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b8      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	494d      	ldr	r1, [pc, #308]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d044      	beq.n	8002508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d119      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e067      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4934      	ldr	r1, [pc, #208]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fdfe 	bl	80010d8 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fdfa 	bl	80010d8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e04f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d20c      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4916      	ldr	r1, [pc, #88]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490e      	ldr	r1, [pc, #56]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256e:	f000 f821 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490a      	ldr	r1, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd5e 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00
 80025a4:	40023800 	.word	0x40023800
 80025a8:	0800442c 	.word	0x0800442c
 80025ac:	20000008 	.word	0x20000008
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b8:	b090      	sub	sp, #64	; 0x40
 80025ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c4:	2300      	movs	r3, #0
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x40>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	f200 80a1 	bhi.w	8002720 <HAL_RCC_GetSysClockFreq+0x16c>
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x3a>
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025ec:	e09b      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ee:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025f2:	e098      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fe:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d028      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	2200      	movs	r2, #0
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	627a      	str	r2, [r7, #36]	; 0x24
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800261c:	2100      	movs	r1, #0
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 8002620:	fb03 f201 	mul.w	r2, r3, r1
 8002624:	2300      	movs	r3, #0
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	4413      	add	r3, r2
 800262c:	4a43      	ldr	r2, [pc, #268]	; (800273c <HAL_RCC_GetSysClockFreq+0x188>)
 800262e:	fba0 1202 	umull	r1, r2, r0, r2
 8002632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002634:	460a      	mov	r2, r1
 8002636:	62ba      	str	r2, [r7, #40]	; 0x28
 8002638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263a:	4413      	add	r3, r2
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	2200      	movs	r2, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	61fa      	str	r2, [r7, #28]
 8002646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800264e:	f7fd fe17 	bl	8000280 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4613      	mov	r3, r2
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265a:	e053      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	617a      	str	r2, [r7, #20]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800266e:	f04f 0b00 	mov.w	fp, #0
 8002672:	4652      	mov	r2, sl
 8002674:	465b      	mov	r3, fp
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	0159      	lsls	r1, r3, #5
 8002680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002684:	0150      	lsls	r0, r2, #5
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	ebb2 080a 	subs.w	r8, r2, sl
 800268e:	eb63 090b 	sbc.w	r9, r3, fp
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800269e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026a6:	ebb2 0408 	subs.w	r4, r2, r8
 80026aa:	eb63 0509 	sbc.w	r5, r3, r9
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	00eb      	lsls	r3, r5, #3
 80026b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026bc:	00e2      	lsls	r2, r4, #3
 80026be:	4614      	mov	r4, r2
 80026c0:	461d      	mov	r5, r3
 80026c2:	eb14 030a 	adds.w	r3, r4, sl
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	eb45 030b 	adc.w	r3, r5, fp
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026da:	4629      	mov	r1, r5
 80026dc:	028b      	lsls	r3, r1, #10
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e4:	4621      	mov	r1, r4
 80026e6:	028a      	lsls	r2, r1, #10
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	2200      	movs	r2, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f8:	f7fd fdc2 	bl	8000280 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_GetSysClockFreq+0x180>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetSysClockFreq+0x184>)
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002728:	4618      	mov	r0, r3
 800272a:	3740      	adds	r7, #64	; 0x40
 800272c:	46bd      	mov	sp, r7
 800272e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	00f42400 	.word	0x00f42400
 800273c:	017d7840 	.word	0x017d7840

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000008 	.word	0x20000008

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	0800443c 	.word	0x0800443c

08002780 <__errno>:
 8002780:	4b01      	ldr	r3, [pc, #4]	; (8002788 <__errno+0x8>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000014 	.word	0x20000014

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4d0d      	ldr	r5, [pc, #52]	; (80027c4 <__libc_init_array+0x38>)
 8002790:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <__libc_init_array+0x3c>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	2600      	movs	r6, #0
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	4d0b      	ldr	r5, [pc, #44]	; (80027cc <__libc_init_array+0x40>)
 800279e:	4c0c      	ldr	r4, [pc, #48]	; (80027d0 <__libc_init_array+0x44>)
 80027a0:	f000 fc8e 	bl	80030c0 <_init>
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	2600      	movs	r6, #0
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	08004480 	.word	0x08004480
 80027c8:	08004480 	.word	0x08004480
 80027cc:	08004480 	.word	0x08004480
 80027d0:	08004484 	.word	0x08004484

080027d4 <memcpy>:
 80027d4:	440a      	add	r2, r1
 80027d6:	4291      	cmp	r1, r2
 80027d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80027dc:	d100      	bne.n	80027e0 <memcpy+0xc>
 80027de:	4770      	bx	lr
 80027e0:	b510      	push	{r4, lr}
 80027e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027ea:	4291      	cmp	r1, r2
 80027ec:	d1f9      	bne.n	80027e2 <memcpy+0xe>
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <memset>:
 80027f0:	4402      	add	r2, r0
 80027f2:	4603      	mov	r3, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <siprintf>:
 8002800:	b40e      	push	{r1, r2, r3}
 8002802:	b500      	push	{lr}
 8002804:	b09c      	sub	sp, #112	; 0x70
 8002806:	ab1d      	add	r3, sp, #116	; 0x74
 8002808:	9002      	str	r0, [sp, #8]
 800280a:	9006      	str	r0, [sp, #24]
 800280c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <siprintf+0x38>)
 8002812:	9107      	str	r1, [sp, #28]
 8002814:	9104      	str	r1, [sp, #16]
 8002816:	4909      	ldr	r1, [pc, #36]	; (800283c <siprintf+0x3c>)
 8002818:	f853 2b04 	ldr.w	r2, [r3], #4
 800281c:	9105      	str	r1, [sp, #20]
 800281e:	6800      	ldr	r0, [r0, #0]
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	a902      	add	r1, sp, #8
 8002824:	f000 f868 	bl	80028f8 <_svfiprintf_r>
 8002828:	9b02      	ldr	r3, [sp, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	b01c      	add	sp, #112	; 0x70
 8002830:	f85d eb04 	ldr.w	lr, [sp], #4
 8002834:	b003      	add	sp, #12
 8002836:	4770      	bx	lr
 8002838:	20000014 	.word	0x20000014
 800283c:	ffff0208 	.word	0xffff0208

08002840 <__ssputs_r>:
 8002840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	688e      	ldr	r6, [r1, #8]
 8002846:	429e      	cmp	r6, r3
 8002848:	4682      	mov	sl, r0
 800284a:	460c      	mov	r4, r1
 800284c:	4690      	mov	r8, r2
 800284e:	461f      	mov	r7, r3
 8002850:	d838      	bhi.n	80028c4 <__ssputs_r+0x84>
 8002852:	898a      	ldrh	r2, [r1, #12]
 8002854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002858:	d032      	beq.n	80028c0 <__ssputs_r+0x80>
 800285a:	6825      	ldr	r5, [r4, #0]
 800285c:	6909      	ldr	r1, [r1, #16]
 800285e:	eba5 0901 	sub.w	r9, r5, r1
 8002862:	6965      	ldr	r5, [r4, #20]
 8002864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800286c:	3301      	adds	r3, #1
 800286e:	444b      	add	r3, r9
 8002870:	106d      	asrs	r5, r5, #1
 8002872:	429d      	cmp	r5, r3
 8002874:	bf38      	it	cc
 8002876:	461d      	movcc	r5, r3
 8002878:	0553      	lsls	r3, r2, #21
 800287a:	d531      	bpl.n	80028e0 <__ssputs_r+0xa0>
 800287c:	4629      	mov	r1, r5
 800287e:	f000 fb55 	bl	8002f2c <_malloc_r>
 8002882:	4606      	mov	r6, r0
 8002884:	b950      	cbnz	r0, 800289c <__ssputs_r+0x5c>
 8002886:	230c      	movs	r3, #12
 8002888:	f8ca 3000 	str.w	r3, [sl]
 800288c:	89a3      	ldrh	r3, [r4, #12]
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002892:	81a3      	strh	r3, [r4, #12]
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289c:	6921      	ldr	r1, [r4, #16]
 800289e:	464a      	mov	r2, r9
 80028a0:	f7ff ff98 	bl	80027d4 <memcpy>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ae:	81a3      	strh	r3, [r4, #12]
 80028b0:	6126      	str	r6, [r4, #16]
 80028b2:	6165      	str	r5, [r4, #20]
 80028b4:	444e      	add	r6, r9
 80028b6:	eba5 0509 	sub.w	r5, r5, r9
 80028ba:	6026      	str	r6, [r4, #0]
 80028bc:	60a5      	str	r5, [r4, #8]
 80028be:	463e      	mov	r6, r7
 80028c0:	42be      	cmp	r6, r7
 80028c2:	d900      	bls.n	80028c6 <__ssputs_r+0x86>
 80028c4:	463e      	mov	r6, r7
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	4632      	mov	r2, r6
 80028ca:	4641      	mov	r1, r8
 80028cc:	f000 faa8 	bl	8002e20 <memmove>
 80028d0:	68a3      	ldr	r3, [r4, #8]
 80028d2:	1b9b      	subs	r3, r3, r6
 80028d4:	60a3      	str	r3, [r4, #8]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	4433      	add	r3, r6
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	2000      	movs	r0, #0
 80028de:	e7db      	b.n	8002898 <__ssputs_r+0x58>
 80028e0:	462a      	mov	r2, r5
 80028e2:	f000 fb97 	bl	8003014 <_realloc_r>
 80028e6:	4606      	mov	r6, r0
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d1e1      	bne.n	80028b0 <__ssputs_r+0x70>
 80028ec:	6921      	ldr	r1, [r4, #16]
 80028ee:	4650      	mov	r0, sl
 80028f0:	f000 fab0 	bl	8002e54 <_free_r>
 80028f4:	e7c7      	b.n	8002886 <__ssputs_r+0x46>
	...

080028f8 <_svfiprintf_r>:
 80028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fc:	4698      	mov	r8, r3
 80028fe:	898b      	ldrh	r3, [r1, #12]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	b09d      	sub	sp, #116	; 0x74
 8002904:	4607      	mov	r7, r0
 8002906:	460d      	mov	r5, r1
 8002908:	4614      	mov	r4, r2
 800290a:	d50e      	bpl.n	800292a <_svfiprintf_r+0x32>
 800290c:	690b      	ldr	r3, [r1, #16]
 800290e:	b963      	cbnz	r3, 800292a <_svfiprintf_r+0x32>
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	f000 fb0b 	bl	8002f2c <_malloc_r>
 8002916:	6028      	str	r0, [r5, #0]
 8002918:	6128      	str	r0, [r5, #16]
 800291a:	b920      	cbnz	r0, 8002926 <_svfiprintf_r+0x2e>
 800291c:	230c      	movs	r3, #12
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	e0d1      	b.n	8002aca <_svfiprintf_r+0x1d2>
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	616b      	str	r3, [r5, #20]
 800292a:	2300      	movs	r3, #0
 800292c:	9309      	str	r3, [sp, #36]	; 0x24
 800292e:	2320      	movs	r3, #32
 8002930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002934:	f8cd 800c 	str.w	r8, [sp, #12]
 8002938:	2330      	movs	r3, #48	; 0x30
 800293a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ae4 <_svfiprintf_r+0x1ec>
 800293e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002942:	f04f 0901 	mov.w	r9, #1
 8002946:	4623      	mov	r3, r4
 8002948:	469a      	mov	sl, r3
 800294a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800294e:	b10a      	cbz	r2, 8002954 <_svfiprintf_r+0x5c>
 8002950:	2a25      	cmp	r2, #37	; 0x25
 8002952:	d1f9      	bne.n	8002948 <_svfiprintf_r+0x50>
 8002954:	ebba 0b04 	subs.w	fp, sl, r4
 8002958:	d00b      	beq.n	8002972 <_svfiprintf_r+0x7a>
 800295a:	465b      	mov	r3, fp
 800295c:	4622      	mov	r2, r4
 800295e:	4629      	mov	r1, r5
 8002960:	4638      	mov	r0, r7
 8002962:	f7ff ff6d 	bl	8002840 <__ssputs_r>
 8002966:	3001      	adds	r0, #1
 8002968:	f000 80aa 	beq.w	8002ac0 <_svfiprintf_r+0x1c8>
 800296c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800296e:	445a      	add	r2, fp
 8002970:	9209      	str	r2, [sp, #36]	; 0x24
 8002972:	f89a 3000 	ldrb.w	r3, [sl]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80a2 	beq.w	8002ac0 <_svfiprintf_r+0x1c8>
 800297c:	2300      	movs	r3, #0
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002986:	f10a 0a01 	add.w	sl, sl, #1
 800298a:	9304      	str	r3, [sp, #16]
 800298c:	9307      	str	r3, [sp, #28]
 800298e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002992:	931a      	str	r3, [sp, #104]	; 0x68
 8002994:	4654      	mov	r4, sl
 8002996:	2205      	movs	r2, #5
 8002998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800299c:	4851      	ldr	r0, [pc, #324]	; (8002ae4 <_svfiprintf_r+0x1ec>)
 800299e:	f7fd fc1f 	bl	80001e0 <memchr>
 80029a2:	9a04      	ldr	r2, [sp, #16]
 80029a4:	b9d8      	cbnz	r0, 80029de <_svfiprintf_r+0xe6>
 80029a6:	06d0      	lsls	r0, r2, #27
 80029a8:	bf44      	itt	mi
 80029aa:	2320      	movmi	r3, #32
 80029ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029b0:	0711      	lsls	r1, r2, #28
 80029b2:	bf44      	itt	mi
 80029b4:	232b      	movmi	r3, #43	; 0x2b
 80029b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ba:	f89a 3000 	ldrb.w	r3, [sl]
 80029be:	2b2a      	cmp	r3, #42	; 0x2a
 80029c0:	d015      	beq.n	80029ee <_svfiprintf_r+0xf6>
 80029c2:	9a07      	ldr	r2, [sp, #28]
 80029c4:	4654      	mov	r4, sl
 80029c6:	2000      	movs	r0, #0
 80029c8:	f04f 0c0a 	mov.w	ip, #10
 80029cc:	4621      	mov	r1, r4
 80029ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029d2:	3b30      	subs	r3, #48	; 0x30
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d94e      	bls.n	8002a76 <_svfiprintf_r+0x17e>
 80029d8:	b1b0      	cbz	r0, 8002a08 <_svfiprintf_r+0x110>
 80029da:	9207      	str	r2, [sp, #28]
 80029dc:	e014      	b.n	8002a08 <_svfiprintf_r+0x110>
 80029de:	eba0 0308 	sub.w	r3, r0, r8
 80029e2:	fa09 f303 	lsl.w	r3, r9, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	9304      	str	r3, [sp, #16]
 80029ea:	46a2      	mov	sl, r4
 80029ec:	e7d2      	b.n	8002994 <_svfiprintf_r+0x9c>
 80029ee:	9b03      	ldr	r3, [sp, #12]
 80029f0:	1d19      	adds	r1, r3, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	9103      	str	r1, [sp, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bfbb      	ittet	lt
 80029fa:	425b      	neglt	r3, r3
 80029fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002a00:	9307      	strge	r3, [sp, #28]
 8002a02:	9307      	strlt	r3, [sp, #28]
 8002a04:	bfb8      	it	lt
 8002a06:	9204      	strlt	r2, [sp, #16]
 8002a08:	7823      	ldrb	r3, [r4, #0]
 8002a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0c:	d10c      	bne.n	8002a28 <_svfiprintf_r+0x130>
 8002a0e:	7863      	ldrb	r3, [r4, #1]
 8002a10:	2b2a      	cmp	r3, #42	; 0x2a
 8002a12:	d135      	bne.n	8002a80 <_svfiprintf_r+0x188>
 8002a14:	9b03      	ldr	r3, [sp, #12]
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	9203      	str	r2, [sp, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bfb8      	it	lt
 8002a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a24:	3402      	adds	r4, #2
 8002a26:	9305      	str	r3, [sp, #20]
 8002a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002af4 <_svfiprintf_r+0x1fc>
 8002a2c:	7821      	ldrb	r1, [r4, #0]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	4650      	mov	r0, sl
 8002a32:	f7fd fbd5 	bl	80001e0 <memchr>
 8002a36:	b140      	cbz	r0, 8002a4a <_svfiprintf_r+0x152>
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	eba0 000a 	sub.w	r0, r0, sl
 8002a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002a42:	9b04      	ldr	r3, [sp, #16]
 8002a44:	4303      	orrs	r3, r0
 8002a46:	3401      	adds	r4, #1
 8002a48:	9304      	str	r3, [sp, #16]
 8002a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a4e:	4826      	ldr	r0, [pc, #152]	; (8002ae8 <_svfiprintf_r+0x1f0>)
 8002a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a54:	2206      	movs	r2, #6
 8002a56:	f7fd fbc3 	bl	80001e0 <memchr>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d038      	beq.n	8002ad0 <_svfiprintf_r+0x1d8>
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <_svfiprintf_r+0x1f4>)
 8002a60:	bb1b      	cbnz	r3, 8002aaa <_svfiprintf_r+0x1b2>
 8002a62:	9b03      	ldr	r3, [sp, #12]
 8002a64:	3307      	adds	r3, #7
 8002a66:	f023 0307 	bic.w	r3, r3, #7
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	9303      	str	r3, [sp, #12]
 8002a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a70:	4433      	add	r3, r6
 8002a72:	9309      	str	r3, [sp, #36]	; 0x24
 8002a74:	e767      	b.n	8002946 <_svfiprintf_r+0x4e>
 8002a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e7a5      	b.n	80029cc <_svfiprintf_r+0xd4>
 8002a80:	2300      	movs	r3, #0
 8002a82:	3401      	adds	r4, #1
 8002a84:	9305      	str	r3, [sp, #20]
 8002a86:	4619      	mov	r1, r3
 8002a88:	f04f 0c0a 	mov.w	ip, #10
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a92:	3a30      	subs	r2, #48	; 0x30
 8002a94:	2a09      	cmp	r2, #9
 8002a96:	d903      	bls.n	8002aa0 <_svfiprintf_r+0x1a8>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0c5      	beq.n	8002a28 <_svfiprintf_r+0x130>
 8002a9c:	9105      	str	r1, [sp, #20]
 8002a9e:	e7c3      	b.n	8002a28 <_svfiprintf_r+0x130>
 8002aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e7f0      	b.n	8002a8c <_svfiprintf_r+0x194>
 8002aaa:	ab03      	add	r3, sp, #12
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	462a      	mov	r2, r5
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <_svfiprintf_r+0x1f8>)
 8002ab2:	a904      	add	r1, sp, #16
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	f3af 8000 	nop.w
 8002aba:	1c42      	adds	r2, r0, #1
 8002abc:	4606      	mov	r6, r0
 8002abe:	d1d6      	bne.n	8002a6e <_svfiprintf_r+0x176>
 8002ac0:	89ab      	ldrh	r3, [r5, #12]
 8002ac2:	065b      	lsls	r3, r3, #25
 8002ac4:	f53f af2c 	bmi.w	8002920 <_svfiprintf_r+0x28>
 8002ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aca:	b01d      	add	sp, #116	; 0x74
 8002acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad0:	ab03      	add	r3, sp, #12
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	462a      	mov	r2, r5
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <_svfiprintf_r+0x1f8>)
 8002ad8:	a904      	add	r1, sp, #16
 8002ada:	4638      	mov	r0, r7
 8002adc:	f000 f87a 	bl	8002bd4 <_printf_i>
 8002ae0:	e7eb      	b.n	8002aba <_svfiprintf_r+0x1c2>
 8002ae2:	bf00      	nop
 8002ae4:	08004444 	.word	0x08004444
 8002ae8:	0800444e 	.word	0x0800444e
 8002aec:	00000000 	.word	0x00000000
 8002af0:	08002841 	.word	0x08002841
 8002af4:	0800444a 	.word	0x0800444a

08002af8 <_printf_common>:
 8002af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002afc:	4616      	mov	r6, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	688a      	ldr	r2, [r1, #8]
 8002b02:	690b      	ldr	r3, [r1, #16]
 8002b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bfb8      	it	lt
 8002b0c:	4613      	movlt	r3, r2
 8002b0e:	6033      	str	r3, [r6, #0]
 8002b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b14:	4607      	mov	r7, r0
 8002b16:	460c      	mov	r4, r1
 8002b18:	b10a      	cbz	r2, 8002b1e <_printf_common+0x26>
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	6033      	str	r3, [r6, #0]
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	0699      	lsls	r1, r3, #26
 8002b22:	bf42      	ittt	mi
 8002b24:	6833      	ldrmi	r3, [r6, #0]
 8002b26:	3302      	addmi	r3, #2
 8002b28:	6033      	strmi	r3, [r6, #0]
 8002b2a:	6825      	ldr	r5, [r4, #0]
 8002b2c:	f015 0506 	ands.w	r5, r5, #6
 8002b30:	d106      	bne.n	8002b40 <_printf_common+0x48>
 8002b32:	f104 0a19 	add.w	sl, r4, #25
 8002b36:	68e3      	ldr	r3, [r4, #12]
 8002b38:	6832      	ldr	r2, [r6, #0]
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	42ab      	cmp	r3, r5
 8002b3e:	dc26      	bgt.n	8002b8e <_printf_common+0x96>
 8002b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b44:	1e13      	subs	r3, r2, #0
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	bf18      	it	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	0692      	lsls	r2, r2, #26
 8002b4e:	d42b      	bmi.n	8002ba8 <_printf_common+0xb0>
 8002b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b54:	4649      	mov	r1, r9
 8002b56:	4638      	mov	r0, r7
 8002b58:	47c0      	blx	r8
 8002b5a:	3001      	adds	r0, #1
 8002b5c:	d01e      	beq.n	8002b9c <_printf_common+0xa4>
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	68e5      	ldr	r5, [r4, #12]
 8002b62:	6832      	ldr	r2, [r6, #0]
 8002b64:	f003 0306 	and.w	r3, r3, #6
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	bf08      	it	eq
 8002b6c:	1aad      	subeq	r5, r5, r2
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	bf0c      	ite	eq
 8002b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b78:	2500      	movne	r5, #0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bfc4      	itt	gt
 8002b7e:	1a9b      	subgt	r3, r3, r2
 8002b80:	18ed      	addgt	r5, r5, r3
 8002b82:	2600      	movs	r6, #0
 8002b84:	341a      	adds	r4, #26
 8002b86:	42b5      	cmp	r5, r6
 8002b88:	d11a      	bne.n	8002bc0 <_printf_common+0xc8>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e008      	b.n	8002ba0 <_printf_common+0xa8>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	4652      	mov	r2, sl
 8002b92:	4649      	mov	r1, r9
 8002b94:	4638      	mov	r0, r7
 8002b96:	47c0      	blx	r8
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d103      	bne.n	8002ba4 <_printf_common+0xac>
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba4:	3501      	adds	r5, #1
 8002ba6:	e7c6      	b.n	8002b36 <_printf_common+0x3e>
 8002ba8:	18e1      	adds	r1, r4, r3
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	2030      	movs	r0, #48	; 0x30
 8002bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bb2:	4422      	add	r2, r4
 8002bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	e7c7      	b.n	8002b50 <_printf_common+0x58>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	47c0      	blx	r8
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d0e6      	beq.n	8002b9c <_printf_common+0xa4>
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7d9      	b.n	8002b86 <_printf_common+0x8e>
	...

08002bd4 <_printf_i>:
 8002bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd8:	7e0f      	ldrb	r7, [r1, #24]
 8002bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bdc:	2f78      	cmp	r7, #120	; 0x78
 8002bde:	4691      	mov	r9, r2
 8002be0:	4680      	mov	r8, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	469a      	mov	sl, r3
 8002be6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bea:	d807      	bhi.n	8002bfc <_printf_i+0x28>
 8002bec:	2f62      	cmp	r7, #98	; 0x62
 8002bee:	d80a      	bhi.n	8002c06 <_printf_i+0x32>
 8002bf0:	2f00      	cmp	r7, #0
 8002bf2:	f000 80d8 	beq.w	8002da6 <_printf_i+0x1d2>
 8002bf6:	2f58      	cmp	r7, #88	; 0x58
 8002bf8:	f000 80a3 	beq.w	8002d42 <_printf_i+0x16e>
 8002bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c04:	e03a      	b.n	8002c7c <_printf_i+0xa8>
 8002c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c0a:	2b15      	cmp	r3, #21
 8002c0c:	d8f6      	bhi.n	8002bfc <_printf_i+0x28>
 8002c0e:	a101      	add	r1, pc, #4	; (adr r1, 8002c14 <_printf_i+0x40>)
 8002c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c14:	08002c6d 	.word	0x08002c6d
 8002c18:	08002c81 	.word	0x08002c81
 8002c1c:	08002bfd 	.word	0x08002bfd
 8002c20:	08002bfd 	.word	0x08002bfd
 8002c24:	08002bfd 	.word	0x08002bfd
 8002c28:	08002bfd 	.word	0x08002bfd
 8002c2c:	08002c81 	.word	0x08002c81
 8002c30:	08002bfd 	.word	0x08002bfd
 8002c34:	08002bfd 	.word	0x08002bfd
 8002c38:	08002bfd 	.word	0x08002bfd
 8002c3c:	08002bfd 	.word	0x08002bfd
 8002c40:	08002d8d 	.word	0x08002d8d
 8002c44:	08002cb1 	.word	0x08002cb1
 8002c48:	08002d6f 	.word	0x08002d6f
 8002c4c:	08002bfd 	.word	0x08002bfd
 8002c50:	08002bfd 	.word	0x08002bfd
 8002c54:	08002daf 	.word	0x08002daf
 8002c58:	08002bfd 	.word	0x08002bfd
 8002c5c:	08002cb1 	.word	0x08002cb1
 8002c60:	08002bfd 	.word	0x08002bfd
 8002c64:	08002bfd 	.word	0x08002bfd
 8002c68:	08002d77 	.word	0x08002d77
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	1d1a      	adds	r2, r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	602a      	str	r2, [r5, #0]
 8002c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0a3      	b.n	8002dc8 <_printf_i+0x1f4>
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	6829      	ldr	r1, [r5, #0]
 8002c84:	0606      	lsls	r6, r0, #24
 8002c86:	f101 0304 	add.w	r3, r1, #4
 8002c8a:	d50a      	bpl.n	8002ca2 <_printf_i+0xce>
 8002c8c:	680e      	ldr	r6, [r1, #0]
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	2e00      	cmp	r6, #0
 8002c92:	da03      	bge.n	8002c9c <_printf_i+0xc8>
 8002c94:	232d      	movs	r3, #45	; 0x2d
 8002c96:	4276      	negs	r6, r6
 8002c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c9c:	485e      	ldr	r0, [pc, #376]	; (8002e18 <_printf_i+0x244>)
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e019      	b.n	8002cd6 <_printf_i+0x102>
 8002ca2:	680e      	ldr	r6, [r1, #0]
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002caa:	bf18      	it	ne
 8002cac:	b236      	sxthne	r6, r6
 8002cae:	e7ef      	b.n	8002c90 <_printf_i+0xbc>
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	6820      	ldr	r0, [r4, #0]
 8002cb4:	1d19      	adds	r1, r3, #4
 8002cb6:	6029      	str	r1, [r5, #0]
 8002cb8:	0601      	lsls	r1, r0, #24
 8002cba:	d501      	bpl.n	8002cc0 <_printf_i+0xec>
 8002cbc:	681e      	ldr	r6, [r3, #0]
 8002cbe:	e002      	b.n	8002cc6 <_printf_i+0xf2>
 8002cc0:	0646      	lsls	r6, r0, #25
 8002cc2:	d5fb      	bpl.n	8002cbc <_printf_i+0xe8>
 8002cc4:	881e      	ldrh	r6, [r3, #0]
 8002cc6:	4854      	ldr	r0, [pc, #336]	; (8002e18 <_printf_i+0x244>)
 8002cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8002cca:	bf0c      	ite	eq
 8002ccc:	2308      	moveq	r3, #8
 8002cce:	230a      	movne	r3, #10
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cd6:	6865      	ldr	r5, [r4, #4]
 8002cd8:	60a5      	str	r5, [r4, #8]
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	bfa2      	ittt	ge
 8002cde:	6821      	ldrge	r1, [r4, #0]
 8002ce0:	f021 0104 	bicge.w	r1, r1, #4
 8002ce4:	6021      	strge	r1, [r4, #0]
 8002ce6:	b90e      	cbnz	r6, 8002cec <_printf_i+0x118>
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	d04d      	beq.n	8002d88 <_printf_i+0x1b4>
 8002cec:	4615      	mov	r5, r2
 8002cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8002cf6:	5dc7      	ldrb	r7, [r0, r7]
 8002cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cfc:	4637      	mov	r7, r6
 8002cfe:	42bb      	cmp	r3, r7
 8002d00:	460e      	mov	r6, r1
 8002d02:	d9f4      	bls.n	8002cee <_printf_i+0x11a>
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d10b      	bne.n	8002d20 <_printf_i+0x14c>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	07de      	lsls	r6, r3, #31
 8002d0c:	d508      	bpl.n	8002d20 <_printf_i+0x14c>
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	6861      	ldr	r1, [r4, #4]
 8002d12:	4299      	cmp	r1, r3
 8002d14:	bfde      	ittt	le
 8002d16:	2330      	movle	r3, #48	; 0x30
 8002d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d20:	1b52      	subs	r2, r2, r5
 8002d22:	6122      	str	r2, [r4, #16]
 8002d24:	f8cd a000 	str.w	sl, [sp]
 8002d28:	464b      	mov	r3, r9
 8002d2a:	aa03      	add	r2, sp, #12
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4640      	mov	r0, r8
 8002d30:	f7ff fee2 	bl	8002af8 <_printf_common>
 8002d34:	3001      	adds	r0, #1
 8002d36:	d14c      	bne.n	8002dd2 <_printf_i+0x1fe>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	b004      	add	sp, #16
 8002d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d42:	4835      	ldr	r0, [pc, #212]	; (8002e18 <_printf_i+0x244>)
 8002d44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d48:	6829      	ldr	r1, [r5, #0]
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d50:	6029      	str	r1, [r5, #0]
 8002d52:	061d      	lsls	r5, r3, #24
 8002d54:	d514      	bpl.n	8002d80 <_printf_i+0x1ac>
 8002d56:	07df      	lsls	r7, r3, #31
 8002d58:	bf44      	itt	mi
 8002d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002d5e:	6023      	strmi	r3, [r4, #0]
 8002d60:	b91e      	cbnz	r6, 8002d6a <_printf_i+0x196>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	f023 0320 	bic.w	r3, r3, #32
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	e7b0      	b.n	8002cd0 <_printf_i+0xfc>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	f043 0320 	orr.w	r3, r3, #32
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	2378      	movs	r3, #120	; 0x78
 8002d78:	4828      	ldr	r0, [pc, #160]	; (8002e1c <_printf_i+0x248>)
 8002d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d7e:	e7e3      	b.n	8002d48 <_printf_i+0x174>
 8002d80:	0659      	lsls	r1, r3, #25
 8002d82:	bf48      	it	mi
 8002d84:	b2b6      	uxthmi	r6, r6
 8002d86:	e7e6      	b.n	8002d56 <_printf_i+0x182>
 8002d88:	4615      	mov	r5, r2
 8002d8a:	e7bb      	b.n	8002d04 <_printf_i+0x130>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	6826      	ldr	r6, [r4, #0]
 8002d90:	6961      	ldr	r1, [r4, #20]
 8002d92:	1d18      	adds	r0, r3, #4
 8002d94:	6028      	str	r0, [r5, #0]
 8002d96:	0635      	lsls	r5, r6, #24
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	d501      	bpl.n	8002da0 <_printf_i+0x1cc>
 8002d9c:	6019      	str	r1, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <_printf_i+0x1d2>
 8002da0:	0670      	lsls	r0, r6, #25
 8002da2:	d5fb      	bpl.n	8002d9c <_printf_i+0x1c8>
 8002da4:	8019      	strh	r1, [r3, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	6123      	str	r3, [r4, #16]
 8002daa:	4615      	mov	r5, r2
 8002dac:	e7ba      	b.n	8002d24 <_printf_i+0x150>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	602a      	str	r2, [r5, #0]
 8002db4:	681d      	ldr	r5, [r3, #0]
 8002db6:	6862      	ldr	r2, [r4, #4]
 8002db8:	2100      	movs	r1, #0
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7fd fa10 	bl	80001e0 <memchr>
 8002dc0:	b108      	cbz	r0, 8002dc6 <_printf_i+0x1f2>
 8002dc2:	1b40      	subs	r0, r0, r5
 8002dc4:	6060      	str	r0, [r4, #4]
 8002dc6:	6863      	ldr	r3, [r4, #4]
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd0:	e7a8      	b.n	8002d24 <_printf_i+0x150>
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	462a      	mov	r2, r5
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	4640      	mov	r0, r8
 8002dda:	47d0      	blx	sl
 8002ddc:	3001      	adds	r0, #1
 8002dde:	d0ab      	beq.n	8002d38 <_printf_i+0x164>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	079b      	lsls	r3, r3, #30
 8002de4:	d413      	bmi.n	8002e0e <_printf_i+0x23a>
 8002de6:	68e0      	ldr	r0, [r4, #12]
 8002de8:	9b03      	ldr	r3, [sp, #12]
 8002dea:	4298      	cmp	r0, r3
 8002dec:	bfb8      	it	lt
 8002dee:	4618      	movlt	r0, r3
 8002df0:	e7a4      	b.n	8002d3c <_printf_i+0x168>
 8002df2:	2301      	movs	r3, #1
 8002df4:	4632      	mov	r2, r6
 8002df6:	4649      	mov	r1, r9
 8002df8:	4640      	mov	r0, r8
 8002dfa:	47d0      	blx	sl
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d09b      	beq.n	8002d38 <_printf_i+0x164>
 8002e00:	3501      	adds	r5, #1
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	9903      	ldr	r1, [sp, #12]
 8002e06:	1a5b      	subs	r3, r3, r1
 8002e08:	42ab      	cmp	r3, r5
 8002e0a:	dcf2      	bgt.n	8002df2 <_printf_i+0x21e>
 8002e0c:	e7eb      	b.n	8002de6 <_printf_i+0x212>
 8002e0e:	2500      	movs	r5, #0
 8002e10:	f104 0619 	add.w	r6, r4, #25
 8002e14:	e7f5      	b.n	8002e02 <_printf_i+0x22e>
 8002e16:	bf00      	nop
 8002e18:	08004455 	.word	0x08004455
 8002e1c:	08004466 	.word	0x08004466

08002e20 <memmove>:
 8002e20:	4288      	cmp	r0, r1
 8002e22:	b510      	push	{r4, lr}
 8002e24:	eb01 0402 	add.w	r4, r1, r2
 8002e28:	d902      	bls.n	8002e30 <memmove+0x10>
 8002e2a:	4284      	cmp	r4, r0
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	d807      	bhi.n	8002e40 <memmove+0x20>
 8002e30:	1e43      	subs	r3, r0, #1
 8002e32:	42a1      	cmp	r1, r4
 8002e34:	d008      	beq.n	8002e48 <memmove+0x28>
 8002e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e3e:	e7f8      	b.n	8002e32 <memmove+0x12>
 8002e40:	4402      	add	r2, r0
 8002e42:	4601      	mov	r1, r0
 8002e44:	428a      	cmp	r2, r1
 8002e46:	d100      	bne.n	8002e4a <memmove+0x2a>
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e52:	e7f7      	b.n	8002e44 <memmove+0x24>

08002e54 <_free_r>:
 8002e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e56:	2900      	cmp	r1, #0
 8002e58:	d044      	beq.n	8002ee4 <_free_r+0x90>
 8002e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e5e:	9001      	str	r0, [sp, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f1a1 0404 	sub.w	r4, r1, #4
 8002e66:	bfb8      	it	lt
 8002e68:	18e4      	addlt	r4, r4, r3
 8002e6a:	f000 f913 	bl	8003094 <__malloc_lock>
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <_free_r+0x94>)
 8002e70:	9801      	ldr	r0, [sp, #4]
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	b933      	cbnz	r3, 8002e84 <_free_r+0x30>
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	6014      	str	r4, [r2, #0]
 8002e7a:	b003      	add	sp, #12
 8002e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e80:	f000 b90e 	b.w	80030a0 <__malloc_unlock>
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	d908      	bls.n	8002e9a <_free_r+0x46>
 8002e88:	6825      	ldr	r5, [r4, #0]
 8002e8a:	1961      	adds	r1, r4, r5
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf01      	itttt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	1949      	addeq	r1, r1, r5
 8002e96:	6021      	streq	r1, [r4, #0]
 8002e98:	e7ed      	b.n	8002e76 <_free_r+0x22>
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b10b      	cbz	r3, 8002ea4 <_free_r+0x50>
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d9fa      	bls.n	8002e9a <_free_r+0x46>
 8002ea4:	6811      	ldr	r1, [r2, #0]
 8002ea6:	1855      	adds	r5, r2, r1
 8002ea8:	42a5      	cmp	r5, r4
 8002eaa:	d10b      	bne.n	8002ec4 <_free_r+0x70>
 8002eac:	6824      	ldr	r4, [r4, #0]
 8002eae:	4421      	add	r1, r4
 8002eb0:	1854      	adds	r4, r2, r1
 8002eb2:	42a3      	cmp	r3, r4
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	d1e0      	bne.n	8002e7a <_free_r+0x26>
 8002eb8:	681c      	ldr	r4, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	6053      	str	r3, [r2, #4]
 8002ebe:	4421      	add	r1, r4
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	e7da      	b.n	8002e7a <_free_r+0x26>
 8002ec4:	d902      	bls.n	8002ecc <_free_r+0x78>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	6003      	str	r3, [r0, #0]
 8002eca:	e7d6      	b.n	8002e7a <_free_r+0x26>
 8002ecc:	6825      	ldr	r5, [r4, #0]
 8002ece:	1961      	adds	r1, r4, r5
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	bf04      	itt	eq
 8002ed4:	6819      	ldreq	r1, [r3, #0]
 8002ed6:	685b      	ldreq	r3, [r3, #4]
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	bf04      	itt	eq
 8002edc:	1949      	addeq	r1, r1, r5
 8002ede:	6021      	streq	r1, [r4, #0]
 8002ee0:	6054      	str	r4, [r2, #4]
 8002ee2:	e7ca      	b.n	8002e7a <_free_r+0x26>
 8002ee4:	b003      	add	sp, #12
 8002ee6:	bd30      	pop	{r4, r5, pc}
 8002ee8:	200004fc 	.word	0x200004fc

08002eec <sbrk_aligned>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4e0e      	ldr	r6, [pc, #56]	; (8002f28 <sbrk_aligned+0x3c>)
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	6831      	ldr	r1, [r6, #0]
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	b911      	cbnz	r1, 8002efe <sbrk_aligned+0x12>
 8002ef8:	f000 f8bc 	bl	8003074 <_sbrk_r>
 8002efc:	6030      	str	r0, [r6, #0]
 8002efe:	4621      	mov	r1, r4
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 f8b7 	bl	8003074 <_sbrk_r>
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	d00a      	beq.n	8002f20 <sbrk_aligned+0x34>
 8002f0a:	1cc4      	adds	r4, r0, #3
 8002f0c:	f024 0403 	bic.w	r4, r4, #3
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	d007      	beq.n	8002f24 <sbrk_aligned+0x38>
 8002f14:	1a21      	subs	r1, r4, r0
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 f8ac 	bl	8003074 <_sbrk_r>
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d101      	bne.n	8002f24 <sbrk_aligned+0x38>
 8002f20:	f04f 34ff 	mov.w	r4, #4294967295
 8002f24:	4620      	mov	r0, r4
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	20000500 	.word	0x20000500

08002f2c <_malloc_r>:
 8002f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f30:	1ccd      	adds	r5, r1, #3
 8002f32:	f025 0503 	bic.w	r5, r5, #3
 8002f36:	3508      	adds	r5, #8
 8002f38:	2d0c      	cmp	r5, #12
 8002f3a:	bf38      	it	cc
 8002f3c:	250c      	movcc	r5, #12
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	4607      	mov	r7, r0
 8002f42:	db01      	blt.n	8002f48 <_malloc_r+0x1c>
 8002f44:	42a9      	cmp	r1, r5
 8002f46:	d905      	bls.n	8002f54 <_malloc_r+0x28>
 8002f48:	230c      	movs	r3, #12
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	2600      	movs	r6, #0
 8002f4e:	4630      	mov	r0, r6
 8002f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f54:	4e2e      	ldr	r6, [pc, #184]	; (8003010 <_malloc_r+0xe4>)
 8002f56:	f000 f89d 	bl	8003094 <__malloc_lock>
 8002f5a:	6833      	ldr	r3, [r6, #0]
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	bb34      	cbnz	r4, 8002fae <_malloc_r+0x82>
 8002f60:	4629      	mov	r1, r5
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ffc2 	bl	8002eec <sbrk_aligned>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	d14d      	bne.n	800300a <_malloc_r+0xde>
 8002f6e:	6834      	ldr	r4, [r6, #0]
 8002f70:	4626      	mov	r6, r4
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d140      	bne.n	8002ff8 <_malloc_r+0xcc>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	4631      	mov	r1, r6
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	eb04 0803 	add.w	r8, r4, r3
 8002f80:	f000 f878 	bl	8003074 <_sbrk_r>
 8002f84:	4580      	cmp	r8, r0
 8002f86:	d13a      	bne.n	8002ffe <_malloc_r+0xd2>
 8002f88:	6821      	ldr	r1, [r4, #0]
 8002f8a:	3503      	adds	r5, #3
 8002f8c:	1a6d      	subs	r5, r5, r1
 8002f8e:	f025 0503 	bic.w	r5, r5, #3
 8002f92:	3508      	adds	r5, #8
 8002f94:	2d0c      	cmp	r5, #12
 8002f96:	bf38      	it	cc
 8002f98:	250c      	movcc	r5, #12
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	f7ff ffa5 	bl	8002eec <sbrk_aligned>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d02b      	beq.n	8002ffe <_malloc_r+0xd2>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	442b      	add	r3, r5
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	e00e      	b.n	8002fcc <_malloc_r+0xa0>
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	1b52      	subs	r2, r2, r5
 8002fb2:	d41e      	bmi.n	8002ff2 <_malloc_r+0xc6>
 8002fb4:	2a0b      	cmp	r2, #11
 8002fb6:	d916      	bls.n	8002fe6 <_malloc_r+0xba>
 8002fb8:	1961      	adds	r1, r4, r5
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	6025      	str	r5, [r4, #0]
 8002fbe:	bf18      	it	ne
 8002fc0:	6059      	strne	r1, [r3, #4]
 8002fc2:	6863      	ldr	r3, [r4, #4]
 8002fc4:	bf08      	it	eq
 8002fc6:	6031      	streq	r1, [r6, #0]
 8002fc8:	5162      	str	r2, [r4, r5]
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f104 060b 	add.w	r6, r4, #11
 8002fd2:	f000 f865 	bl	80030a0 <__malloc_unlock>
 8002fd6:	f026 0607 	bic.w	r6, r6, #7
 8002fda:	1d23      	adds	r3, r4, #4
 8002fdc:	1af2      	subs	r2, r6, r3
 8002fde:	d0b6      	beq.n	8002f4e <_malloc_r+0x22>
 8002fe0:	1b9b      	subs	r3, r3, r6
 8002fe2:	50a3      	str	r3, [r4, r2]
 8002fe4:	e7b3      	b.n	8002f4e <_malloc_r+0x22>
 8002fe6:	6862      	ldr	r2, [r4, #4]
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	bf0c      	ite	eq
 8002fec:	6032      	streq	r2, [r6, #0]
 8002fee:	605a      	strne	r2, [r3, #4]
 8002ff0:	e7ec      	b.n	8002fcc <_malloc_r+0xa0>
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	6864      	ldr	r4, [r4, #4]
 8002ff6:	e7b2      	b.n	8002f5e <_malloc_r+0x32>
 8002ff8:	4634      	mov	r4, r6
 8002ffa:	6876      	ldr	r6, [r6, #4]
 8002ffc:	e7b9      	b.n	8002f72 <_malloc_r+0x46>
 8002ffe:	230c      	movs	r3, #12
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4638      	mov	r0, r7
 8003004:	f000 f84c 	bl	80030a0 <__malloc_unlock>
 8003008:	e7a1      	b.n	8002f4e <_malloc_r+0x22>
 800300a:	6025      	str	r5, [r4, #0]
 800300c:	e7de      	b.n	8002fcc <_malloc_r+0xa0>
 800300e:	bf00      	nop
 8003010:	200004fc 	.word	0x200004fc

08003014 <_realloc_r>:
 8003014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003018:	4680      	mov	r8, r0
 800301a:	4614      	mov	r4, r2
 800301c:	460e      	mov	r6, r1
 800301e:	b921      	cbnz	r1, 800302a <_realloc_r+0x16>
 8003020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003024:	4611      	mov	r1, r2
 8003026:	f7ff bf81 	b.w	8002f2c <_malloc_r>
 800302a:	b92a      	cbnz	r2, 8003038 <_realloc_r+0x24>
 800302c:	f7ff ff12 	bl	8002e54 <_free_r>
 8003030:	4625      	mov	r5, r4
 8003032:	4628      	mov	r0, r5
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003038:	f000 f838 	bl	80030ac <_malloc_usable_size_r>
 800303c:	4284      	cmp	r4, r0
 800303e:	4607      	mov	r7, r0
 8003040:	d802      	bhi.n	8003048 <_realloc_r+0x34>
 8003042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003046:	d812      	bhi.n	800306e <_realloc_r+0x5a>
 8003048:	4621      	mov	r1, r4
 800304a:	4640      	mov	r0, r8
 800304c:	f7ff ff6e 	bl	8002f2c <_malloc_r>
 8003050:	4605      	mov	r5, r0
 8003052:	2800      	cmp	r0, #0
 8003054:	d0ed      	beq.n	8003032 <_realloc_r+0x1e>
 8003056:	42bc      	cmp	r4, r7
 8003058:	4622      	mov	r2, r4
 800305a:	4631      	mov	r1, r6
 800305c:	bf28      	it	cs
 800305e:	463a      	movcs	r2, r7
 8003060:	f7ff fbb8 	bl	80027d4 <memcpy>
 8003064:	4631      	mov	r1, r6
 8003066:	4640      	mov	r0, r8
 8003068:	f7ff fef4 	bl	8002e54 <_free_r>
 800306c:	e7e1      	b.n	8003032 <_realloc_r+0x1e>
 800306e:	4635      	mov	r5, r6
 8003070:	e7df      	b.n	8003032 <_realloc_r+0x1e>
	...

08003074 <_sbrk_r>:
 8003074:	b538      	push	{r3, r4, r5, lr}
 8003076:	4d06      	ldr	r5, [pc, #24]	; (8003090 <_sbrk_r+0x1c>)
 8003078:	2300      	movs	r3, #0
 800307a:	4604      	mov	r4, r0
 800307c:	4608      	mov	r0, r1
 800307e:	602b      	str	r3, [r5, #0]
 8003080:	f7fd ff52 	bl	8000f28 <_sbrk>
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d102      	bne.n	800308e <_sbrk_r+0x1a>
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	b103      	cbz	r3, 800308e <_sbrk_r+0x1a>
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	bd38      	pop	{r3, r4, r5, pc}
 8003090:	20000504 	.word	0x20000504

08003094 <__malloc_lock>:
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <__malloc_lock+0x8>)
 8003096:	f000 b811 	b.w	80030bc <__retarget_lock_acquire_recursive>
 800309a:	bf00      	nop
 800309c:	20000508 	.word	0x20000508

080030a0 <__malloc_unlock>:
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <__malloc_unlock+0x8>)
 80030a2:	f000 b80c 	b.w	80030be <__retarget_lock_release_recursive>
 80030a6:	bf00      	nop
 80030a8:	20000508 	.word	0x20000508

080030ac <_malloc_usable_size_r>:
 80030ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b0:	1f18      	subs	r0, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bfbc      	itt	lt
 80030b6:	580b      	ldrlt	r3, [r1, r0]
 80030b8:	18c0      	addlt	r0, r0, r3
 80030ba:	4770      	bx	lr

080030bc <__retarget_lock_acquire_recursive>:
 80030bc:	4770      	bx	lr

080030be <__retarget_lock_release_recursive>:
 80030be:	4770      	bx	lr

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
