
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f20  20000074  08006f1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f94  08006f1c  00024f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f3f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003215  00000000  00000000  00035fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000391f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000476c  00000000  00000000  0003b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132ab  00000000  00000000  0003f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6ae  00000000  00000000  00052c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c70  00000000  00000000  000f0358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d50 	.word	0x08006d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006d50 	.word	0x08006d50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb68 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f834 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f92c 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f90a 	bl	80007ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8de 	bl	8000758 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800059c:	f000 f88a 	bl	80006b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, valueAdc, 500);
 80005a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a4:	490c      	ldr	r1, [pc, #48]	; (80005d8 <main+0x54>)
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x58>)
 80005a8:	f000 fc0e 	bl	8000dc8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ac:	f002 fe1e 	bl	80031ec <osKernelInitialize>
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
  TaskAHandle = osThreadNew(functionA, 0, &TaskA_attributes);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <main+0x5c>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x60>)
 80005b6:	f002 fe63 	bl	8003280 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <main+0x64>)
 80005be:	6013      	str	r3, [r2, #0]
  TaskBHandle = osThreadNew(functionB, 0, &TaskB_attributes);
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <main+0x68>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x6c>)
 80005c6:	f002 fe5b 	bl	8003280 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <main+0x70>)
 80005ce:	6013      	str	r3, [r2, #0]
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 fe30 	bl	8003234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x50>
 80005d6:	bf00      	nop
 80005d8:	20000184 	.word	0x20000184
 80005dc:	20000090 	.word	0x20000090
 80005e0:	08006d98 	.word	0x08006d98
 80005e4:	08000821 	.word	0x08000821
 80005e8:	2000017c 	.word	0x2000017c
 80005ec:	08006dbc 	.word	0x08006dbc
 80005f0:	0800085d 	.word	0x0800085d
 80005f4:	20000180 	.word	0x20000180

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fc99 	bl	8005f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xb4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <SystemClock_Config+0xb8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fd71 	bl	8002150 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000674:	f000 f8fb 	bl	800086e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 ffd4 	bl	8002640 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069e:	f000 f8e6 	bl	800086e <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_ADC1_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_ADC1_Init+0x98>)
 80006f4:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <MX_ADC1_Init+0x98>)
 8000714:	f000 fb14 	bl	8000d40 <HAL_ADC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f8a6 	bl	800086e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_ADC1_Init+0x98>)
 8000734:	f000 fc56 	bl	8000fe4 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800073e:	f000 f896 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000090 	.word	0x20000090
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART1_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000790:	f002 f936 	bl	8002a00 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f868 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000138 	.word	0x20000138
 80007a8:	40011000 	.word	0x40011000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2105      	movs	r1, #5
 80007d2:	2038      	movs	r0, #56	; 0x38
 80007d4:	f000 ff91 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d8:	2038      	movs	r0, #56	; 0x38
 80007da:	f000 ffaa 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x30>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x30>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <functionA>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_functionA */
void functionA(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
  		for(int i=0;i<500;i++)
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00d      	b.n	800084a <functionA+0x2a>
  			{
  				printf("%d \n",valueAdc[i]);
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <functionA+0x34>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <functionA+0x38>)
 800083a:	f005 fc1d 	bl	8006078 <iprintf>
          osDelay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f002 fdb0 	bl	80033a4 <osDelay>
  		for(int i=0;i<500;i++)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000850:	dbed      	blt.n	800082e <functionA+0xe>
 8000852:	e7e9      	b.n	8000828 <functionA+0x8>
 8000854:	20000184 	.word	0x20000184
 8000858:	08006d78 	.word	0x08006d78

0800085c <functionB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_functionB */
void functionB(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN functionB */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f002 fd9c 	bl	80033a4 <osDelay>
 800086c:	e7fa      	b.n	8000864 <functionB+0x8>

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_MspInit+0x54>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_MspInit+0x54>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 ff1c 	bl	80016fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <HAL_ADC_MspInit+0xdc>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d157      	bne.n	80009a2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <HAL_ADC_MspInit+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092a:	2301      	movs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <HAL_ADC_MspInit+0xe4>)
 800093e:	f001 fa83 	bl	8001e48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_ADC_MspInit+0xec>)
 8000946:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800095c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000960:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000968:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000978:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 8000988:	f000 feee 	bl	8001768 <HAL_DMA_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000992:	f7ff ff6c 	bl	800086e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800099a:	639a      	str	r2, [r3, #56]	; 0x38
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_ADC_MspInit+0xe8>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40012000 	.word	0x40012000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	200000d8 	.word	0x200000d8
 80009bc:	40026410 	.word	0x40026410

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x84>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12c      	bne.n	8000a3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0x8c>)
 8000a38:	f001 fa06 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f93e 	bl	8000d00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a84:	f004 f8c6 	bl	8004c14 <xTaskGetSchedulerState>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d001      	beq.n	8000a92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a8e:	f004 feab 	bl	80057e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <DMA2_Stream0_IRQHandler+0x10>)
 8000a9e:	f000 ff69 	bl	8001974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000d8 	.word	0x200000d8

08000aac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e00a      	b.n	8000ad4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4601      	mov	r1, r0
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf0      	blt.n	8000abe <_read+0x12>
  }

  return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_isatty>:

int _isatty(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f005 f8ac 	bl	8005cdc <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20020000 	.word	0x20020000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	2000056c 	.word	0x2000056c
 8000bb8:	20004f98 	.word	0x20004f98

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <_write>:
	rxBufferGp %= 255; // 최대값 255
	return result; // 쓰기 변수속 값 반환
}

int _write(int file,char *p, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <_write+0x24>)
 8000bf6:	f001 ff50 	bl	8002a9a <HAL_UART_Transmit>
	return len;
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000138 	.word	0x20000138

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffc3 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f005 f94d 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fca3 	bl	8000584 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c4c:	08006ea8 	.word	0x08006ea8
  ldr r2, =_sbss
 8000c50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c54:	20004f94 	.word	0x20004f94

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 fd2d 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fdf2 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fd45 	bl	800174e <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 fd0d 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000570 	.word	0x20000570

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000570 	.word	0x20000570

08000d40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e033      	b.n	8000dbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fdb6 	bl	80008d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d118      	bne.n	8000db0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d86:	f023 0302 	bic.w	r3, r3, #2
 8000d8a:	f043 0202 	orr.w	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 fa58 	bl	8001248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
 8000dae:	e001      	b.n	8000db4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start_DMA+0x1e>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e0ce      	b.n	8000f84 <HAL_ADC_Start_DMA+0x1bc>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d018      	beq.n	8000e2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e0c:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <HAL_ADC_Start_DMA+0x1c4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <HAL_ADC_Start_DMA+0x1c8>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	0c9a      	lsrs	r2, r3, #18
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e20:	e002      	b.n	8000e28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f9      	bne.n	8000e22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e3c:	d107      	bne.n	8000e4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f040 8086 	bne.w	8000f6a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9c:	d106      	bne.n	8000eac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f023 0206 	bic.w	r2, r3, #6
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
 8000eaa:	e002      	b.n	8000eb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_ADC_Start_DMA+0x1cc>)
 8000ebc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec2:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <HAL_ADC_Start_DMA+0x1d0>)
 8000ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eca:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <HAL_ADC_Start_DMA+0x1d4>)
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_ADC_Start_DMA+0x1d8>)
 8000ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ede:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000eee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000efe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	334c      	adds	r3, #76	; 0x4c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f000 fcd8 	bl	80018c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10f      	bne.n	8000f40 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d129      	bne.n	8000f82 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	e020      	b.n	8000f82 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_ADC_Start_DMA+0x1dc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d11b      	bne.n	8000f82 <HAL_ADC_Start_DMA+0x1ba>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d114      	bne.n	8000f82 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e00b      	b.n	8000f82 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f043 0210 	orr.w	r2, r3, #16
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	40012300 	.word	0x40012300
 8000f98:	08001441 	.word	0x08001441
 8000f9c:	080014fb 	.word	0x080014fb
 8000fa0:	08001517 	.word	0x08001517
 8000fa4:	40012000 	.word	0x40012000

08000fa8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d101      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1c>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e113      	b.n	8001228 <HAL_ADC_ConfigChannel+0x244>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d925      	bls.n	800105c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	3b1e      	subs	r3, #30
 8001026:	2207      	movs	r2, #7
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43da      	mvns	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	400a      	ands	r2, r1
 8001034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68d9      	ldr	r1, [r3, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	4603      	mov	r3, r0
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4403      	add	r3, r0
 800104e:	3b1e      	subs	r3, #30
 8001050:	409a      	lsls	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	e022      	b.n	80010a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6919      	ldr	r1, [r3, #16]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	2207      	movs	r2, #7
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6919      	ldr	r1, [r3, #16]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	4603      	mov	r3, r0
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4403      	add	r3, r0
 8001098:	409a      	lsls	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d824      	bhi.n	80010f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b05      	subs	r3, #5
 80010bc:	221f      	movs	r2, #31
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	400a      	ands	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b05      	subs	r3, #5
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	e04c      	b.n	800118e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	d824      	bhi.n	8001146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b23      	subs	r3, #35	; 0x23
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43da      	mvns	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	400a      	ands	r2, r1
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b23      	subs	r3, #35	; 0x23
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
 8001144:	e023      	b.n	800118e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3b41      	subs	r3, #65	; 0x41
 8001158:	221f      	movs	r2, #31
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	400a      	ands	r2, r1
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b41      	subs	r3, #65	; 0x41
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_ADC_ConfigChannel+0x250>)
 8001190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_ADC_ConfigChannel+0x254>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10f      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d8>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b12      	cmp	r3, #18
 80011a2:	d10b      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_ADC_ConfigChannel+0x254>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12b      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_ADC_ConfigChannel+0x258>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0x1f4>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d122      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_ADC_ConfigChannel+0x258>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d111      	bne.n	800121e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_ADC_ConfigChannel+0x25c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_ADC_ConfigChannel+0x260>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9a      	lsrs	r2, r3, #18
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40012300 	.word	0x40012300
 8001238:	40012000 	.word	0x40012000
 800123c:	10000012 	.word	0x10000012
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <ADC_Init+0x1f0>)
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800127c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <ADC_Init+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6899      	ldr	r1, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e00f      	b.n	8001346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0202 	bic.w	r2, r2, #2
 8001354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6899      	ldr	r1, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01b      	beq.n	80013ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6859      	ldr	r1, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	035a      	lsls	r2, r3, #13
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	e007      	b.n	80013bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	051a      	lsls	r2, r3, #20
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fe:	025a      	lsls	r2, r3, #9
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6899      	ldr	r1, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	029a      	lsls	r2, r3, #10
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	609a      	str	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40012300 	.word	0x40012300
 800143c:	0f000001 	.word	0x0f000001

08001440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001456:	2b00      	cmp	r3, #0
 8001458:	d13c      	bne.n	80014d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d12b      	bne.n	80014cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001478:	2b00      	cmp	r3, #0
 800147a:	d127      	bne.n	80014cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001494:	2b00      	cmp	r3, #0
 8001496:	d119      	bne.n	80014cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0220 	bic.w	r2, r2, #32
 80014a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff fd6b 	bl	8000fa8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014d2:	e00e      	b.n	80014f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff fd75 	bl	8000fd0 <HAL_ADC_ErrorCallback>
}
 80014e6:	e004      	b.n	80014f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fd57 	bl	8000fbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f043 0204 	orr.w	r2, r3, #4
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff fd4a 	bl	8000fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fad8 	bl	8000d28 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e099      	b.n	80018b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	e00f      	b.n	80017c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fabf 	bl	8000d28 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d908      	bls.n	80017c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e078      	b.n	80018b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e8      	bne.n	80017a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_DMA_Init+0x158>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2b04      	cmp	r3, #4
 800181e:	d107      	bne.n	8001830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4313      	orrs	r3, r2
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	2b04      	cmp	r3, #4
 8001858:	d117      	bne.n	800188a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fa6f 	bl	8001d50 <DMA_CheckFifoParam>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001886:	2301      	movs	r3, #1
 8001888:	e016      	b.n	80018b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa26 	bl	8001ce4 <DMA_CalcBaseAndBitshift>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	f010803f 	.word	0xf010803f

080018c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_DMA_Start_IT+0x26>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e040      	b.n	800196c <HAL_DMA_Start_IT+0xa8>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12f      	bne.n	800195e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2202      	movs	r2, #2
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f9b8 	bl	8001c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191c:	223f      	movs	r2, #63	; 0x3f
 800191e:	409a      	lsls	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0216 	orr.w	r2, r2, #22
 8001932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0208 	orr.w	r2, r2, #8
 800194a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e005      	b.n	800196a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001980:	4b8e      	ldr	r3, [pc, #568]	; (8001bbc <HAL_DMA_IRQHandler+0x248>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a8e      	ldr	r2, [pc, #568]	; (8001bc0 <HAL_DMA_IRQHandler+0x24c>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2208      	movs	r2, #8
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2204      	movs	r2, #4
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0204 	orr.w	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	2210      	movs	r2, #16
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d043      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03c      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2210      	movs	r2, #16
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d018      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d024      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
 8001aa2:	e01f      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0208 	bic.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2220      	movs	r2, #32
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 808f 	beq.w	8001c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8087 	beq.w	8001c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d136      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0216 	bic.w	r2, r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_DMA_IRQHandler+0x1da>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	223f      	movs	r2, #63	; 0x3f
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d07e      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
        }
        return;
 8001b8a:	e079      	b.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01d      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d031      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
 8001bb8:	e02c      	b.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e01e      	b.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10f      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d032      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d307      	bcc.n	8001c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f2      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x2cc>
 8001c5a:	e000      	b.n	8001c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c80:	bf00      	nop
    }
  }
}
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc6:	e007      	b.n	8001cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b10      	subs	r3, #16
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <DMA_CalcBaseAndBitshift+0x64>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <DMA_CalcBaseAndBitshift+0x68>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d909      	bls.n	8001d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
 8001d24:	e007      	b.n	8001d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	aaaaaaab 	.word	0xaaaaaaab
 8001d4c:	08006df8 	.word	0x08006df8

08001d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d856      	bhi.n	8001e1e <DMA_CheckFifoParam+0xce>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <DMA_CheckFifoParam+0x28>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d9b 	.word	0x08001d9b
 8001d80:	08001d89 	.word	0x08001d89
 8001d84:	08001e1f 	.word	0x08001e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d046      	beq.n	8001e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e043      	b.n	8001e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da2:	d140      	bne.n	8001e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e03d      	b.n	8001e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d121      	bne.n	8001df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d837      	bhi.n	8001e2a <DMA_CheckFifoParam+0xda>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x70>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd7 	.word	0x08001dd7
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001de9 	.word	0x08001de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e030      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d025      	beq.n	8001e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de6:	e022      	b.n	8001e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df6:	e01c      	b.n	8001e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d903      	bls.n	8001e06 <DMA_CheckFifoParam+0xb6>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d003      	beq.n	8001e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e04:	e018      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0a:	e015      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e00b      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e00a      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e008      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e006      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
    }
  } 
  
  return status; 
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e159      	b.n	8002118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8148 	bne.w	8002112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a2 	beq.w	8002112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x202>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x1fe>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x1f6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x1f2>
 8002036:	2304      	movs	r3, #4
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203a:	2307      	movs	r3, #7
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x204>
 800204a:	2300      	movs	r3, #0
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_GPIO_Init+0x304>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_GPIO_Init+0x304>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x304>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x304>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	f67f aea2 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40021000 	.word	0x40021000
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e267      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b82      	ldr	r3, [pc, #520]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b7e      	ldr	r3, [pc, #504]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e242      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b70      	ldr	r3, [pc, #448]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6f      	ldr	r2, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6c      	ldr	r2, [pc, #432]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b69      	ldr	r3, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a68      	ldr	r2, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b66      	ldr	r3, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fd8e 	bl	8000d28 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe fd8a 	bl	8000d28 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e207      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fd7a 	bl	8000d28 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fd76 	bl	8000d28 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1f3      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c7      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4937      	ldr	r1, [pc, #220]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_RCC_OscConfig+0x244>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fd2f 	bl	8000d28 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fd2b 	bl	8000d28 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a8      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4925      	ldr	r1, [pc, #148]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_OscConfig+0x244>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fd0e 	bl	8000d28 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fd0a 	bl	8000d28 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e187      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d036      	beq.n	80023a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x248>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fcee 	bl	8000d28 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fcea 	bl	8000d28 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e167      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x240>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e01b      	b.n	80023a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x248>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fe fcd7 	bl	8000d28 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e00e      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fcd3 	bl	8000d28 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d907      	bls.n	800239c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e150      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ea      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8097 	beq.w	80024e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a7c      	ldr	r2, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b7a      	ldr	r3, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b77      	ldr	r3, [pc, #476]	; (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a73      	ldr	r2, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fc93 	bl	8000d28 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe fc8f 	bl	8000d28 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e10c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0x474>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x2ea>
 800242c:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x30c>
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800245c:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a54      	ldr	r2, [pc, #336]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7fe fc54 	bl	8000d28 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fc50 	bl	8000d28 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0cb      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ee      	beq.n	8002484 <HAL_RCC_OscConfig+0x334>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fc3e 	bl	8000d28 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe fc3a 	bl	8000d28 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0b5      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c6:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a38      	ldr	r2, [pc, #224]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a1 	beq.w	8002630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d05c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d141      	bne.n	8002586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fc0e 	bl	8000d28 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fc0a 	bl	8000d28 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e087      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x478>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fbe3 	bl	8000d28 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe fbdf 	bl	8000d28 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e05c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x416>
 8002584:	e054      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fbcc 	bl	8000d28 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fbc8 	bl	8000d28 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e045      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x444>
 80025b2:	e03d      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e038      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d028      	beq.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d121      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11a      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002604:	4293      	cmp	r3, r2
 8002606:	d111      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fafa 	bl	8000d28 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe faf6 	bl	8000d28 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fa5a 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08006de0 	.word	0x08006de0
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b090      	sub	sp, #64	; 0x40
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
 8002818:	2300      	movs	r3, #0
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80a1 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e09b      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002844:	e09b      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284a:	e098      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b4f      	ldr	r3, [pc, #316]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002856:	4b4d      	ldr	r3, [pc, #308]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d028      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	627a      	str	r2, [r7, #36]	; 0x24
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002874:	2100      	movs	r1, #0
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002878:	fb03 f201 	mul.w	r2, r3, r1
 800287c:	2300      	movs	r3, #0
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	4413      	add	r3, r2
 8002884:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002886:	fba0 1202 	umull	r1, r2, r0, r2
 800288a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800288c:	460a      	mov	r2, r1
 800288e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	4413      	add	r3, r2
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	2200      	movs	r2, #0
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	61fa      	str	r2, [r7, #28]
 800289e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028a6:	f7fd fceb 	bl	8000280 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b2:	e053      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	2200      	movs	r2, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	617a      	str	r2, [r7, #20]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028c6:	f04f 0b00 	mov.w	fp, #0
 80028ca:	4652      	mov	r2, sl
 80028cc:	465b      	mov	r3, fp
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	ebb2 080a 	subs.w	r8, r2, sl
 80028e6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002902:	eb63 0509 	sbc.w	r5, r3, r9
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	00eb      	lsls	r3, r5, #3
 8002910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002914:	00e2      	lsls	r2, r4, #3
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	eb14 030a 	adds.w	r3, r4, sl
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	eb45 030b 	adc.w	r3, r5, fp
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002932:	4629      	mov	r1, r5
 8002934:	028b      	lsls	r3, r1, #10
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800293c:	4621      	mov	r1, r4
 800293e:	028a      	lsls	r2, r1, #10
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	2200      	movs	r2, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002950:	f7fd fc96 	bl	8000280 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800296c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 800297a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002980:	4618      	mov	r0, r3
 8002982:	3740      	adds	r7, #64	; 0x40
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400
 8002994:	017d7840 	.word	0x017d7840

08002998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b4:	f7ff fff0 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08006df0 	.word	0x08006df0

080029d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029dc:	f7ff ffdc 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0b5b      	lsrs	r3, r3, #13
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08006df0 	.word	0x08006df0

08002a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e03f      	b.n	8002a92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd ffca 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f929 	bl	8002c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b08a      	sub	sp, #40	; 0x28
 8002a9e:	af02      	add	r7, sp, #8
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d17c      	bne.n	8002bb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_UART_Transmit+0x2c>
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e075      	b.n	8002bb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_Transmit+0x3e>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e06e      	b.n	8002bb6 <HAL_UART_Transmit+0x11c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2221      	movs	r2, #33	; 0x21
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aee:	f7fe f91b 	bl	8000d28 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d108      	bne.n	8002b1c <HAL_UART_Transmit+0x82>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b2c:	e02a      	b.n	8002b84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f840 	bl	8002bbe <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e036      	b.n	8002bb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3302      	adds	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e007      	b.n	8002b76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1cf      	bne.n	8002b2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2140      	movs	r1, #64	; 0x40
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f810 	bl	8002bbe <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e006      	b.n	8002bb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b090      	sub	sp, #64	; 0x40
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bce:	e050      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d04c      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <UART_WaitOnFlagUntilTimeout+0x30>
 8002bde:	f7fe f8a3 	bl	8000d28 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d241      	bcs.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c0e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e5      	bne.n	8002bee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	613b      	str	r3, [r7, #16]
   return(result);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c42:	623a      	str	r2, [r7, #32]
 8002c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	69f9      	ldr	r1, [r7, #28]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e00f      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d09f      	beq.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3740      	adds	r7, #64	; 0x40
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b0c0      	sub	sp, #256	; 0x100
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	68d9      	ldr	r1, [r3, #12]
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	ea40 0301 	orr.w	r3, r0, r1
 8002cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cf4:	f021 010c 	bic.w	r1, r1, #12
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d02:	430b      	orrs	r3, r1
 8002d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	6999      	ldr	r1, [r3, #24]
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	ea40 0301 	orr.w	r3, r0, r1
 8002d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d005      	beq.n	8002d3c <UART_SetConfig+0xa0>
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <UART_SetConfig+0x2d0>)
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d104      	bne.n	8002d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7ff fe4c 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8002d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d44:	e003      	b.n	8002d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d46:	f7ff fe33 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8002d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	f040 810c 	bne.w	8002f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	1891      	adds	r1, r2, r2
 8002d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d76:	415b      	adcs	r3, r3
 8002d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d7e:	4621      	mov	r1, r4
 8002d80:	eb12 0801 	adds.w	r8, r2, r1
 8002d84:	4629      	mov	r1, r5
 8002d86:	eb43 0901 	adc.w	r9, r3, r1
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	eb18 0303 	adds.w	r3, r8, r3
 8002da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dac:	462b      	mov	r3, r5
 8002dae:	eb49 0303 	adc.w	r3, r9, r3
 8002db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dca:	460b      	mov	r3, r1
 8002dcc:	18db      	adds	r3, r3, r3
 8002dce:	653b      	str	r3, [r7, #80]	; 0x50
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	eb42 0303 	adc.w	r3, r2, r3
 8002dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002de0:	f7fd fa4e 	bl	8000280 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2302 	umull	r2, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	011c      	lsls	r4, r3, #4
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e14:	4641      	mov	r1, r8
 8002e16:	eb12 0a01 	adds.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e34:	4692      	mov	sl, r2
 8002e36:	469b      	mov	fp, r3
 8002e38:	4643      	mov	r3, r8
 8002e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e42:	464b      	mov	r3, r9
 8002e44:	eb4b 0303 	adc.w	r3, fp, r3
 8002e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e60:	460b      	mov	r3, r1
 8002e62:	18db      	adds	r3, r3, r3
 8002e64:	643b      	str	r3, [r7, #64]	; 0x40
 8002e66:	4613      	mov	r3, r2
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e76:	f7fd fa03 	bl	8000280 <__aeabi_uldivmod>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002e82:	fba3 2301 	umull	r2, r3, r3, r1
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2264      	movs	r2, #100	; 0x64
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	1acb      	subs	r3, r1, r3
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002e98:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ea4:	441c      	add	r4, r3
 8002ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ec8:	4641      	mov	r1, r8
 8002eca:	1851      	adds	r1, r2, r1
 8002ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8002ece:	4649      	mov	r1, r9
 8002ed0:	414b      	adcs	r3, r1
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	00cb      	lsls	r3, r1, #3
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eea:	4651      	mov	r1, sl
 8002eec:	00ca      	lsls	r2, r1, #3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002efc:	464b      	mov	r3, r9
 8002efe:	460a      	mov	r2, r1
 8002f00:	eb42 0303 	adc.w	r3, r2, r3
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	18db      	adds	r3, r3, r3
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f22:	4613      	mov	r3, r2
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f32:	f7fd f9a5 	bl	8000280 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	f003 0207 	and.w	r2, r3, #7
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4422      	add	r2, r4
 8002f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f64:	e105      	b.n	8003172 <UART_SetConfig+0x4d6>
 8002f66:	bf00      	nop
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40011400 	.word	0x40011400
 8002f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f86:	4642      	mov	r2, r8
 8002f88:	464b      	mov	r3, r9
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	6239      	str	r1, [r7, #32]
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f96:	4641      	mov	r1, r8
 8002f98:	1854      	adds	r4, r2, r1
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	eb43 0501 	adc.w	r5, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	00eb      	lsls	r3, r5, #3
 8002faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fae:	00e2      	lsls	r2, r4, #3
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	18e3      	adds	r3, r4, r3
 8002fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	eb45 0303 	adc.w	r3, r5, r3
 8002fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	008b      	lsls	r3, r1, #2
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fec:	4621      	mov	r1, r4
 8002fee:	008a      	lsls	r2, r1, #2
 8002ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ff4:	f7fd f944 	bl	8000280 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b60      	ldr	r3, [pc, #384]	; (8003180 <UART_SetConfig+0x4e4>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011c      	lsls	r4, r3, #4
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	61b9      	str	r1, [r7, #24]
 8003020:	415b      	adcs	r3, r3
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	4641      	mov	r1, r8
 800302a:	1851      	adds	r1, r2, r1
 800302c:	6139      	str	r1, [r7, #16]
 800302e:	4649      	mov	r1, r9
 8003030:	414b      	adcs	r3, r1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003040:	4659      	mov	r1, fp
 8003042:	00cb      	lsls	r3, r1, #3
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304a:	4651      	mov	r1, sl
 800304c:	00ca      	lsls	r2, r1, #3
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4642      	mov	r2, r8
 8003056:	189b      	adds	r3, r3, r2
 8003058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800305c:	464b      	mov	r3, r9
 800305e:	460a      	mov	r2, r1
 8003060:	eb42 0303 	adc.w	r3, r2, r3
 8003064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	67bb      	str	r3, [r7, #120]	; 0x78
 8003072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003080:	4649      	mov	r1, r9
 8003082:	008b      	lsls	r3, r1, #2
 8003084:	4641      	mov	r1, r8
 8003086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308a:	4641      	mov	r1, r8
 800308c:	008a      	lsls	r2, r1, #2
 800308e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003092:	f7fd f8f5 	bl	8000280 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <UART_SetConfig+0x4e4>)
 800309c:	fba3 1302 	umull	r1, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	2164      	movs	r1, #100	; 0x64
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	3332      	adds	r3, #50	; 0x32
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <UART_SetConfig+0x4e4>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ba:	441c      	add	r4, r3
 80030bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c0:	2200      	movs	r2, #0
 80030c2:	673b      	str	r3, [r7, #112]	; 0x70
 80030c4:	677a      	str	r2, [r7, #116]	; 0x74
 80030c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030ca:	4642      	mov	r2, r8
 80030cc:	464b      	mov	r3, r9
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	415b      	adcs	r3, r3
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030da:	4641      	mov	r1, r8
 80030dc:	1851      	adds	r1, r2, r1
 80030de:	6039      	str	r1, [r7, #0]
 80030e0:	4649      	mov	r1, r9
 80030e2:	414b      	adcs	r3, r1
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030f2:	4659      	mov	r1, fp
 80030f4:	00cb      	lsls	r3, r1, #3
 80030f6:	4651      	mov	r1, sl
 80030f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fc:	4651      	mov	r1, sl
 80030fe:	00ca      	lsls	r2, r1, #3
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	4603      	mov	r3, r0
 8003106:	4642      	mov	r2, r8
 8003108:	189b      	adds	r3, r3, r2
 800310a:	66bb      	str	r3, [r7, #104]	; 0x68
 800310c:	464b      	mov	r3, r9
 800310e:	460a      	mov	r2, r1
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	663b      	str	r3, [r7, #96]	; 0x60
 8003120:	667a      	str	r2, [r7, #100]	; 0x64
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800312e:	4649      	mov	r1, r9
 8003130:	008b      	lsls	r3, r1, #2
 8003132:	4641      	mov	r1, r8
 8003134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003138:	4641      	mov	r1, r8
 800313a:	008a      	lsls	r2, r1, #2
 800313c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003140:	f7fd f89e 	bl	8000280 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <UART_SetConfig+0x4e4>)
 800314a:	fba3 1302 	umull	r1, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2164      	movs	r1, #100	; 0x64
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	3332      	adds	r3, #50	; 0x32
 800315c:	4a08      	ldr	r2, [pc, #32]	; (8003180 <UART_SetConfig+0x4e4>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	f003 020f 	and.w	r2, r3, #15
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4422      	add	r2, r4
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	bf00      	nop
 8003174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	51eb851f 	.word	0x51eb851f

08003184 <__NVIC_SetPriority>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031dc:	2100      	movs	r1, #0
 80031de:	f06f 0004 	mvn.w	r0, #4
 80031e2:	f7ff ffcf 	bl	8003184 <__NVIC_SetPriority>
#endif
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f2:	f3ef 8305 	mrs	r3, IPSR
 80031f6:	603b      	str	r3, [r7, #0]
  return(result);
 80031f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80031fe:	f06f 0305 	mvn.w	r3, #5
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e00c      	b.n	8003220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <osKernelInitialize+0x44>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <osKernelInitialize+0x44>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e002      	b.n	8003220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003220:	687b      	ldr	r3, [r7, #4]
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000574 	.word	0x20000574

08003234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323a:	f3ef 8305 	mrs	r3, IPSR
 800323e:	603b      	str	r3, [r7, #0]
  return(result);
 8003240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003246:	f06f 0305 	mvn.w	r3, #5
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	e010      	b.n	8003270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <osKernelStart+0x48>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d109      	bne.n	800326a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003256:	f7ff ffbf 	bl	80031d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <osKernelStart+0x48>)
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003260:	f001 f87c 	bl	800435c <vTaskStartScheduler>
      stat = osOK;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	e002      	b.n	8003270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000574 	.word	0x20000574

08003280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003290:	f3ef 8305 	mrs	r3, IPSR
 8003294:	617b      	str	r3, [r7, #20]
  return(result);
 8003296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003298:	2b00      	cmp	r3, #0
 800329a:	d17e      	bne.n	800339a <osThreadNew+0x11a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d07b      	beq.n	800339a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032a6:	2318      	movs	r3, #24
 80032a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d045      	beq.n	8003346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <osThreadNew+0x48>
        name = attr->name;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <osThreadNew+0x6e>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b38      	cmp	r3, #56	; 0x38
 80032e0:	d805      	bhi.n	80032ee <osThreadNew+0x6e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <osThreadNew+0x72>
        return (NULL);
 80032ee:	2300      	movs	r3, #0
 80032f0:	e054      	b.n	800339c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <osThreadNew+0xa8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2bbb      	cmp	r3, #187	; 0xbb
 8003310:	d90a      	bls.n	8003328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <osThreadNew+0xa8>
        mem = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e010      	b.n	800334a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10c      	bne.n	800334a <osThreadNew+0xca>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <osThreadNew+0xca>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <osThreadNew+0xca>
          mem = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e001      	b.n	800334a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d110      	bne.n	8003372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003358:	9202      	str	r2, [sp, #8]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fe0c 	bl	8003f84 <xTaskCreateStatic>
 800336c:	4603      	mov	r3, r0
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e013      	b.n	800339a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d110      	bne.n	800339a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	b29a      	uxth	r2, r3
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fe57 	bl	800403e <xTaskCreate>
 8003390:	4603      	mov	r3, r0
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <osThreadNew+0x11a>
            hTask = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800339a:	693b      	ldr	r3, [r7, #16]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ac:	f3ef 8305 	mrs	r3, IPSR
 80033b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <osDelay+0x1c>
    stat = osErrorISR;
 80033b8:	f06f 0305 	mvn.w	r3, #5
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e007      	b.n	80033d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 ff92 	bl	80042f4 <vTaskDelay>
    }
  }

  return (stat);
 80033d0:	68fb      	ldr	r3, [r7, #12]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <vApplicationGetIdleTaskMemory+0x2c>)
 80033ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4a06      	ldr	r2, [pc, #24]	; (800340c <vApplicationGetIdleTaskMemory+0x30>)
 80033f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000578 	.word	0x20000578
 800340c:	20000634 	.word	0x20000634

08003410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a07      	ldr	r2, [pc, #28]	; (800343c <vApplicationGetTimerTaskMemory+0x2c>)
 8003420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <vApplicationGetTimerTaskMemory+0x30>)
 8003426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000834 	.word	0x20000834
 8003440:	200008f0 	.word	0x200008f0

08003444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0208 	add.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d103      	bne.n	8003506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e00c      	b.n	8003520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3308      	adds	r3, #8
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e002      	b.n	8003514 <vListInsert+0x2e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d2f6      	bcs.n	800350e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6892      	ldr	r2, [r2, #8]
 800356e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d103      	bne.n	800358c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1e5a      	subs	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035d6:	f002 f875 	bl	80056c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	441a      	add	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	3b01      	subs	r3, #1
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d114      	bne.n	8003656 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3310      	adds	r3, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f001 f929 	bl	8004890 <xTaskRemoveFromEventList>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <xQueueGenericReset+0xcc>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	e009      	b.n	800366a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3310      	adds	r3, #16
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fef2 	bl	8003444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff feed 	bl	8003444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800366a:	f002 f85b 	bl	8005724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	; 0x38
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <xQueueGenericCreateStatic+0x52>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <xQueueGenericCreateStatic+0x56>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <xQueueGenericCreateStatic+0x58>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	623b      	str	r3, [r7, #32]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <xQueueGenericCreateStatic+0x7e>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xQueueGenericCreateStatic+0x82>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueGenericCreateStatic+0x84>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61fb      	str	r3, [r7, #28]
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800371a:	2350      	movs	r3, #80	; 0x50
 800371c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b50      	cmp	r3, #80	; 0x50
 8003722:	d00a      	beq.n	800373a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61bb      	str	r3, [r7, #24]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800373a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800374e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f805 	bl	800376c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3730      	adds	r7, #48	; 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379a:	2101      	movs	r1, #1
 800379c:	69b8      	ldr	r0, [r7, #24]
 800379e:	f7ff ff05 	bl	80035ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	; 0x38
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueGenericSend+0x32>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <xQueueGenericSend+0x40>
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <xQueueGenericSend+0x44>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <xQueueGenericSend+0x46>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <xQueueGenericSend+0x60>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003810:	bf00      	nop
 8003812:	e7fe      	b.n	8003812 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d103      	bne.n	8003822 <xQueueGenericSend+0x6e>
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <xQueueGenericSend+0x72>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <xQueueGenericSend+0x74>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xQueueGenericSend+0x8e>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	623b      	str	r3, [r7, #32]
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003842:	f001 f9e7 	bl	8004c14 <xTaskGetSchedulerState>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <xQueueGenericSend+0x9e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xQueueGenericSend+0xa2>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericSend+0xa4>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericSend+0xbe>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61fb      	str	r3, [r7, #28]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003872:	f001 ff27 	bl	80056c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <xQueueGenericSend+0xd4>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d129      	bne.n	80038dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388e:	f000 fa0b 	bl	8003ca8 <prvCopyDataToQueue>
 8003892:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fff5 	bl	8004890 <xTaskRemoveFromEventList>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <xQueueGenericSend+0x1f8>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	e00a      	b.n	80038d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038c4:	4b39      	ldr	r3, [pc, #228]	; (80039ac <xQueueGenericSend+0x1f8>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038d4:	f001 ff26 	bl	8005724 <vPortExitCritical>
				return pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	e063      	b.n	80039a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038e2:	f001 ff1f 	bl	8005724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e05c      	b.n	80039a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f82f 	bl	8004958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038fe:	f001 ff11 	bl	8005724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003902:	f000 fd9b 	bl	800443c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003906:	f001 fedd 	bl	80056c4 <vPortEnterCritical>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003910:	b25b      	sxtb	r3, r3
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d103      	bne.n	8003920 <xQueueGenericSend+0x16c>
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003926:	b25b      	sxtb	r3, r3
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d103      	bne.n	8003936 <xQueueGenericSend+0x182>
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003936:	f001 fef5 	bl	8005724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800393a:	1d3a      	adds	r2, r7, #4
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f81e 	bl	8004984 <xTaskCheckForTimeOut>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d124      	bne.n	8003998 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800394e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003950:	f000 faa2 	bl	8003e98 <prvIsQueueFull>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	3310      	adds	r3, #16
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f000 ff44 	bl	80047f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396a:	f000 fa2d 	bl	8003dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800396e:	f000 fd73 	bl	8004458 <xTaskResumeAll>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f af7c 	bne.w	8003872 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <xQueueGenericSend+0x1f8>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	e772      	b.n	8003872 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800398c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800398e:	f000 fa1b 	bl	8003dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003992:	f000 fd61 	bl	8004458 <xTaskResumeAll>
 8003996:	e76c      	b.n	8003872 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399a:	f000 fa15 	bl	8003dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800399e:	f000 fd5b 	bl	8004458 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3738      	adds	r7, #56	; 0x38
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b090      	sub	sp, #64	; 0x40
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <xQueueGenericSendFromISR+0x3c>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <xQueueGenericSendFromISR+0x40>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <xQueueGenericSendFromISR+0x42>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d103      	bne.n	8003a1a <xQueueGenericSendFromISR+0x6a>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSendFromISR+0x6e>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSendFromISR+0x70>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	623b      	str	r3, [r7, #32]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a3a:	f001 ff25 	bl	8005888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	61fa      	str	r2, [r7, #28]
 8003a54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <xQueueGenericSendFromISR+0xbc>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d12f      	bne.n	8003acc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a82:	f000 f911 	bl	8003ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d112      	bne.n	8003ab6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fef7 	bl	8004890 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aba:	3301      	adds	r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003aca:	e001      	b.n	8003ad0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ada:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3740      	adds	r7, #64	; 0x40
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <xQueueReceive+0x30>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	623b      	str	r3, [r7, #32]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <xQueueReceive+0x3e>
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x42>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueReceive+0x44>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueReceive+0x5e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b46:	f001 f865 	bl	8004c14 <xTaskGetSchedulerState>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <xQueueReceive+0x6e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <xQueueReceive+0x72>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueReceive+0x74>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xQueueReceive+0x8e>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	61bb      	str	r3, [r7, #24]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b76:	f001 fda5 	bl	80056c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01f      	beq.n	8003bc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f000 f8f7 	bl	8003d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fe74 	bl	8004890 <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bbe:	f001 fdb1 	bl	8005724 <vPortExitCritical>
				return pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e069      	b.n	8003c9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bcc:	f001 fdaa 	bl	8005724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e062      	b.n	8003c9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 feba 	bl	8004958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f001 fd9c 	bl	8005724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fc26 	bl	800443c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f001 fd68 	bl	80056c4 <vPortEnterCritical>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x122>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d103      	bne.n	8003c20 <xQueueReceive+0x138>
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	f001 fd80 	bl	8005724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c24:	1d3a      	adds	r2, r7, #4
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fea9 	bl	8004984 <xTaskCheckForTimeOut>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d123      	bne.n	8003c80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f000 f917 	bl	8003e6c <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fdcf 	bl	80047f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c54:	f000 f8b8 	bl	8003dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c58:	f000 fbfe 	bl	8004458 <xTaskResumeAll>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d189      	bne.n	8003b76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e780      	b.n	8003b76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 f8a7 	bl	8003dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c7a:	f000 fbed 	bl	8004458 <xTaskResumeAll>
 8003c7e:	e77a      	b.n	8003b76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c82:	f000 f8a1 	bl	8003dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c86:	f000 fbe7 	bl	8004458 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8c:	f000 f8ee 	bl	8003e6c <prvIsQueueEmpty>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f43f af6f 	beq.w	8003b76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3730      	adds	r7, #48	; 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d14d      	bne.n	8003d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ffbc 	bl	8004c50 <xTaskPriorityDisinherit>
 8003cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	e043      	b.n	8003d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d119      	bne.n	8003d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6858      	ldr	r0, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	f002 f915 	bl	8005f22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	441a      	add	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d32b      	bcc.n	8003d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e026      	b.n	8003d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68d8      	ldr	r0, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	461a      	mov	r2, r3
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	f002 f8fb 	bl	8005f22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	425b      	negs	r3, r3
 8003d36:	441a      	add	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	425b      	negs	r3, r3
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d105      	bne.n	8003d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d303      	bcc.n	8003db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f002 f8b1 	bl	8005f22 <memcpy>
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dd0:	f001 fc78 	bl	80056c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ddc:	e011      	b.n	8003e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3324      	adds	r3, #36	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fd50 	bl	8004890 <xTaskRemoveFromEventList>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003df6:	f000 fe27 	bl	8004a48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	dce9      	bgt.n	8003dde <prvUnlockQueue+0x16>
 8003e0a:	e000      	b.n	8003e0e <prvUnlockQueue+0x46>
					break;
 8003e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	22ff      	movs	r2, #255	; 0xff
 8003e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e16:	f001 fc85 	bl	8005724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e1a:	f001 fc53 	bl	80056c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e26:	e011      	b.n	8003e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3310      	adds	r3, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fd2b 	bl	8004890 <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e40:	f000 fe02 	bl	8004a48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dce9      	bgt.n	8003e28 <prvUnlockQueue+0x60>
 8003e54:	e000      	b.n	8003e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e60:	f001 fc60 	bl	8005724 <vPortExitCritical>
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e74:	f001 fc26 	bl	80056c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e001      	b.n	8003e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e8a:	f001 fc4b 	bl	8005724 <vPortExitCritical>

	return xReturn;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea0:	f001 fc10 	bl	80056c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d102      	bne.n	8003eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e001      	b.n	8003eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f001 fc33 	bl	8005724 <vPortExitCritical>

	return xReturn;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e014      	b.n	8003f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ed8:	4a0f      	ldr	r2, [pc, #60]	; (8003f18 <vQueueAddToRegistry+0x50>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <vQueueAddToRegistry+0x50>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <vQueueAddToRegistry+0x50>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003efa:	e006      	b.n	8003f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b07      	cmp	r3, #7
 8003f06:	d9e7      	bls.n	8003ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000cf0 	.word	0x20000cf0

08003f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f2c:	f001 fbca 	bl	80056c4 <vPortEnterCritical>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d103      	bne.n	8003f46 <vQueueWaitForMessageRestricted+0x2a>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d103      	bne.n	8003f5c <vQueueWaitForMessageRestricted+0x40>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f5c:	f001 fbe2 	bl	8005724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fc61 	bl	8004838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff26 	bl	8003dc8 <prvUnlockQueue>
	}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af04      	add	r7, sp, #16
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xTaskCreateStatic+0x46>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	61fb      	str	r3, [r7, #28]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fca:	23bc      	movs	r3, #188	; 0xbc
 8003fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2bbc      	cmp	r3, #188	; 0xbc
 8003fd2:	d00a      	beq.n	8003fea <xTaskCreateStatic+0x66>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61bb      	str	r3, [r7, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01e      	beq.n	8004030 <xTaskCreateStatic+0xac>
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	2202      	movs	r2, #2
 8004006:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800400a:	2300      	movs	r3, #0
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f850 	bl	80040c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800402a:	f000 f8f3 	bl	8004214 <prvAddNewTaskToReadyList>
 800402e:	e001      	b.n	8004034 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004034:	697b      	ldr	r3, [r7, #20]
	}
 8004036:	4618      	mov	r0, r3
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800403e:	b580      	push	{r7, lr}
 8004040:	b08c      	sub	sp, #48	; 0x30
 8004042:	af04      	add	r7, sp, #16
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f001 fc58 	bl	8005908 <pvPortMalloc>
 8004058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004060:	20bc      	movs	r0, #188	; 0xbc
 8004062:	f001 fc51 	bl	8005908 <pvPortMalloc>
 8004066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
 8004074:	e005      	b.n	8004082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f001 fd12 	bl	8005aa0 <vPortFree>
 800407c:	e001      	b.n	8004082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	2300      	movs	r3, #0
 8004094:	9303      	str	r3, [sp, #12]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f80e 	bl	80040c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ac:	69f8      	ldr	r0, [r7, #28]
 80040ae:	f000 f8b1 	bl	8004214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e002      	b.n	80040be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295
 80040bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040be:	69bb      	ldr	r3, [r7, #24]
	}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	21a5      	movs	r1, #165	; 0xa5
 80040e2:	f001 ff2c 	bl	8005f3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040f0:	3b01      	subs	r3, #1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <prvInitialiseNewTask+0x58>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	617b      	str	r3, [r7, #20]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01f      	beq.n	8004166 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	e012      	b.n	8004152 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	7819      	ldrb	r1, [r3, #0]
 8004134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	3334      	adds	r3, #52	; 0x34
 800413c:	460a      	mov	r2, r1
 800413e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d9e9      	bls.n	800412c <prvInitialiseNewTask+0x64>
 8004158:	e000      	b.n	800415c <prvInitialiseNewTask+0x94>
			{
				break;
 800415a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004164:	e003      	b.n	800416e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	2b37      	cmp	r3, #55	; 0x37
 8004172:	d901      	bls.n	8004178 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004174:	2337      	movs	r3, #55	; 0x37
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	3304      	adds	r3, #4
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f978 	bl	8003484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	3318      	adds	r3, #24
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f973 	bl	8003484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	3354      	adds	r3, #84	; 0x54
 80041c8:	2260      	movs	r2, #96	; 0x60
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 feb6 	bl	8005f3e <memset>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <prvInitialiseNewTask+0x140>)
 80041d6:	659a      	str	r2, [r3, #88]	; 0x58
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <prvInitialiseNewTask+0x144>)
 80041dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <prvInitialiseNewTask+0x148>)
 80041e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f001 f941 	bl	8005470 <pxPortInitialiseStack>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08006e20 	.word	0x08006e20
 800420c:	08006e40 	.word	0x08006e40
 8004210:	08006e00 	.word	0x08006e00

08004214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800421c:	f001 fa52 	bl	80056c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 8004228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004232:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d110      	bne.n	8004262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004240:	f000 fc26 	bl	8004a90 <prvInitialiseTaskLists>
 8004244:	e00d      	b.n	8004262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <prvAddNewTaskToReadyList+0xcc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d802      	bhi.n	8004262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 800426a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <prvAddNewTaskToReadyList+0xd4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <prvAddNewTaskToReadyList+0x74>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <prvAddNewTaskToReadyList+0xd4>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <prvAddNewTaskToReadyList+0xd8>)
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7ff f8fd 	bl	800349e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042a4:	f001 fa3e 	bl	8005724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <prvAddNewTaskToReadyList+0xcc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d207      	bcs.n	80042ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvAddNewTaskToReadyList+0xdc>)
 80042c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20001204 	.word	0x20001204
 80042dc:	20000d30 	.word	0x20000d30
 80042e0:	20001210 	.word	0x20001210
 80042e4:	20001220 	.word	0x20001220
 80042e8:	2000120c 	.word	0x2000120c
 80042ec:	20000d34 	.word	0x20000d34
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <vTaskDelay+0x60>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <vTaskDelay+0x30>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60bb      	str	r3, [r7, #8]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004324:	f000 f88a 	bl	800443c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fcfe 	bl	8004d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004330:	f000 f892 	bl	8004458 <xTaskResumeAll>
 8004334:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <vTaskDelay+0x64>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	2000122c 	.word	0x2000122c
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800436a:	463a      	mov	r2, r7
 800436c:	1d39      	adds	r1, r7, #4
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff f832 	bl	80033dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	9202      	str	r2, [sp, #8]
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2300      	movs	r3, #0
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	460a      	mov	r2, r1
 800438a:	4924      	ldr	r1, [pc, #144]	; (800441c <vTaskStartScheduler+0xc0>)
 800438c:	4824      	ldr	r0, [pc, #144]	; (8004420 <vTaskStartScheduler+0xc4>)
 800438e:	f7ff fdf9 	bl	8003f84 <xTaskCreateStatic>
 8004392:	4603      	mov	r3, r0
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <vTaskStartScheduler+0xc8>)
 8004396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004398:	4b22      	ldr	r3, [pc, #136]	; (8004424 <vTaskStartScheduler+0xc8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e001      	b.n	80043aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043b0:	f000 fd10 	bl	8004dd4 <xTimerCreateTimerTask>
 80043b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d11b      	bne.n	80043f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <vTaskStartScheduler+0xcc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3354      	adds	r3, #84	; 0x54
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <vTaskStartScheduler+0xd0>)
 80043d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <vTaskStartScheduler+0xd4>)
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <vTaskStartScheduler+0xd8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <vTaskStartScheduler+0xdc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043ee:	f001 f8c7 	bl	8005580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043f2:	e00e      	b.n	8004412 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d10a      	bne.n	8004412 <vTaskStartScheduler+0xb6>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <vTaskStartScheduler+0xb4>
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	08006d80 	.word	0x08006d80
 8004420:	08004a61 	.word	0x08004a61
 8004424:	20001228 	.word	0x20001228
 8004428:	20000d30 	.word	0x20000d30
 800442c:	20000010 	.word	0x20000010
 8004430:	20001224 	.word	0x20001224
 8004434:	20001210 	.word	0x20001210
 8004438:	20001208 	.word	0x20001208

0800443c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <vTaskSuspendAll+0x18>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	4a03      	ldr	r2, [pc, #12]	; (8004454 <vTaskSuspendAll+0x18>)
 8004448:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	2000122c 	.word	0x2000122c

08004458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004466:	4b42      	ldr	r3, [pc, #264]	; (8004570 <xTaskResumeAll+0x118>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <xTaskResumeAll+0x2c>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	603b      	str	r3, [r7, #0]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004484:	f001 f91e 	bl	80056c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <xTaskResumeAll+0x118>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	4a38      	ldr	r2, [pc, #224]	; (8004570 <xTaskResumeAll+0x118>)
 8004490:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <xTaskResumeAll+0x118>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d162      	bne.n	8004560 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <xTaskResumeAll+0x11c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d05e      	beq.n	8004560 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044a2:	e02f      	b.n	8004504 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a4:	4b34      	ldr	r3, [pc, #208]	; (8004578 <xTaskResumeAll+0x120>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f851 	bl	8003558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff f84c 	bl	8003558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4b2d      	ldr	r3, [pc, #180]	; (800457c <xTaskResumeAll+0x124>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d903      	bls.n	80044d4 <xTaskResumeAll+0x7c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a2a      	ldr	r2, [pc, #168]	; (800457c <xTaskResumeAll+0x124>)
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4a27      	ldr	r2, [pc, #156]	; (8004580 <xTaskResumeAll+0x128>)
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f7fe ffd7 	bl	800349e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <xTaskResumeAll+0x12c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <xTaskResumeAll+0x130>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <xTaskResumeAll+0x120>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1cb      	bne.n	80044a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004512:	f000 fb5f 	bl	8004bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <xTaskResumeAll+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004522:	f000 f847 	bl	80045b4 <xTaskIncrementTick>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <xTaskResumeAll+0x130>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3b01      	subs	r3, #1
 8004536:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f1      	bne.n	8004522 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <xTaskResumeAll+0x134>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <xTaskResumeAll+0x130>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <xTaskResumeAll+0x138>)
 8004552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004560:	f001 f8e0 	bl	8005724 <vPortExitCritical>

	return xAlreadyYielded;
 8004564:	68bb      	ldr	r3, [r7, #8]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	2000122c 	.word	0x2000122c
 8004574:	20001204 	.word	0x20001204
 8004578:	200011c4 	.word	0x200011c4
 800457c:	2000120c 	.word	0x2000120c
 8004580:	20000d34 	.word	0x20000d34
 8004584:	20000d30 	.word	0x20000d30
 8004588:	20001218 	.word	0x20001218
 800458c:	20001214 	.word	0x20001214
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <xTaskGetTickCount+0x1c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20001208 	.word	0x20001208

080045b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045be:	4b4f      	ldr	r3, [pc, #316]	; (80046fc <xTaskIncrementTick+0x148>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 808f 	bne.w	80046e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045c8:	4b4d      	ldr	r3, [pc, #308]	; (8004700 <xTaskIncrementTick+0x14c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045d0:	4a4b      	ldr	r2, [pc, #300]	; (8004700 <xTaskIncrementTick+0x14c>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d120      	bne.n	800461e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045dc:	4b49      	ldr	r3, [pc, #292]	; (8004704 <xTaskIncrementTick+0x150>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <xTaskIncrementTick+0x48>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	603b      	str	r3, [r7, #0]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xTaskIncrementTick+0x46>
 80045fc:	4b41      	ldr	r3, [pc, #260]	; (8004704 <xTaskIncrementTick+0x150>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <xTaskIncrementTick+0x154>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <xTaskIncrementTick+0x150>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4a3f      	ldr	r2, [pc, #252]	; (8004708 <xTaskIncrementTick+0x154>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b3e      	ldr	r3, [pc, #248]	; (800470c <xTaskIncrementTick+0x158>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <xTaskIncrementTick+0x158>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	f000 fadb 	bl	8004bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800461e:	4b3c      	ldr	r3, [pc, #240]	; (8004710 <xTaskIncrementTick+0x15c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d349      	bcc.n	80046bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <xTaskIncrementTick+0x150>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004632:	4b37      	ldr	r3, [pc, #220]	; (8004710 <xTaskIncrementTick+0x15c>)
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	601a      	str	r2, [r3, #0]
					break;
 800463a:	e03f      	b.n	80046bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <xTaskIncrementTick+0x150>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d203      	bcs.n	800465c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004654:	4a2e      	ldr	r2, [pc, #184]	; (8004710 <xTaskIncrementTick+0x15c>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800465a:	e02f      	b.n	80046bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe ff79 	bl	8003558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe ff70 	bl	8003558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <xTaskIncrementTick+0x160>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d903      	bls.n	800468c <xTaskIncrementTick+0xd8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4a22      	ldr	r2, [pc, #136]	; (8004714 <xTaskIncrementTick+0x160>)
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <xTaskIncrementTick+0x164>)
 800469a:	441a      	add	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fe fefb 	bl	800349e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <xTaskIncrementTick+0x168>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3b8      	bcc.n	8004628 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ba:	e7b5      	b.n	8004628 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <xTaskIncrementTick+0x168>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c2:	4915      	ldr	r1, [pc, #84]	; (8004718 <xTaskIncrementTick+0x164>)
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d901      	bls.n	80046d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <xTaskIncrementTick+0x16c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e004      	b.n	80046f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <xTaskIncrementTick+0x170>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <xTaskIncrementTick+0x170>)
 80046ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046f0:	697b      	ldr	r3, [r7, #20]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	2000122c 	.word	0x2000122c
 8004700:	20001208 	.word	0x20001208
 8004704:	200011bc 	.word	0x200011bc
 8004708:	200011c0 	.word	0x200011c0
 800470c:	2000121c 	.word	0x2000121c
 8004710:	20001224 	.word	0x20001224
 8004714:	2000120c 	.word	0x2000120c
 8004718:	20000d34 	.word	0x20000d34
 800471c:	20000d30 	.word	0x20000d30
 8004720:	20001218 	.word	0x20001218
 8004724:	20001214 	.word	0x20001214

08004728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <vTaskSwitchContext+0xb0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <vTaskSwitchContext+0xb4>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800473c:	e046      	b.n	80047cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800473e:	4b27      	ldr	r3, [pc, #156]	; (80047dc <vTaskSwitchContext+0xb4>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <vTaskSwitchContext+0xb8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e010      	b.n	800476e <vTaskSwitchContext+0x46>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <vTaskSwitchContext+0x40>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vTaskSwitchContext+0x3e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	491d      	ldr	r1, [pc, #116]	; (80047e4 <vTaskSwitchContext+0xbc>)
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0e4      	beq.n	800474c <vTaskSwitchContext+0x24>
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <vTaskSwitchContext+0xbc>)
 800478e:	4413      	add	r3, r2
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3308      	adds	r3, #8
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d104      	bne.n	80047b2 <vTaskSwitchContext+0x8a>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <vTaskSwitchContext+0xc0>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <vTaskSwitchContext+0xb8>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <vTaskSwitchContext+0xc0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3354      	adds	r3, #84	; 0x54
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <vTaskSwitchContext+0xc4>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	2000122c 	.word	0x2000122c
 80047dc:	20001218 	.word	0x20001218
 80047e0:	2000120c 	.word	0x2000120c
 80047e4:	20000d34 	.word	0x20000d34
 80047e8:	20000d30 	.word	0x20000d30
 80047ec:	20000010 	.word	0x20000010

080047f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <vTaskPlaceOnEventList+0x44>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3318      	adds	r3, #24
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe fe61 	bl	80034e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004824:	2101      	movs	r1, #1
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	f000 fa80 	bl	8004d2c <prvAddCurrentTaskToDelayedList>
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000d30 	.word	0x20000d30

08004838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	617b      	str	r3, [r7, #20]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <vTaskPlaceOnEventListRestricted+0x54>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7fe fe18 	bl	800349e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
 8004878:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	68b8      	ldr	r0, [r7, #8]
 800487e:	f000 fa55 	bl	8004d2c <prvAddCurrentTaskToDelayedList>
	}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000d30 	.word	0x20000d30

08004890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60fb      	str	r3, [r7, #12]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fe49 	bl	8003558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <xTaskRemoveFromEventList+0xb0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11d      	bne.n	800490a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fe40 	bl	8003558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <xTaskRemoveFromEventList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d903      	bls.n	80048ec <xTaskRemoveFromEventList+0x5c>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a16      	ldr	r2, [pc, #88]	; (8004944 <xTaskRemoveFromEventList+0xb4>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <xTaskRemoveFromEventList+0xb8>)
 80048fa:	441a      	add	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fe fdcb 	bl	800349e <vListInsertEnd>
 8004908:	e005      	b.n	8004916 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3318      	adds	r3, #24
 800490e:	4619      	mov	r1, r3
 8004910:	480e      	ldr	r0, [pc, #56]	; (800494c <xTaskRemoveFromEventList+0xbc>)
 8004912:	f7fe fdc4 	bl	800349e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <xTaskRemoveFromEventList+0xc0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	429a      	cmp	r2, r3
 8004922:	d905      	bls.n	8004930 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <xTaskRemoveFromEventList+0xc4>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e001      	b.n	8004934 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004934:	697b      	ldr	r3, [r7, #20]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000122c 	.word	0x2000122c
 8004944:	2000120c 	.word	0x2000120c
 8004948:	20000d34 	.word	0x20000d34
 800494c:	200011c4 	.word	0x200011c4
 8004950:	20000d30 	.word	0x20000d30
 8004954:	20001218 	.word	0x20001218

08004958 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <vTaskInternalSetTimeOutState+0x24>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <vTaskInternalSetTimeOutState+0x28>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	605a      	str	r2, [r3, #4]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000121c 	.word	0x2000121c
 8004980:	20001208 	.word	0x20001208

08004984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	613b      	str	r3, [r7, #16]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fb      	str	r3, [r7, #12]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049c6:	f000 fe7d 	bl	80056c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049ca:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <xTaskCheckForTimeOut+0xbc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d102      	bne.n	80049ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e023      	b.n	8004a32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <xTaskCheckForTimeOut+0xc0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d007      	beq.n	8004a06 <xTaskCheckForTimeOut+0x82>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	e015      	b.n	8004a32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d20b      	bcs.n	8004a28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff9b 	bl	8004958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e004      	b.n	8004a32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a32:	f000 fe77 	bl	8005724 <vPortExitCritical>

	return xReturn;
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20001208 	.word	0x20001208
 8004a44:	2000121c 	.word	0x2000121c

08004a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <vTaskMissedYield+0x14>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20001218 	.word	0x20001218

08004a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a68:	f000 f852 	bl	8004b10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <prvIdleTask+0x28>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d9f9      	bls.n	8004a68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <prvIdleTask+0x2c>)
 8004a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a84:	e7f0      	b.n	8004a68 <prvIdleTask+0x8>
 8004a86:	bf00      	nop
 8004a88:	20000d34 	.word	0x20000d34
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	e00c      	b.n	8004ab6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <prvInitialiseTaskLists+0x60>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fcca 	bl	8003444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b37      	cmp	r3, #55	; 0x37
 8004aba:	d9ef      	bls.n	8004a9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004abc:	480d      	ldr	r0, [pc, #52]	; (8004af4 <prvInitialiseTaskLists+0x64>)
 8004abe:	f7fe fcc1 	bl	8003444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ac2:	480d      	ldr	r0, [pc, #52]	; (8004af8 <prvInitialiseTaskLists+0x68>)
 8004ac4:	f7fe fcbe 	bl	8003444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ac8:	480c      	ldr	r0, [pc, #48]	; (8004afc <prvInitialiseTaskLists+0x6c>)
 8004aca:	f7fe fcbb 	bl	8003444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ace:	480c      	ldr	r0, [pc, #48]	; (8004b00 <prvInitialiseTaskLists+0x70>)
 8004ad0:	f7fe fcb8 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ad4:	480b      	ldr	r0, [pc, #44]	; (8004b04 <prvInitialiseTaskLists+0x74>)
 8004ad6:	f7fe fcb5 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <prvInitialiseTaskLists+0x78>)
 8004adc:	4a05      	ldr	r2, [pc, #20]	; (8004af4 <prvInitialiseTaskLists+0x64>)
 8004ade:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvInitialiseTaskLists+0x7c>)
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <prvInitialiseTaskLists+0x68>)
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000d34 	.word	0x20000d34
 8004af4:	20001194 	.word	0x20001194
 8004af8:	200011a8 	.word	0x200011a8
 8004afc:	200011c4 	.word	0x200011c4
 8004b00:	200011d8 	.word	0x200011d8
 8004b04:	200011f0 	.word	0x200011f0
 8004b08:	200011bc 	.word	0x200011bc
 8004b0c:	200011c0 	.word	0x200011c0

08004b10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b16:	e019      	b.n	8004b4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b18:	f000 fdd4 	bl	80056c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <prvCheckTasksWaitingTermination+0x50>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fd15 	bl	8003558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <prvCheckTasksWaitingTermination+0x54>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <prvCheckTasksWaitingTermination+0x54>)
 8004b36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvCheckTasksWaitingTermination+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <prvCheckTasksWaitingTermination+0x58>)
 8004b40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b42:	f000 fdef 	bl	8005724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f810 	bl	8004b6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <prvCheckTasksWaitingTermination+0x58>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e1      	bne.n	8004b18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200011d8 	.word	0x200011d8
 8004b64:	20001204 	.word	0x20001204
 8004b68:	200011ec 	.word	0x200011ec

08004b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3354      	adds	r3, #84	; 0x54
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 faa3 	bl	80060c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d108      	bne.n	8004b9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 ff87 	bl	8005aa0 <vPortFree>
				vPortFree( pxTCB );
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 ff84 	bl	8005aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b98:	e018      	b.n	8004bcc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d103      	bne.n	8004bac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 ff7b 	bl	8005aa0 <vPortFree>
	}
 8004baa:	e00f      	b.n	8004bcc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d00a      	beq.n	8004bcc <prvDeleteTCB+0x60>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <prvDeleteTCB+0x5e>
	}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <prvResetNextTaskUnblockTime+0x38>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <prvResetNextTaskUnblockTime+0x3c>)
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bec:	e008      	b.n	8004c00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <prvResetNextTaskUnblockTime+0x38>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <prvResetNextTaskUnblockTime+0x3c>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	200011bc 	.word	0x200011bc
 8004c10:	20001224 	.word	0x20001224

08004c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <xTaskGetSchedulerState+0x34>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c22:	2301      	movs	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	e008      	b.n	8004c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <xTaskGetSchedulerState+0x38>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c30:	2302      	movs	r3, #2
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e001      	b.n	8004c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c3a:	687b      	ldr	r3, [r7, #4]
	}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	20001210 	.word	0x20001210
 8004c4c:	2000122c 	.word	0x2000122c

08004c50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d056      	beq.n	8004d14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <xTaskPriorityDisinherit+0xd0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d00a      	beq.n	8004c86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60bb      	str	r3, [r7, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d02c      	beq.n	8004d14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d128      	bne.n	8004d14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fc46 	bl	8003558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <xTaskPriorityDisinherit+0xd4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <xTaskPriorityDisinherit+0xa4>
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <xTaskPriorityDisinherit+0xd4>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <xTaskPriorityDisinherit+0xd8>)
 8004d02:	441a      	add	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fe fbc7 	bl	800349e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d14:	697b      	ldr	r3, [r7, #20]
	}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000d30 	.word	0x20000d30
 8004d24:	2000120c 	.word	0x2000120c
 8004d28:	20000d34 	.word	0x20000d34

08004d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fc08 	bl	8003558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d10a      	bne.n	8004d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4819      	ldr	r0, [pc, #100]	; (8004dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d60:	f7fe fb9d 	bl	800349e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d64:	e026      	b.n	8004db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d6e:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d209      	bcs.n	8004d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f7fe fbab 	bl	80034e6 <vListInsert>
}
 8004d90:	e010      	b.n	8004db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fba1 	bl	80034e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d202      	bcs.n	8004db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dae:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20001208 	.word	0x20001208
 8004dc0:	20000d30 	.word	0x20000d30
 8004dc4:	200011f0 	.word	0x200011f0
 8004dc8:	200011c0 	.word	0x200011c0
 8004dcc:	200011bc 	.word	0x200011bc
 8004dd0:	20001224 	.word	0x20001224

08004dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dde:	f000 fb07 	bl	80053f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <xTimerCreateTimerTask+0x80>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d021      	beq.n	8004e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004df2:	1d3a      	adds	r2, r7, #4
 8004df4:	f107 0108 	add.w	r1, r7, #8
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fb07 	bl	8003410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	9202      	str	r2, [sp, #8]
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	460a      	mov	r2, r1
 8004e14:	4910      	ldr	r1, [pc, #64]	; (8004e58 <xTimerCreateTimerTask+0x84>)
 8004e16:	4811      	ldr	r0, [pc, #68]	; (8004e5c <xTimerCreateTimerTask+0x88>)
 8004e18:	f7ff f8b4 	bl	8003f84 <xTaskCreateStatic>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <xTimerCreateTimerTask+0x8c>)
 8004e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e22:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <xTimerCreateTimerTask+0x8c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	613b      	str	r3, [r7, #16]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20001260 	.word	0x20001260
 8004e58:	08006d88 	.word	0x08006d88
 8004e5c:	08004f99 	.word	0x08004f99
 8004e60:	20001264 	.word	0x20001264

08004e64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	623b      	str	r3, [r7, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <xTimerGenericCommand+0x98>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02a      	beq.n	8004ef0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	dc18      	bgt.n	8004ede <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004eac:	f7ff feb2 	bl	8004c14 <xTaskGetSchedulerState>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d109      	bne.n	8004eca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <xTimerGenericCommand+0x98>)
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f107 0110 	add.w	r1, r7, #16
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	f7fe fc77 	bl	80037b4 <xQueueGenericSend>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ec8:	e012      	b.n	8004ef0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <xTimerGenericCommand+0x98>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f107 0110 	add.w	r1, r7, #16
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f7fe fc6d 	bl	80037b4 <xQueueGenericSend>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24
 8004edc:	e008      	b.n	8004ef0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <xTimerGenericCommand+0x98>)
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f107 0110 	add.w	r1, r7, #16
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	f7fe fd61 	bl	80039b0 <xQueueGenericSendFromISR>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	; 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20001260 	.word	0x20001260

08004f00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0a:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <prvProcessExpiredTimer+0x94>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fb1d 	bl	8003558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d022      	beq.n	8004f72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	18d1      	adds	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	6978      	ldr	r0, [r7, #20]
 8004f3a:	f000 f8d1 	bl	80050e0 <prvInsertTimerInActiveList>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01f      	beq.n	8004f84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f7ff ff88 	bl	8004e64 <xTimerGenericCommand>
 8004f54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d113      	bne.n	8004f84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60fb      	str	r3, [r7, #12]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	6978      	ldr	r0, [r7, #20]
 8004f8a:	4798      	blx	r3
}
 8004f8c:	bf00      	nop
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20001258 	.word	0x20001258

08004f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f857 	bl	8005058 <prvGetNextExpireTime>
 8004faa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f803 	bl	8004fbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fb6:	f000 f8d5 	bl	8005164 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fba:	e7f1      	b.n	8004fa0 <prvTimerTask+0x8>

08004fbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fc6:	f7ff fa39 	bl	800443c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f866 	bl	80050a0 <prvSampleTimeNow>
 8004fd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d130      	bne.n	800503e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <prvProcessTimerOrBlockTask+0x3c>
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d806      	bhi.n	8004ff8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fea:	f7ff fa35 	bl	8004458 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff85 	bl	8004f00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ff6:	e024      	b.n	8005042 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <prvProcessTimerOrBlockTask+0x90>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <prvProcessTimerOrBlockTask+0x50>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <prvProcessTimerOrBlockTask+0x52>
 800500c:	2300      	movs	r3, #0
 800500e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <prvProcessTimerOrBlockTask+0x94>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	f7fe ff7d 	bl	8003f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005022:	f7ff fa19 	bl	8004458 <xTaskResumeAll>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvProcessTimerOrBlockTask+0x98>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
}
 800503c:	e001      	b.n	8005042 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800503e:	f7ff fa0b 	bl	8004458 <xTaskResumeAll>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	2000125c 	.word	0x2000125c
 8005050:	20001260 	.word	0x20001260
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005060:	4b0e      	ldr	r3, [pc, #56]	; (800509c <prvGetNextExpireTime+0x44>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <prvGetNextExpireTime+0x16>
 800506a:	2201      	movs	r2, #1
 800506c:	e000      	b.n	8005070 <prvGetNextExpireTime+0x18>
 800506e:	2200      	movs	r2, #0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <prvGetNextExpireTime+0x44>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e001      	b.n	800508c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20001258 	.word	0x20001258

080050a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050a8:	f7ff fa74 	bl	8004594 <xTaskGetTickCount>
 80050ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <prvSampleTimeNow+0x3c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d205      	bcs.n	80050c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050b8:	f000 f936 	bl	8005328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e002      	b.n	80050ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050ca:	4a04      	ldr	r2, [pc, #16]	; (80050dc <prvSampleTimeNow+0x3c>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050d0:	68fb      	ldr	r3, [r7, #12]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001268 	.word	0x20001268

080050e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d812      	bhi.n	800512c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d302      	bcc.n	800511a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e01b      	b.n	8005152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <prvInsertTimerInActiveList+0x7c>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe f9de 	bl	80034e6 <vListInsert>
 800512a:	e012      	b.n	8005152 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d206      	bcs.n	8005142 <prvInsertTimerInActiveList+0x62>
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800513c:	2301      	movs	r3, #1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e007      	b.n	8005152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <prvInsertTimerInActiveList+0x80>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3304      	adds	r3, #4
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7fe f9ca 	bl	80034e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	2000125c 	.word	0x2000125c
 8005160:	20001258 	.word	0x20001258

08005164 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800516a:	e0ca      	b.n	8005302 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	da18      	bge.n	80051a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005172:	1d3b      	adds	r3, r7, #4
 8005174:	3304      	adds	r3, #4
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	61fb      	str	r3, [r7, #28]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	6850      	ldr	r0, [r2, #4]
 800519c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f2c0 80aa 	blt.w	8005300 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	3304      	adds	r3, #4
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe f9cb 	bl	8003558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051c2:	463b      	mov	r3, r7
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ff6b 	bl	80050a0 <prvSampleTimeNow>
 80051ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	f200 8097 	bhi.w	8005302 <prvProcessReceivedCommands+0x19e>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <prvProcessReceivedCommands+0x78>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005205 	.word	0x08005205
 80051e0:	08005205 	.word	0x08005205
 80051e4:	08005205 	.word	0x08005205
 80051e8:	08005279 	.word	0x08005279
 80051ec:	0800528d 	.word	0x0800528d
 80051f0:	080052d7 	.word	0x080052d7
 80051f4:	08005205 	.word	0x08005205
 80051f8:	08005205 	.word	0x08005205
 80051fc:	08005279 	.word	0x08005279
 8005200:	0800528d 	.word	0x0800528d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	18d1      	adds	r1, r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005224:	f7ff ff5c 	bl	80050e0 <prvInsertTimerInActiveList>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d069      	beq.n	8005302 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05e      	beq.n	8005302 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	441a      	add	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	2300      	movs	r3, #0
 8005252:	2100      	movs	r1, #0
 8005254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005256:	f7ff fe05 	bl	8004e64 <xTimerGenericCommand>
 800525a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d14f      	bne.n	8005302 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	61bb      	str	r3, [r7, #24]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800528a:	e03a      	b.n	8005302 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	617b      	str	r3, [r7, #20]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	18d1      	adds	r1, r2, r3
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d0:	f7ff ff06 	bl	80050e0 <prvInsertTimerInActiveList>
					break;
 80052d4:	e015      	b.n	8005302 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80052e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e6:	f000 fbdb 	bl	8005aa0 <vPortFree>
 80052ea:	e00a      	b.n	8005302 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052fe:	e000      	b.n	8005302 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005300:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <prvProcessReceivedCommands+0x1c0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1d39      	adds	r1, r7, #4
 8005308:	2200      	movs	r2, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fbec 	bl	8003ae8 <xQueueReceive>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	f47f af2a 	bne.w	800516c <prvProcessReceivedCommands+0x8>
	}
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	3730      	adds	r7, #48	; 0x30
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20001260 	.word	0x20001260

08005328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800532e:	e048      	b.n	80053c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe f905 	bl	8003558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02e      	beq.n	80053c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	d90e      	bls.n	8005394 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005382:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fe f8aa 	bl	80034e6 <vListInsert>
 8005392:	e016      	b.n	80053c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005394:	2300      	movs	r3, #0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	2100      	movs	r1, #0
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff fd60 	bl	8004e64 <xTimerGenericCommand>
 80053a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	603b      	str	r3, [r7, #0]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1b1      	bne.n	8005330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <prvSwitchTimerLists+0xc4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <prvSwitchTimerLists+0xc0>)
 80053d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <prvSwitchTimerLists+0xc4>)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6013      	str	r3, [r2, #0]
}
 80053e0:	bf00      	nop
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20001258 	.word	0x20001258
 80053ec:	2000125c 	.word	0x2000125c

080053f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053f6:	f000 f965 	bl	80056c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053fa:	4b15      	ldr	r3, [pc, #84]	; (8005450 <prvCheckForValidListAndQueue+0x60>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d120      	bne.n	8005444 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005402:	4814      	ldr	r0, [pc, #80]	; (8005454 <prvCheckForValidListAndQueue+0x64>)
 8005404:	f7fe f81e 	bl	8003444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005408:	4813      	ldr	r0, [pc, #76]	; (8005458 <prvCheckForValidListAndQueue+0x68>)
 800540a:	f7fe f81b 	bl	8003444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <prvCheckForValidListAndQueue+0x6c>)
 8005410:	4a10      	ldr	r2, [pc, #64]	; (8005454 <prvCheckForValidListAndQueue+0x64>)
 8005412:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <prvCheckForValidListAndQueue+0x70>)
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <prvCheckForValidListAndQueue+0x68>)
 8005418:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <prvCheckForValidListAndQueue+0x74>)
 8005420:	4a11      	ldr	r2, [pc, #68]	; (8005468 <prvCheckForValidListAndQueue+0x78>)
 8005422:	2110      	movs	r1, #16
 8005424:	200a      	movs	r0, #10
 8005426:	f7fe f929 	bl	800367c <xQueueGenericCreateStatic>
 800542a:	4603      	mov	r3, r0
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <prvCheckForValidListAndQueue+0x60>)
 800542e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <prvCheckForValidListAndQueue+0x60>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <prvCheckForValidListAndQueue+0x60>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	490b      	ldr	r1, [pc, #44]	; (800546c <prvCheckForValidListAndQueue+0x7c>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe fd42 	bl	8003ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005444:	f000 f96e 	bl	8005724 <vPortExitCritical>
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20001260 	.word	0x20001260
 8005454:	20001230 	.word	0x20001230
 8005458:	20001244 	.word	0x20001244
 800545c:	20001258 	.word	0x20001258
 8005460:	2000125c 	.word	0x2000125c
 8005464:	2000130c 	.word	0x2000130c
 8005468:	2000126c 	.word	0x2000126c
 800546c:	08006d90 	.word	0x08006d90

08005470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3b04      	subs	r3, #4
 8005480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3b04      	subs	r3, #4
 800548e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3b04      	subs	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054a0:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <pxPortInitialiseStack+0x64>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3b14      	subs	r3, #20
 80054aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3b04      	subs	r3, #4
 80054b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f06f 0202 	mvn.w	r2, #2
 80054be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b20      	subs	r3, #32
 80054c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	080054d9 	.word	0x080054d9

080054d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <prvTaskExitError+0x54>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d00a      	beq.n	8005502 <prvTaskExitError+0x2a>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <prvTaskExitError+0x28>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	60bb      	str	r3, [r7, #8]
}
 8005514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005516:	bf00      	nop
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0fc      	beq.n	8005518 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c

08005530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <pxCurrentTCBConst2>)
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	f380 8809 	msr	PSP, r0
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	4770      	bx	lr
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst2>:
 8005550:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop

08005558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005558:	4808      	ldr	r0, [pc, #32]	; (800557c <prvPortStartFirstTask+0x24>)
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	6800      	ldr	r0, [r0, #0]
 800555e:	f380 8808 	msr	MSP, r0
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8814 	msr	CONTROL, r0
 800556a:	b662      	cpsie	i
 800556c:	b661      	cpsie	f
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	df00      	svc	0
 8005578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800557a:	bf00      	nop
 800557c:	e000ed08 	.word	0xe000ed08

08005580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005586:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <xPortStartScheduler+0x120>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a46      	ldr	r2, [pc, #280]	; (80056a4 <xPortStartScheduler+0x124>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10a      	bne.n	80055a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <xPortStartScheduler+0x120>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a3f      	ldr	r2, [pc, #252]	; (80056a8 <xPortStartScheduler+0x128>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10a      	bne.n	80055c6 <xPortStartScheduler+0x46>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055c6:	4b39      	ldr	r3, [pc, #228]	; (80056ac <xPortStartScheduler+0x12c>)
 80055c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <xPortStartScheduler+0x130>)
 80055ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055ee:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <xPortStartScheduler+0x134>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f4:	e009      	b.n	800560a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80055f6:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <xPortStartScheduler+0x134>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <xPortStartScheduler+0x134>)
 80055fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d0ef      	beq.n	80055f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005616:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <xPortStartScheduler+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1c3 0307 	rsb	r3, r3, #7
 800561e:	2b04      	cmp	r3, #4
 8005620:	d00a      	beq.n	8005638 <xPortStartScheduler+0xb8>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <xPortStartScheduler+0x134>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <xPortStartScheduler+0x134>)
 8005640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <xPortStartScheduler+0x134>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <xPortStartScheduler+0x134>)
 800564c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005656:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <xPortStartScheduler+0x138>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <xPortStartScheduler+0x138>)
 800565c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <xPortStartScheduler+0x138>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <xPortStartScheduler+0x138>)
 8005668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800566c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800566e:	f000 f8dd 	bl	800582c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <xPortStartScheduler+0x13c>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005678:	f000 f8fc 	bl	8005874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <xPortStartScheduler+0x140>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <xPortStartScheduler+0x140>)
 8005682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005688:	f7ff ff66 	bl	8005558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800568c:	f7ff f84c 	bl	8004728 <vTaskSwitchContext>
	prvTaskExitError();
 8005690:	f7ff ff22 	bl	80054d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	e000ed00 	.word	0xe000ed00
 80056a4:	410fc271 	.word	0x410fc271
 80056a8:	410fc270 	.word	0x410fc270
 80056ac:	e000e400 	.word	0xe000e400
 80056b0:	2000135c 	.word	0x2000135c
 80056b4:	20001360 	.word	0x20001360
 80056b8:	e000ed20 	.word	0xe000ed20
 80056bc:	2000000c 	.word	0x2000000c
 80056c0:	e000ef34 	.word	0xe000ef34

080056c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	607b      	str	r3, [r7, #4]
}
 80056dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <vPortEnterCritical+0x58>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	4a0d      	ldr	r2, [pc, #52]	; (800571c <vPortEnterCritical+0x58>)
 80056e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <vPortEnterCritical+0x58>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10f      	bne.n	8005710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <vPortEnterCritical+0x5c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <vPortEnterCritical+0x4c>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	603b      	str	r3, [r7, #0]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <vPortEnterCritical+0x4a>
	}
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	2000000c 	.word	0x2000000c
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <vPortExitCritical+0x50>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <vPortExitCritical+0x24>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	607b      	str	r3, [r7, #4]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <vPortExitCritical+0x50>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3b01      	subs	r3, #1
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <vPortExitCritical+0x50>)
 8005750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <vPortExitCritical+0x50>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <vPortExitCritical+0x42>
 800575a:	2300      	movs	r3, #0
 800575c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f383 8811 	msr	BASEPRI, r3
}
 8005764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000000c 	.word	0x2000000c
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <pxCurrentTCBConst>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f01e 0f10 	tst.w	lr, #16
 8005790:	bf08      	it	eq
 8005792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f7fe ffba 	bl	8004728 <vTaskSwitchContext>
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f380 8811 	msr	BASEPRI, r0
 80057bc:	bc09      	pop	{r0, r3}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	f01e 0f10 	tst.w	lr, #16
 80057ca:	bf08      	it	eq
 80057cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057d0:	f380 8809 	msr	PSP, r0
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst>:
 80057e0:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005802:	f7fe fed7 	bl	80045b4 <xTaskIncrementTick>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <xPortSysTickHandler+0x40>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f383 8811 	msr	BASEPRI, r3
}
 800581e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <vPortSetupTimerInterrupt+0x38>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <vPortSetupTimerInterrupt+0x3c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <vPortSetupTimerInterrupt+0x40>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	099b      	lsrs	r3, r3, #6
 8005848:	4a09      	ldr	r2, [pc, #36]	; (8005870 <vPortSetupTimerInterrupt+0x44>)
 800584a:	3b01      	subs	r3, #1
 800584c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800584e:	4b04      	ldr	r3, [pc, #16]	; (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000e010 	.word	0xe000e010
 8005864:	e000e018 	.word	0xe000e018
 8005868:	20000000 	.word	0x20000000
 800586c:	10624dd3 	.word	0x10624dd3
 8005870:	e000e014 	.word	0xe000e014

08005874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005884 <vPortEnableVFP+0x10>
 8005878:	6801      	ldr	r1, [r0, #0]
 800587a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800587e:	6001      	str	r1, [r0, #0]
 8005880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005882:	bf00      	nop
 8005884:	e000ed88 	.word	0xe000ed88

08005888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800588e:	f3ef 8305 	mrs	r3, IPSR
 8005892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d914      	bls.n	80058c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800589a:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <vPortValidateInterruptPriority+0x70>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <vPortValidateInterruptPriority+0x74>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	7afa      	ldrb	r2, [r7, #11]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d20a      	bcs.n	80058c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	607b      	str	r3, [r7, #4]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <vPortValidateInterruptPriority+0x78>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058cc:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <vPortValidateInterruptPriority+0x7c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d90a      	bls.n	80058ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	603b      	str	r3, [r7, #0]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <vPortValidateInterruptPriority+0x60>
	}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	e000e3f0 	.word	0xe000e3f0
 80058fc:	2000135c 	.word	0x2000135c
 8005900:	e000ed0c 	.word	0xe000ed0c
 8005904:	20001360 	.word	0x20001360

08005908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005914:	f7fe fd92 	bl	800443c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005918:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <pvPortMalloc+0x180>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005920:	f000 f920 	bl	8005b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005924:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <pvPortMalloc+0x184>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8093 	bne.w	8005a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01d      	beq.n	8005974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005938:	2208      	movs	r2, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f023 0307 	bic.w	r3, r3, #7
 8005950:	3308      	adds	r3, #8
 8005952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <pvPortMalloc+0x6c>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d06e      	beq.n	8005a58 <pvPortMalloc+0x150>
 800597a:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <pvPortMalloc+0x188>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d869      	bhi.n	8005a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005984:	4b43      	ldr	r3, [pc, #268]	; (8005a94 <pvPortMalloc+0x18c>)
 8005986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005988:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <pvPortMalloc+0x18c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800598e:	e004      	b.n	800599a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <pvPortMalloc+0xa4>
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f1      	bne.n	8005990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <pvPortMalloc+0x180>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d050      	beq.n	8005a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2208      	movs	r2, #8
 80059bc:	4413      	add	r3, r2
 80059be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	2308      	movs	r3, #8
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d91f      	bls.n	8005a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <pvPortMalloc+0xf8>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	613b      	str	r3, [r7, #16]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a12:	69b8      	ldr	r0, [r7, #24]
 8005a14:	f000 f908 	bl	8005c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <pvPortMalloc+0x188>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <pvPortMalloc+0x188>)
 8005a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <pvPortMalloc+0x188>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <pvPortMalloc+0x190>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d203      	bcs.n	8005a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <pvPortMalloc+0x188>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <pvPortMalloc+0x190>)
 8005a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <pvPortMalloc+0x184>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <pvPortMalloc+0x194>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <pvPortMalloc+0x194>)
 8005a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a58:	f7fe fcfe 	bl	8004458 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <pvPortMalloc+0x174>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	60fb      	str	r3, [r7, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <pvPortMalloc+0x172>
	return pvReturn;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20004f6c 	.word	0x20004f6c
 8005a8c:	20004f80 	.word	0x20004f80
 8005a90:	20004f70 	.word	0x20004f70
 8005a94:	20004f64 	.word	0x20004f64
 8005a98:	20004f74 	.word	0x20004f74
 8005a9c:	20004f78 	.word	0x20004f78

08005aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04d      	beq.n	8005b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <vPortFree+0xb8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <vPortFree+0x44>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60fb      	str	r3, [r7, #12]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <vPortFree+0x62>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	60bb      	str	r3, [r7, #8]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <vPortFree+0xb8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11a      	bne.n	8005b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <vPortFree+0xb8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b28:	f7fe fc88 	bl	800443c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <vPortFree+0xbc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4413      	add	r3, r2
 8005b36:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <vPortFree+0xbc>)
 8005b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b3a:	6938      	ldr	r0, [r7, #16]
 8005b3c:	f000 f874 	bl	8005c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <vPortFree+0xc0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <vPortFree+0xc0>)
 8005b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b4a:	f7fe fc85 	bl	8004458 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20004f80 	.word	0x20004f80
 8005b5c:	20004f70 	.word	0x20004f70
 8005b60:	20004f7c 	.word	0x20004f7c

08005b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b70:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <prvHeapInit+0xac>)
 8005b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3307      	adds	r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <prvHeapInit+0xac>)
 8005b94:	4413      	add	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <prvHeapInit+0xb0>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <prvHeapInit+0xb0>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <prvHeapInit+0xb4>)
 8005bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <prvHeapInit+0xb4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <prvHeapInit+0xb4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <prvHeapInit+0xb4>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <prvHeapInit+0xb8>)
 8005bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <prvHeapInit+0xbc>)
 8005bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <prvHeapInit+0xc0>)
 8005bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20001364 	.word	0x20001364
 8005c14:	20004f64 	.word	0x20004f64
 8005c18:	20004f6c 	.word	0x20004f6c
 8005c1c:	20004f74 	.word	0x20004f74
 8005c20:	20004f70 	.word	0x20004f70
 8005c24:	20004f80 	.word	0x20004f80

08005c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c30:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <prvInsertBlockIntoFreeList+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e002      	b.n	8005c3c <prvInsertBlockIntoFreeList+0x14>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d8f7      	bhi.n	8005c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d108      	bne.n	8005c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d118      	bne.n	8005cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d00d      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e008      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e003      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d002      	beq.n	8005cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20004f64 	.word	0x20004f64
 8005cd8:	20004f6c 	.word	0x20004f6c

08005cdc <__errno>:
 8005cdc:	4b01      	ldr	r3, [pc, #4]	; (8005ce4 <__errno+0x8>)
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000010 	.word	0x20000010

08005ce8 <std>:
 8005ce8:	2300      	movs	r3, #0
 8005cea:	b510      	push	{r4, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cf6:	6083      	str	r3, [r0, #8]
 8005cf8:	8181      	strh	r1, [r0, #12]
 8005cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8005cfc:	81c2      	strh	r2, [r0, #14]
 8005cfe:	6183      	str	r3, [r0, #24]
 8005d00:	4619      	mov	r1, r3
 8005d02:	2208      	movs	r2, #8
 8005d04:	305c      	adds	r0, #92	; 0x5c
 8005d06:	f000 f91a 	bl	8005f3e <memset>
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <std+0x38>)
 8005d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <std+0x3c>)
 8005d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <std+0x40>)
 8005d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <std+0x44>)
 8005d18:	6224      	str	r4, [r4, #32]
 8005d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	bf00      	nop
 8005d20:	0800619d 	.word	0x0800619d
 8005d24:	080061bf 	.word	0x080061bf
 8005d28:	080061f7 	.word	0x080061f7
 8005d2c:	0800621b 	.word	0x0800621b

08005d30 <_cleanup_r>:
 8005d30:	4901      	ldr	r1, [pc, #4]	; (8005d38 <_cleanup_r+0x8>)
 8005d32:	f000 b8af 	b.w	8005e94 <_fwalk_reent>
 8005d36:	bf00      	nop
 8005d38:	08006375 	.word	0x08006375

08005d3c <__sfmoreglue>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	2268      	movs	r2, #104	; 0x68
 8005d40:	1e4d      	subs	r5, r1, #1
 8005d42:	4355      	muls	r5, r2
 8005d44:	460e      	mov	r6, r1
 8005d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d4a:	f000 f921 	bl	8005f90 <_malloc_r>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	b140      	cbz	r0, 8005d64 <__sfmoreglue+0x28>
 8005d52:	2100      	movs	r1, #0
 8005d54:	e9c0 1600 	strd	r1, r6, [r0]
 8005d58:	300c      	adds	r0, #12
 8005d5a:	60a0      	str	r0, [r4, #8]
 8005d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d60:	f000 f8ed 	bl	8005f3e <memset>
 8005d64:	4620      	mov	r0, r4
 8005d66:	bd70      	pop	{r4, r5, r6, pc}

08005d68 <__sfp_lock_acquire>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__sfp_lock_acquire+0x8>)
 8005d6a:	f000 b8d8 	b.w	8005f1e <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20004f85 	.word	0x20004f85

08005d74 <__sfp_lock_release>:
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <__sfp_lock_release+0x8>)
 8005d76:	f000 b8d3 	b.w	8005f20 <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	20004f85 	.word	0x20004f85

08005d80 <__sinit_lock_acquire>:
 8005d80:	4801      	ldr	r0, [pc, #4]	; (8005d88 <__sinit_lock_acquire+0x8>)
 8005d82:	f000 b8cc 	b.w	8005f1e <__retarget_lock_acquire_recursive>
 8005d86:	bf00      	nop
 8005d88:	20004f86 	.word	0x20004f86

08005d8c <__sinit_lock_release>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <__sinit_lock_release+0x8>)
 8005d8e:	f000 b8c7 	b.w	8005f20 <__retarget_lock_release_recursive>
 8005d92:	bf00      	nop
 8005d94:	20004f86 	.word	0x20004f86

08005d98 <__sinit>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	f7ff fff0 	bl	8005d80 <__sinit_lock_acquire>
 8005da0:	69a3      	ldr	r3, [r4, #24]
 8005da2:	b11b      	cbz	r3, 8005dac <__sinit+0x14>
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da8:	f7ff bff0 	b.w	8005d8c <__sinit_lock_release>
 8005dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005db0:	6523      	str	r3, [r4, #80]	; 0x50
 8005db2:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <__sinit+0x68>)
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <__sinit+0x6c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	bf04      	itt	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	61a3      	streq	r3, [r4, #24]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f820 	bl	8005e08 <__sfp>
 8005dc8:	6060      	str	r0, [r4, #4]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f81c 	bl	8005e08 <__sfp>
 8005dd0:	60a0      	str	r0, [r4, #8]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f818 	bl	8005e08 <__sfp>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60e0      	str	r0, [r4, #12]
 8005ddc:	2104      	movs	r1, #4
 8005dde:	6860      	ldr	r0, [r4, #4]
 8005de0:	f7ff ff82 	bl	8005ce8 <std>
 8005de4:	68a0      	ldr	r0, [r4, #8]
 8005de6:	2201      	movs	r2, #1
 8005de8:	2109      	movs	r1, #9
 8005dea:	f7ff ff7d 	bl	8005ce8 <std>
 8005dee:	68e0      	ldr	r0, [r4, #12]
 8005df0:	2202      	movs	r2, #2
 8005df2:	2112      	movs	r1, #18
 8005df4:	f7ff ff78 	bl	8005ce8 <std>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	61a3      	str	r3, [r4, #24]
 8005dfc:	e7d2      	b.n	8005da4 <__sinit+0xc>
 8005dfe:	bf00      	nop
 8005e00:	08006e60 	.word	0x08006e60
 8005e04:	08005d31 	.word	0x08005d31

08005e08 <__sfp>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	f7ff ffac 	bl	8005d68 <__sfp_lock_acquire>
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <__sfp+0x84>)
 8005e12:	681e      	ldr	r6, [r3, #0]
 8005e14:	69b3      	ldr	r3, [r6, #24]
 8005e16:	b913      	cbnz	r3, 8005e1e <__sfp+0x16>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff ffbd 	bl	8005d98 <__sinit>
 8005e1e:	3648      	adds	r6, #72	; 0x48
 8005e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	d503      	bpl.n	8005e30 <__sfp+0x28>
 8005e28:	6833      	ldr	r3, [r6, #0]
 8005e2a:	b30b      	cbz	r3, 8005e70 <__sfp+0x68>
 8005e2c:	6836      	ldr	r6, [r6, #0]
 8005e2e:	e7f7      	b.n	8005e20 <__sfp+0x18>
 8005e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e34:	b9d5      	cbnz	r5, 8005e6c <__sfp+0x64>
 8005e36:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <__sfp+0x88>)
 8005e38:	60e3      	str	r3, [r4, #12]
 8005e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8005e40:	f000 f86c 	bl	8005f1c <__retarget_lock_init_recursive>
 8005e44:	f7ff ff96 	bl	8005d74 <__sfp_lock_release>
 8005e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e50:	6025      	str	r5, [r4, #0]
 8005e52:	61a5      	str	r5, [r4, #24]
 8005e54:	2208      	movs	r2, #8
 8005e56:	4629      	mov	r1, r5
 8005e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e5c:	f000 f86f 	bl	8005f3e <memset>
 8005e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	3468      	adds	r4, #104	; 0x68
 8005e6e:	e7d9      	b.n	8005e24 <__sfp+0x1c>
 8005e70:	2104      	movs	r1, #4
 8005e72:	4638      	mov	r0, r7
 8005e74:	f7ff ff62 	bl	8005d3c <__sfmoreglue>
 8005e78:	4604      	mov	r4, r0
 8005e7a:	6030      	str	r0, [r6, #0]
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d1d5      	bne.n	8005e2c <__sfp+0x24>
 8005e80:	f7ff ff78 	bl	8005d74 <__sfp_lock_release>
 8005e84:	230c      	movs	r3, #12
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	e7ee      	b.n	8005e68 <__sfp+0x60>
 8005e8a:	bf00      	nop
 8005e8c:	08006e60 	.word	0x08006e60
 8005e90:	ffff0001 	.word	0xffff0001

08005e94 <_fwalk_reent>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4606      	mov	r6, r0
 8005e9a:	4688      	mov	r8, r1
 8005e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea0:	2700      	movs	r7, #0
 8005ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8005eaa:	d505      	bpl.n	8005eb8 <_fwalk_reent+0x24>
 8005eac:	6824      	ldr	r4, [r4, #0]
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	d1f7      	bne.n	8005ea2 <_fwalk_reent+0xe>
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb8:	89ab      	ldrh	r3, [r5, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d907      	bls.n	8005ece <_fwalk_reent+0x3a>
 8005ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	d003      	beq.n	8005ece <_fwalk_reent+0x3a>
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	4630      	mov	r0, r6
 8005eca:	47c0      	blx	r8
 8005ecc:	4307      	orrs	r7, r0
 8005ece:	3568      	adds	r5, #104	; 0x68
 8005ed0:	e7e9      	b.n	8005ea6 <_fwalk_reent+0x12>
	...

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 ff32 	bl	8006d50 <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	08006ea0 	.word	0x08006ea0
 8005f10:	08006ea0 	.word	0x08006ea0
 8005f14:	08006ea0 	.word	0x08006ea0
 8005f18:	08006ea4 	.word	0x08006ea4

08005f1c <__retarget_lock_init_recursive>:
 8005f1c:	4770      	bx	lr

08005f1e <__retarget_lock_acquire_recursive>:
 8005f1e:	4770      	bx	lr

08005f20 <__retarget_lock_release_recursive>:
 8005f20:	4770      	bx	lr

08005f22 <memcpy>:
 8005f22:	440a      	add	r2, r1
 8005f24:	4291      	cmp	r1, r2
 8005f26:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f2a:	d100      	bne.n	8005f2e <memcpy+0xc>
 8005f2c:	4770      	bx	lr
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f38:	4291      	cmp	r1, r2
 8005f3a:	d1f9      	bne.n	8005f30 <memcpy+0xe>
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <memset>:
 8005f3e:	4402      	add	r2, r0
 8005f40:	4603      	mov	r3, r0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d100      	bne.n	8005f48 <memset+0xa>
 8005f46:	4770      	bx	lr
 8005f48:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4c:	e7f9      	b.n	8005f42 <memset+0x4>
	...

08005f50 <sbrk_aligned>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4e0e      	ldr	r6, [pc, #56]	; (8005f8c <sbrk_aligned+0x3c>)
 8005f54:	460c      	mov	r4, r1
 8005f56:	6831      	ldr	r1, [r6, #0]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	b911      	cbnz	r1, 8005f62 <sbrk_aligned+0x12>
 8005f5c:	f000 f90e 	bl	800617c <_sbrk_r>
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f909 	bl	800617c <_sbrk_r>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d00a      	beq.n	8005f84 <sbrk_aligned+0x34>
 8005f6e:	1cc4      	adds	r4, r0, #3
 8005f70:	f024 0403 	bic.w	r4, r4, #3
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d007      	beq.n	8005f88 <sbrk_aligned+0x38>
 8005f78:	1a21      	subs	r1, r4, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 f8fe 	bl	800617c <_sbrk_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d101      	bne.n	8005f88 <sbrk_aligned+0x38>
 8005f84:	f04f 34ff 	mov.w	r4, #4294967295
 8005f88:	4620      	mov	r0, r4
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	20004f8c 	.word	0x20004f8c

08005f90 <_malloc_r>:
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	1ccd      	adds	r5, r1, #3
 8005f96:	f025 0503 	bic.w	r5, r5, #3
 8005f9a:	3508      	adds	r5, #8
 8005f9c:	2d0c      	cmp	r5, #12
 8005f9e:	bf38      	it	cc
 8005fa0:	250c      	movcc	r5, #12
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	db01      	blt.n	8005fac <_malloc_r+0x1c>
 8005fa8:	42a9      	cmp	r1, r5
 8005faa:	d905      	bls.n	8005fb8 <_malloc_r+0x28>
 8005fac:	230c      	movs	r3, #12
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb8:	4e2e      	ldr	r6, [pc, #184]	; (8006074 <_malloc_r+0xe4>)
 8005fba:	f000 fa29 	bl	8006410 <__malloc_lock>
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	bb34      	cbnz	r4, 8006012 <_malloc_r+0x82>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7ff ffc2 	bl	8005f50 <sbrk_aligned>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	4604      	mov	r4, r0
 8005fd0:	d14d      	bne.n	800606e <_malloc_r+0xde>
 8005fd2:	6834      	ldr	r4, [r6, #0]
 8005fd4:	4626      	mov	r6, r4
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d140      	bne.n	800605c <_malloc_r+0xcc>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4638      	mov	r0, r7
 8005fe0:	eb04 0803 	add.w	r8, r4, r3
 8005fe4:	f000 f8ca 	bl	800617c <_sbrk_r>
 8005fe8:	4580      	cmp	r8, r0
 8005fea:	d13a      	bne.n	8006062 <_malloc_r+0xd2>
 8005fec:	6821      	ldr	r1, [r4, #0]
 8005fee:	3503      	adds	r5, #3
 8005ff0:	1a6d      	subs	r5, r5, r1
 8005ff2:	f025 0503 	bic.w	r5, r5, #3
 8005ff6:	3508      	adds	r5, #8
 8005ff8:	2d0c      	cmp	r5, #12
 8005ffa:	bf38      	it	cc
 8005ffc:	250c      	movcc	r5, #12
 8005ffe:	4629      	mov	r1, r5
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ffa5 	bl	8005f50 <sbrk_aligned>
 8006006:	3001      	adds	r0, #1
 8006008:	d02b      	beq.n	8006062 <_malloc_r+0xd2>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	442b      	add	r3, r5
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	e00e      	b.n	8006030 <_malloc_r+0xa0>
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	1b52      	subs	r2, r2, r5
 8006016:	d41e      	bmi.n	8006056 <_malloc_r+0xc6>
 8006018:	2a0b      	cmp	r2, #11
 800601a:	d916      	bls.n	800604a <_malloc_r+0xba>
 800601c:	1961      	adds	r1, r4, r5
 800601e:	42a3      	cmp	r3, r4
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	bf18      	it	ne
 8006024:	6059      	strne	r1, [r3, #4]
 8006026:	6863      	ldr	r3, [r4, #4]
 8006028:	bf08      	it	eq
 800602a:	6031      	streq	r1, [r6, #0]
 800602c:	5162      	str	r2, [r4, r5]
 800602e:	604b      	str	r3, [r1, #4]
 8006030:	4638      	mov	r0, r7
 8006032:	f104 060b 	add.w	r6, r4, #11
 8006036:	f000 f9f1 	bl	800641c <__malloc_unlock>
 800603a:	f026 0607 	bic.w	r6, r6, #7
 800603e:	1d23      	adds	r3, r4, #4
 8006040:	1af2      	subs	r2, r6, r3
 8006042:	d0b6      	beq.n	8005fb2 <_malloc_r+0x22>
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	50a3      	str	r3, [r4, r2]
 8006048:	e7b3      	b.n	8005fb2 <_malloc_r+0x22>
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	42a3      	cmp	r3, r4
 800604e:	bf0c      	ite	eq
 8006050:	6032      	streq	r2, [r6, #0]
 8006052:	605a      	strne	r2, [r3, #4]
 8006054:	e7ec      	b.n	8006030 <_malloc_r+0xa0>
 8006056:	4623      	mov	r3, r4
 8006058:	6864      	ldr	r4, [r4, #4]
 800605a:	e7b2      	b.n	8005fc2 <_malloc_r+0x32>
 800605c:	4634      	mov	r4, r6
 800605e:	6876      	ldr	r6, [r6, #4]
 8006060:	e7b9      	b.n	8005fd6 <_malloc_r+0x46>
 8006062:	230c      	movs	r3, #12
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	4638      	mov	r0, r7
 8006068:	f000 f9d8 	bl	800641c <__malloc_unlock>
 800606c:	e7a1      	b.n	8005fb2 <_malloc_r+0x22>
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	e7de      	b.n	8006030 <_malloc_r+0xa0>
 8006072:	bf00      	nop
 8006074:	20004f88 	.word	0x20004f88

08006078 <iprintf>:
 8006078:	b40f      	push	{r0, r1, r2, r3}
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <iprintf+0x2c>)
 800607c:	b513      	push	{r0, r1, r4, lr}
 800607e:	681c      	ldr	r4, [r3, #0]
 8006080:	b124      	cbz	r4, 800608c <iprintf+0x14>
 8006082:	69a3      	ldr	r3, [r4, #24]
 8006084:	b913      	cbnz	r3, 800608c <iprintf+0x14>
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff fe86 	bl	8005d98 <__sinit>
 800608c:	ab05      	add	r3, sp, #20
 800608e:	9a04      	ldr	r2, [sp, #16]
 8006090:	68a1      	ldr	r1, [r4, #8]
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fa3d 	bl	8006514 <_vfiprintf_r>
 800609a:	b002      	add	sp, #8
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	b004      	add	sp, #16
 80060a2:	4770      	bx	lr
 80060a4:	20000010 	.word	0x20000010

080060a8 <cleanup_glue>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	460c      	mov	r4, r1
 80060ac:	6809      	ldr	r1, [r1, #0]
 80060ae:	4605      	mov	r5, r0
 80060b0:	b109      	cbz	r1, 80060b6 <cleanup_glue+0xe>
 80060b2:	f7ff fff9 	bl	80060a8 <cleanup_glue>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060be:	f000 b9b3 	b.w	8006428 <_free_r>
	...

080060c4 <_reclaim_reent>:
 80060c4:	4b2c      	ldr	r3, [pc, #176]	; (8006178 <_reclaim_reent+0xb4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4283      	cmp	r3, r0
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	4604      	mov	r4, r0
 80060ce:	d051      	beq.n	8006174 <_reclaim_reent+0xb0>
 80060d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060d2:	b143      	cbz	r3, 80060e6 <_reclaim_reent+0x22>
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d14a      	bne.n	8006170 <_reclaim_reent+0xac>
 80060da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	b111      	cbz	r1, 80060e6 <_reclaim_reent+0x22>
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f9a1 	bl	8006428 <_free_r>
 80060e6:	6961      	ldr	r1, [r4, #20]
 80060e8:	b111      	cbz	r1, 80060f0 <_reclaim_reent+0x2c>
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f99c 	bl	8006428 <_free_r>
 80060f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060f2:	b111      	cbz	r1, 80060fa <_reclaim_reent+0x36>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f997 	bl	8006428 <_free_r>
 80060fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060fc:	b111      	cbz	r1, 8006104 <_reclaim_reent+0x40>
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f992 	bl	8006428 <_free_r>
 8006104:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006106:	b111      	cbz	r1, 800610e <_reclaim_reent+0x4a>
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f98d 	bl	8006428 <_free_r>
 800610e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006110:	b111      	cbz	r1, 8006118 <_reclaim_reent+0x54>
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f988 	bl	8006428 <_free_r>
 8006118:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800611a:	b111      	cbz	r1, 8006122 <_reclaim_reent+0x5e>
 800611c:	4620      	mov	r0, r4
 800611e:	f000 f983 	bl	8006428 <_free_r>
 8006122:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006124:	b111      	cbz	r1, 800612c <_reclaim_reent+0x68>
 8006126:	4620      	mov	r0, r4
 8006128:	f000 f97e 	bl	8006428 <_free_r>
 800612c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800612e:	b111      	cbz	r1, 8006136 <_reclaim_reent+0x72>
 8006130:	4620      	mov	r0, r4
 8006132:	f000 f979 	bl	8006428 <_free_r>
 8006136:	69a3      	ldr	r3, [r4, #24]
 8006138:	b1e3      	cbz	r3, 8006174 <_reclaim_reent+0xb0>
 800613a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800613c:	4620      	mov	r0, r4
 800613e:	4798      	blx	r3
 8006140:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006142:	b1b9      	cbz	r1, 8006174 <_reclaim_reent+0xb0>
 8006144:	4620      	mov	r0, r4
 8006146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800614a:	f7ff bfad 	b.w	80060a8 <cleanup_glue>
 800614e:	5949      	ldr	r1, [r1, r5]
 8006150:	b941      	cbnz	r1, 8006164 <_reclaim_reent+0xa0>
 8006152:	3504      	adds	r5, #4
 8006154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006156:	2d80      	cmp	r5, #128	; 0x80
 8006158:	68d9      	ldr	r1, [r3, #12]
 800615a:	d1f8      	bne.n	800614e <_reclaim_reent+0x8a>
 800615c:	4620      	mov	r0, r4
 800615e:	f000 f963 	bl	8006428 <_free_r>
 8006162:	e7ba      	b.n	80060da <_reclaim_reent+0x16>
 8006164:	680e      	ldr	r6, [r1, #0]
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f95e 	bl	8006428 <_free_r>
 800616c:	4631      	mov	r1, r6
 800616e:	e7ef      	b.n	8006150 <_reclaim_reent+0x8c>
 8006170:	2500      	movs	r5, #0
 8006172:	e7ef      	b.n	8006154 <_reclaim_reent+0x90>
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	bf00      	nop
 8006178:	20000010 	.word	0x20000010

0800617c <_sbrk_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_sbrk_r+0x1c>)
 8006180:	2300      	movs	r3, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fa fce2 	bl	8000b50 <_sbrk>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_sbrk_r+0x1a>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_sbrk_r+0x1a>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20004f90 	.word	0x20004f90

0800619c <__sread>:
 800619c:	b510      	push	{r4, lr}
 800619e:	460c      	mov	r4, r1
 80061a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a4:	f000 fc7a 	bl	8006a9c <_read_r>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	bfab      	itete	ge
 80061ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ae:	89a3      	ldrhlt	r3, [r4, #12]
 80061b0:	181b      	addge	r3, r3, r0
 80061b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061b6:	bfac      	ite	ge
 80061b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ba:	81a3      	strhlt	r3, [r4, #12]
 80061bc:	bd10      	pop	{r4, pc}

080061be <__swrite>:
 80061be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c2:	461f      	mov	r7, r3
 80061c4:	898b      	ldrh	r3, [r1, #12]
 80061c6:	05db      	lsls	r3, r3, #23
 80061c8:	4605      	mov	r5, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	4616      	mov	r6, r2
 80061ce:	d505      	bpl.n	80061dc <__swrite+0x1e>
 80061d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d4:	2302      	movs	r3, #2
 80061d6:	2200      	movs	r2, #0
 80061d8:	f000 f908 	bl	80063ec <_lseek_r>
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	4632      	mov	r2, r6
 80061ea:	463b      	mov	r3, r7
 80061ec:	4628      	mov	r0, r5
 80061ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061f2:	f000 b817 	b.w	8006224 <_write_r>

080061f6 <__sseek>:
 80061f6:	b510      	push	{r4, lr}
 80061f8:	460c      	mov	r4, r1
 80061fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fe:	f000 f8f5 	bl	80063ec <_lseek_r>
 8006202:	1c43      	adds	r3, r0, #1
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	bf15      	itete	ne
 8006208:	6560      	strne	r0, [r4, #84]	; 0x54
 800620a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800620e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006212:	81a3      	strheq	r3, [r4, #12]
 8006214:	bf18      	it	ne
 8006216:	81a3      	strhne	r3, [r4, #12]
 8006218:	bd10      	pop	{r4, pc}

0800621a <__sclose>:
 800621a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621e:	f000 b813 	b.w	8006248 <_close_r>
	...

08006224 <_write_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_write_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fa fcd4 	bl	8000be0 <_write>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_write_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_write_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20004f90 	.word	0x20004f90

08006248 <_close_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	; (8006264 <_close_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fa fc47 	bl	8000ae6 <_close>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_close_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_close_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20004f90 	.word	0x20004f90

08006268 <__sflush_r>:
 8006268:	898a      	ldrh	r2, [r1, #12]
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	4605      	mov	r5, r0
 8006270:	0710      	lsls	r0, r2, #28
 8006272:	460c      	mov	r4, r1
 8006274:	d458      	bmi.n	8006328 <__sflush_r+0xc0>
 8006276:	684b      	ldr	r3, [r1, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc05      	bgt.n	8006288 <__sflush_r+0x20>
 800627c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	dc02      	bgt.n	8006288 <__sflush_r+0x20>
 8006282:	2000      	movs	r0, #0
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800628a:	2e00      	cmp	r6, #0
 800628c:	d0f9      	beq.n	8006282 <__sflush_r+0x1a>
 800628e:	2300      	movs	r3, #0
 8006290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006294:	682f      	ldr	r7, [r5, #0]
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	d032      	beq.n	8006300 <__sflush_r+0x98>
 800629a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	075a      	lsls	r2, r3, #29
 80062a0:	d505      	bpl.n	80062ae <__sflush_r+0x46>
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	1ac0      	subs	r0, r0, r3
 80062a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062a8:	b10b      	cbz	r3, 80062ae <__sflush_r+0x46>
 80062aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ac:	1ac0      	subs	r0, r0, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	4602      	mov	r2, r0
 80062b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b0      	blx	r6
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	d106      	bne.n	80062ce <__sflush_r+0x66>
 80062c0:	6829      	ldr	r1, [r5, #0]
 80062c2:	291d      	cmp	r1, #29
 80062c4:	d82c      	bhi.n	8006320 <__sflush_r+0xb8>
 80062c6:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <__sflush_r+0x108>)
 80062c8:	40ca      	lsrs	r2, r1
 80062ca:	07d6      	lsls	r6, r2, #31
 80062cc:	d528      	bpl.n	8006320 <__sflush_r+0xb8>
 80062ce:	2200      	movs	r2, #0
 80062d0:	6062      	str	r2, [r4, #4]
 80062d2:	04d9      	lsls	r1, r3, #19
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	d504      	bpl.n	80062e4 <__sflush_r+0x7c>
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	d101      	bne.n	80062e2 <__sflush_r+0x7a>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	b903      	cbnz	r3, 80062e4 <__sflush_r+0x7c>
 80062e2:	6560      	str	r0, [r4, #84]	; 0x54
 80062e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062e6:	602f      	str	r7, [r5, #0]
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d0ca      	beq.n	8006282 <__sflush_r+0x1a>
 80062ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f0:	4299      	cmp	r1, r3
 80062f2:	d002      	beq.n	80062fa <__sflush_r+0x92>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 f897 	bl	8006428 <_free_r>
 80062fa:	2000      	movs	r0, #0
 80062fc:	6360      	str	r0, [r4, #52]	; 0x34
 80062fe:	e7c1      	b.n	8006284 <__sflush_r+0x1c>
 8006300:	6a21      	ldr	r1, [r4, #32]
 8006302:	2301      	movs	r3, #1
 8006304:	4628      	mov	r0, r5
 8006306:	47b0      	blx	r6
 8006308:	1c41      	adds	r1, r0, #1
 800630a:	d1c7      	bne.n	800629c <__sflush_r+0x34>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0c4      	beq.n	800629c <__sflush_r+0x34>
 8006312:	2b1d      	cmp	r3, #29
 8006314:	d001      	beq.n	800631a <__sflush_r+0xb2>
 8006316:	2b16      	cmp	r3, #22
 8006318:	d101      	bne.n	800631e <__sflush_r+0xb6>
 800631a:	602f      	str	r7, [r5, #0]
 800631c:	e7b1      	b.n	8006282 <__sflush_r+0x1a>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	e7ad      	b.n	8006284 <__sflush_r+0x1c>
 8006328:	690f      	ldr	r7, [r1, #16]
 800632a:	2f00      	cmp	r7, #0
 800632c:	d0a9      	beq.n	8006282 <__sflush_r+0x1a>
 800632e:	0793      	lsls	r3, r2, #30
 8006330:	680e      	ldr	r6, [r1, #0]
 8006332:	bf08      	it	eq
 8006334:	694b      	ldreq	r3, [r1, #20]
 8006336:	600f      	str	r7, [r1, #0]
 8006338:	bf18      	it	ne
 800633a:	2300      	movne	r3, #0
 800633c:	eba6 0807 	sub.w	r8, r6, r7
 8006340:	608b      	str	r3, [r1, #8]
 8006342:	f1b8 0f00 	cmp.w	r8, #0
 8006346:	dd9c      	ble.n	8006282 <__sflush_r+0x1a>
 8006348:	6a21      	ldr	r1, [r4, #32]
 800634a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800634c:	4643      	mov	r3, r8
 800634e:	463a      	mov	r2, r7
 8006350:	4628      	mov	r0, r5
 8006352:	47b0      	blx	r6
 8006354:	2800      	cmp	r0, #0
 8006356:	dc06      	bgt.n	8006366 <__sflush_r+0xfe>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e78e      	b.n	8006284 <__sflush_r+0x1c>
 8006366:	4407      	add	r7, r0
 8006368:	eba8 0800 	sub.w	r8, r8, r0
 800636c:	e7e9      	b.n	8006342 <__sflush_r+0xda>
 800636e:	bf00      	nop
 8006370:	20400001 	.word	0x20400001

08006374 <_fflush_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	690b      	ldr	r3, [r1, #16]
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b913      	cbnz	r3, 8006384 <_fflush_r+0x10>
 800637e:	2500      	movs	r5, #0
 8006380:	4628      	mov	r0, r5
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	b118      	cbz	r0, 800638e <_fflush_r+0x1a>
 8006386:	6983      	ldr	r3, [r0, #24]
 8006388:	b90b      	cbnz	r3, 800638e <_fflush_r+0x1a>
 800638a:	f7ff fd05 	bl	8005d98 <__sinit>
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <_fflush_r+0x6c>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d11b      	bne.n	80063cc <_fflush_r+0x58>
 8006394:	686c      	ldr	r4, [r5, #4]
 8006396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ef      	beq.n	800637e <_fflush_r+0xa>
 800639e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063a0:	07d0      	lsls	r0, r2, #31
 80063a2:	d404      	bmi.n	80063ae <_fflush_r+0x3a>
 80063a4:	0599      	lsls	r1, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_fflush_r+0x3a>
 80063a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063aa:	f7ff fdb8 	bl	8005f1e <__retarget_lock_acquire_recursive>
 80063ae:	4628      	mov	r0, r5
 80063b0:	4621      	mov	r1, r4
 80063b2:	f7ff ff59 	bl	8006268 <__sflush_r>
 80063b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063b8:	07da      	lsls	r2, r3, #31
 80063ba:	4605      	mov	r5, r0
 80063bc:	d4e0      	bmi.n	8006380 <_fflush_r+0xc>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	059b      	lsls	r3, r3, #22
 80063c2:	d4dd      	bmi.n	8006380 <_fflush_r+0xc>
 80063c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c6:	f7ff fdab 	bl	8005f20 <__retarget_lock_release_recursive>
 80063ca:	e7d9      	b.n	8006380 <_fflush_r+0xc>
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <_fflush_r+0x70>)
 80063ce:	429c      	cmp	r4, r3
 80063d0:	d101      	bne.n	80063d6 <_fflush_r+0x62>
 80063d2:	68ac      	ldr	r4, [r5, #8]
 80063d4:	e7df      	b.n	8006396 <_fflush_r+0x22>
 80063d6:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <_fflush_r+0x74>)
 80063d8:	429c      	cmp	r4, r3
 80063da:	bf08      	it	eq
 80063dc:	68ec      	ldreq	r4, [r5, #12]
 80063de:	e7da      	b.n	8006396 <_fflush_r+0x22>
 80063e0:	08006e20 	.word	0x08006e20
 80063e4:	08006e40 	.word	0x08006e40
 80063e8:	08006e00 	.word	0x08006e00

080063ec <_lseek_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d07      	ldr	r5, [pc, #28]	; (800640c <_lseek_r+0x20>)
 80063f0:	4604      	mov	r4, r0
 80063f2:	4608      	mov	r0, r1
 80063f4:	4611      	mov	r1, r2
 80063f6:	2200      	movs	r2, #0
 80063f8:	602a      	str	r2, [r5, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f7fa fb9a 	bl	8000b34 <_lseek>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_lseek_r+0x1e>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_lseek_r+0x1e>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20004f90 	.word	0x20004f90

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff bd84 	b.w	8005f1e <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	20004f84 	.word	0x20004f84

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff bd7f 	b.w	8005f20 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	20004f84 	.word	0x20004f84

08006428 <_free_r>:
 8006428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800642a:	2900      	cmp	r1, #0
 800642c:	d044      	beq.n	80064b8 <_free_r+0x90>
 800642e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006432:	9001      	str	r0, [sp, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f1a1 0404 	sub.w	r4, r1, #4
 800643a:	bfb8      	it	lt
 800643c:	18e4      	addlt	r4, r4, r3
 800643e:	f7ff ffe7 	bl	8006410 <__malloc_lock>
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <_free_r+0x94>)
 8006444:	9801      	ldr	r0, [sp, #4]
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x30>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	b003      	add	sp, #12
 8006450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006454:	f7ff bfe2 	b.w	800641c <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x46>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1961      	adds	r1, r4, r5
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1949      	addeq	r1, r1, r5
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x22>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x50>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x46>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1855      	adds	r5, r2, r1
 800647c:	42a5      	cmp	r5, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x70>
 8006480:	6824      	ldr	r4, [r4, #0]
 8006482:	4421      	add	r1, r4
 8006484:	1854      	adds	r4, r2, r1
 8006486:	42a3      	cmp	r3, r4
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x26>
 800648c:	681c      	ldr	r4, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6053      	str	r3, [r2, #4]
 8006492:	4421      	add	r1, r4
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	e7da      	b.n	800644e <_free_r+0x26>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x78>
 800649a:	230c      	movs	r3, #12
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x26>
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	1961      	adds	r1, r4, r5
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf04      	itt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	bf04      	itt	eq
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	6054      	str	r4, [r2, #4]
 80064b6:	e7ca      	b.n	800644e <_free_r+0x26>
 80064b8:	b003      	add	sp, #12
 80064ba:	bd30      	pop	{r4, r5, pc}
 80064bc:	20004f88 	.word	0x20004f88

080064c0 <__sfputc_r>:
 80064c0:	6893      	ldr	r3, [r2, #8]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	b410      	push	{r4}
 80064c8:	6093      	str	r3, [r2, #8]
 80064ca:	da08      	bge.n	80064de <__sfputc_r+0x1e>
 80064cc:	6994      	ldr	r4, [r2, #24]
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	db01      	blt.n	80064d6 <__sfputc_r+0x16>
 80064d2:	290a      	cmp	r1, #10
 80064d4:	d103      	bne.n	80064de <__sfputc_r+0x1e>
 80064d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064da:	f000 baf1 	b.w	8006ac0 <__swbuf_r>
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	1c58      	adds	r0, r3, #1
 80064e2:	6010      	str	r0, [r2, #0]
 80064e4:	7019      	strb	r1, [r3, #0]
 80064e6:	4608      	mov	r0, r1
 80064e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <__sfputs_r>:
 80064ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f0:	4606      	mov	r6, r0
 80064f2:	460f      	mov	r7, r1
 80064f4:	4614      	mov	r4, r2
 80064f6:	18d5      	adds	r5, r2, r3
 80064f8:	42ac      	cmp	r4, r5
 80064fa:	d101      	bne.n	8006500 <__sfputs_r+0x12>
 80064fc:	2000      	movs	r0, #0
 80064fe:	e007      	b.n	8006510 <__sfputs_r+0x22>
 8006500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006504:	463a      	mov	r2, r7
 8006506:	4630      	mov	r0, r6
 8006508:	f7ff ffda 	bl	80064c0 <__sfputc_r>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d1f3      	bne.n	80064f8 <__sfputs_r+0xa>
 8006510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006514 <_vfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	460d      	mov	r5, r1
 800651a:	b09d      	sub	sp, #116	; 0x74
 800651c:	4614      	mov	r4, r2
 800651e:	4698      	mov	r8, r3
 8006520:	4606      	mov	r6, r0
 8006522:	b118      	cbz	r0, 800652c <_vfiprintf_r+0x18>
 8006524:	6983      	ldr	r3, [r0, #24]
 8006526:	b90b      	cbnz	r3, 800652c <_vfiprintf_r+0x18>
 8006528:	f7ff fc36 	bl	8005d98 <__sinit>
 800652c:	4b89      	ldr	r3, [pc, #548]	; (8006754 <_vfiprintf_r+0x240>)
 800652e:	429d      	cmp	r5, r3
 8006530:	d11b      	bne.n	800656a <_vfiprintf_r+0x56>
 8006532:	6875      	ldr	r5, [r6, #4]
 8006534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	d405      	bmi.n	8006546 <_vfiprintf_r+0x32>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	059a      	lsls	r2, r3, #22
 800653e:	d402      	bmi.n	8006546 <_vfiprintf_r+0x32>
 8006540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006542:	f7ff fcec 	bl	8005f1e <__retarget_lock_acquire_recursive>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	071b      	lsls	r3, r3, #28
 800654a:	d501      	bpl.n	8006550 <_vfiprintf_r+0x3c>
 800654c:	692b      	ldr	r3, [r5, #16]
 800654e:	b9eb      	cbnz	r3, 800658c <_vfiprintf_r+0x78>
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f000 fb06 	bl	8006b64 <__swsetup_r>
 8006558:	b1c0      	cbz	r0, 800658c <_vfiprintf_r+0x78>
 800655a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800655c:	07dc      	lsls	r4, r3, #31
 800655e:	d50e      	bpl.n	800657e <_vfiprintf_r+0x6a>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b01d      	add	sp, #116	; 0x74
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <_vfiprintf_r+0x244>)
 800656c:	429d      	cmp	r5, r3
 800656e:	d101      	bne.n	8006574 <_vfiprintf_r+0x60>
 8006570:	68b5      	ldr	r5, [r6, #8]
 8006572:	e7df      	b.n	8006534 <_vfiprintf_r+0x20>
 8006574:	4b79      	ldr	r3, [pc, #484]	; (800675c <_vfiprintf_r+0x248>)
 8006576:	429d      	cmp	r5, r3
 8006578:	bf08      	it	eq
 800657a:	68f5      	ldreq	r5, [r6, #12]
 800657c:	e7da      	b.n	8006534 <_vfiprintf_r+0x20>
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	0598      	lsls	r0, r3, #22
 8006582:	d4ed      	bmi.n	8006560 <_vfiprintf_r+0x4c>
 8006584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006586:	f7ff fccb 	bl	8005f20 <__retarget_lock_release_recursive>
 800658a:	e7e9      	b.n	8006560 <_vfiprintf_r+0x4c>
 800658c:	2300      	movs	r3, #0
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
 8006590:	2320      	movs	r3, #32
 8006592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006596:	f8cd 800c 	str.w	r8, [sp, #12]
 800659a:	2330      	movs	r3, #48	; 0x30
 800659c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006760 <_vfiprintf_r+0x24c>
 80065a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a4:	f04f 0901 	mov.w	r9, #1
 80065a8:	4623      	mov	r3, r4
 80065aa:	469a      	mov	sl, r3
 80065ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b0:	b10a      	cbz	r2, 80065b6 <_vfiprintf_r+0xa2>
 80065b2:	2a25      	cmp	r2, #37	; 0x25
 80065b4:	d1f9      	bne.n	80065aa <_vfiprintf_r+0x96>
 80065b6:	ebba 0b04 	subs.w	fp, sl, r4
 80065ba:	d00b      	beq.n	80065d4 <_vfiprintf_r+0xc0>
 80065bc:	465b      	mov	r3, fp
 80065be:	4622      	mov	r2, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7ff ff93 	bl	80064ee <__sfputs_r>
 80065c8:	3001      	adds	r0, #1
 80065ca:	f000 80aa 	beq.w	8006722 <_vfiprintf_r+0x20e>
 80065ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d0:	445a      	add	r2, fp
 80065d2:	9209      	str	r2, [sp, #36]	; 0x24
 80065d4:	f89a 3000 	ldrb.w	r3, [sl]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80a2 	beq.w	8006722 <_vfiprintf_r+0x20e>
 80065de:	2300      	movs	r3, #0
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e8:	f10a 0a01 	add.w	sl, sl, #1
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f4:	931a      	str	r3, [sp, #104]	; 0x68
 80065f6:	4654      	mov	r4, sl
 80065f8:	2205      	movs	r2, #5
 80065fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fe:	4858      	ldr	r0, [pc, #352]	; (8006760 <_vfiprintf_r+0x24c>)
 8006600:	f7f9 fdee 	bl	80001e0 <memchr>
 8006604:	9a04      	ldr	r2, [sp, #16]
 8006606:	b9d8      	cbnz	r0, 8006640 <_vfiprintf_r+0x12c>
 8006608:	06d1      	lsls	r1, r2, #27
 800660a:	bf44      	itt	mi
 800660c:	2320      	movmi	r3, #32
 800660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006612:	0713      	lsls	r3, r2, #28
 8006614:	bf44      	itt	mi
 8006616:	232b      	movmi	r3, #43	; 0x2b
 8006618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661c:	f89a 3000 	ldrb.w	r3, [sl]
 8006620:	2b2a      	cmp	r3, #42	; 0x2a
 8006622:	d015      	beq.n	8006650 <_vfiprintf_r+0x13c>
 8006624:	9a07      	ldr	r2, [sp, #28]
 8006626:	4654      	mov	r4, sl
 8006628:	2000      	movs	r0, #0
 800662a:	f04f 0c0a 	mov.w	ip, #10
 800662e:	4621      	mov	r1, r4
 8006630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006634:	3b30      	subs	r3, #48	; 0x30
 8006636:	2b09      	cmp	r3, #9
 8006638:	d94e      	bls.n	80066d8 <_vfiprintf_r+0x1c4>
 800663a:	b1b0      	cbz	r0, 800666a <_vfiprintf_r+0x156>
 800663c:	9207      	str	r2, [sp, #28]
 800663e:	e014      	b.n	800666a <_vfiprintf_r+0x156>
 8006640:	eba0 0308 	sub.w	r3, r0, r8
 8006644:	fa09 f303 	lsl.w	r3, r9, r3
 8006648:	4313      	orrs	r3, r2
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	46a2      	mov	sl, r4
 800664e:	e7d2      	b.n	80065f6 <_vfiprintf_r+0xe2>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1d19      	adds	r1, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9103      	str	r1, [sp, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfbb      	ittet	lt
 800665c:	425b      	neglt	r3, r3
 800665e:	f042 0202 	orrlt.w	r2, r2, #2
 8006662:	9307      	strge	r3, [sp, #28]
 8006664:	9307      	strlt	r3, [sp, #28]
 8006666:	bfb8      	it	lt
 8006668:	9204      	strlt	r2, [sp, #16]
 800666a:	7823      	ldrb	r3, [r4, #0]
 800666c:	2b2e      	cmp	r3, #46	; 0x2e
 800666e:	d10c      	bne.n	800668a <_vfiprintf_r+0x176>
 8006670:	7863      	ldrb	r3, [r4, #1]
 8006672:	2b2a      	cmp	r3, #42	; 0x2a
 8006674:	d135      	bne.n	80066e2 <_vfiprintf_r+0x1ce>
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	9203      	str	r2, [sp, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb8      	it	lt
 8006682:	f04f 33ff 	movlt.w	r3, #4294967295
 8006686:	3402      	adds	r4, #2
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006770 <_vfiprintf_r+0x25c>
 800668e:	7821      	ldrb	r1, [r4, #0]
 8006690:	2203      	movs	r2, #3
 8006692:	4650      	mov	r0, sl
 8006694:	f7f9 fda4 	bl	80001e0 <memchr>
 8006698:	b140      	cbz	r0, 80066ac <_vfiprintf_r+0x198>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	eba0 000a 	sub.w	r0, r0, sl
 80066a0:	fa03 f000 	lsl.w	r0, r3, r0
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	4303      	orrs	r3, r0
 80066a8:	3401      	adds	r4, #1
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b0:	482c      	ldr	r0, [pc, #176]	; (8006764 <_vfiprintf_r+0x250>)
 80066b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b6:	2206      	movs	r2, #6
 80066b8:	f7f9 fd92 	bl	80001e0 <memchr>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d03f      	beq.n	8006740 <_vfiprintf_r+0x22c>
 80066c0:	4b29      	ldr	r3, [pc, #164]	; (8006768 <_vfiprintf_r+0x254>)
 80066c2:	bb1b      	cbnz	r3, 800670c <_vfiprintf_r+0x1f8>
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	3307      	adds	r3, #7
 80066c8:	f023 0307 	bic.w	r3, r3, #7
 80066cc:	3308      	adds	r3, #8
 80066ce:	9303      	str	r3, [sp, #12]
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	443b      	add	r3, r7
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	e767      	b.n	80065a8 <_vfiprintf_r+0x94>
 80066d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066dc:	460c      	mov	r4, r1
 80066de:	2001      	movs	r0, #1
 80066e0:	e7a5      	b.n	800662e <_vfiprintf_r+0x11a>
 80066e2:	2300      	movs	r3, #0
 80066e4:	3401      	adds	r4, #1
 80066e6:	9305      	str	r3, [sp, #20]
 80066e8:	4619      	mov	r1, r3
 80066ea:	f04f 0c0a 	mov.w	ip, #10
 80066ee:	4620      	mov	r0, r4
 80066f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f4:	3a30      	subs	r2, #48	; 0x30
 80066f6:	2a09      	cmp	r2, #9
 80066f8:	d903      	bls.n	8006702 <_vfiprintf_r+0x1ee>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0c5      	beq.n	800668a <_vfiprintf_r+0x176>
 80066fe:	9105      	str	r1, [sp, #20]
 8006700:	e7c3      	b.n	800668a <_vfiprintf_r+0x176>
 8006702:	fb0c 2101 	mla	r1, ip, r1, r2
 8006706:	4604      	mov	r4, r0
 8006708:	2301      	movs	r3, #1
 800670a:	e7f0      	b.n	80066ee <_vfiprintf_r+0x1da>
 800670c:	ab03      	add	r3, sp, #12
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	462a      	mov	r2, r5
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <_vfiprintf_r+0x258>)
 8006714:	a904      	add	r1, sp, #16
 8006716:	4630      	mov	r0, r6
 8006718:	f3af 8000 	nop.w
 800671c:	4607      	mov	r7, r0
 800671e:	1c78      	adds	r0, r7, #1
 8006720:	d1d6      	bne.n	80066d0 <_vfiprintf_r+0x1bc>
 8006722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006724:	07d9      	lsls	r1, r3, #31
 8006726:	d405      	bmi.n	8006734 <_vfiprintf_r+0x220>
 8006728:	89ab      	ldrh	r3, [r5, #12]
 800672a:	059a      	lsls	r2, r3, #22
 800672c:	d402      	bmi.n	8006734 <_vfiprintf_r+0x220>
 800672e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006730:	f7ff fbf6 	bl	8005f20 <__retarget_lock_release_recursive>
 8006734:	89ab      	ldrh	r3, [r5, #12]
 8006736:	065b      	lsls	r3, r3, #25
 8006738:	f53f af12 	bmi.w	8006560 <_vfiprintf_r+0x4c>
 800673c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800673e:	e711      	b.n	8006564 <_vfiprintf_r+0x50>
 8006740:	ab03      	add	r3, sp, #12
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	462a      	mov	r2, r5
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <_vfiprintf_r+0x258>)
 8006748:	a904      	add	r1, sp, #16
 800674a:	4630      	mov	r0, r6
 800674c:	f000 f880 	bl	8006850 <_printf_i>
 8006750:	e7e4      	b.n	800671c <_vfiprintf_r+0x208>
 8006752:	bf00      	nop
 8006754:	08006e20 	.word	0x08006e20
 8006758:	08006e40 	.word	0x08006e40
 800675c:	08006e00 	.word	0x08006e00
 8006760:	08006e64 	.word	0x08006e64
 8006764:	08006e6e 	.word	0x08006e6e
 8006768:	00000000 	.word	0x00000000
 800676c:	080064ef 	.word	0x080064ef
 8006770:	08006e6a 	.word	0x08006e6a

08006774 <_printf_common>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	4616      	mov	r6, r2
 800677a:	4699      	mov	r9, r3
 800677c:	688a      	ldr	r2, [r1, #8]
 800677e:	690b      	ldr	r3, [r1, #16]
 8006780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006784:	4293      	cmp	r3, r2
 8006786:	bfb8      	it	lt
 8006788:	4613      	movlt	r3, r2
 800678a:	6033      	str	r3, [r6, #0]
 800678c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006790:	4607      	mov	r7, r0
 8006792:	460c      	mov	r4, r1
 8006794:	b10a      	cbz	r2, 800679a <_printf_common+0x26>
 8006796:	3301      	adds	r3, #1
 8006798:	6033      	str	r3, [r6, #0]
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	0699      	lsls	r1, r3, #26
 800679e:	bf42      	ittt	mi
 80067a0:	6833      	ldrmi	r3, [r6, #0]
 80067a2:	3302      	addmi	r3, #2
 80067a4:	6033      	strmi	r3, [r6, #0]
 80067a6:	6825      	ldr	r5, [r4, #0]
 80067a8:	f015 0506 	ands.w	r5, r5, #6
 80067ac:	d106      	bne.n	80067bc <_printf_common+0x48>
 80067ae:	f104 0a19 	add.w	sl, r4, #25
 80067b2:	68e3      	ldr	r3, [r4, #12]
 80067b4:	6832      	ldr	r2, [r6, #0]
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dc26      	bgt.n	800680a <_printf_common+0x96>
 80067bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067c0:	1e13      	subs	r3, r2, #0
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	bf18      	it	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	0692      	lsls	r2, r2, #26
 80067ca:	d42b      	bmi.n	8006824 <_printf_common+0xb0>
 80067cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067d0:	4649      	mov	r1, r9
 80067d2:	4638      	mov	r0, r7
 80067d4:	47c0      	blx	r8
 80067d6:	3001      	adds	r0, #1
 80067d8:	d01e      	beq.n	8006818 <_printf_common+0xa4>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	68e5      	ldr	r5, [r4, #12]
 80067de:	6832      	ldr	r2, [r6, #0]
 80067e0:	f003 0306 	and.w	r3, r3, #6
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	bf08      	it	eq
 80067e8:	1aad      	subeq	r5, r5, r2
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	6922      	ldr	r2, [r4, #16]
 80067ee:	bf0c      	ite	eq
 80067f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f4:	2500      	movne	r5, #0
 80067f6:	4293      	cmp	r3, r2
 80067f8:	bfc4      	itt	gt
 80067fa:	1a9b      	subgt	r3, r3, r2
 80067fc:	18ed      	addgt	r5, r5, r3
 80067fe:	2600      	movs	r6, #0
 8006800:	341a      	adds	r4, #26
 8006802:	42b5      	cmp	r5, r6
 8006804:	d11a      	bne.n	800683c <_printf_common+0xc8>
 8006806:	2000      	movs	r0, #0
 8006808:	e008      	b.n	800681c <_printf_common+0xa8>
 800680a:	2301      	movs	r3, #1
 800680c:	4652      	mov	r2, sl
 800680e:	4649      	mov	r1, r9
 8006810:	4638      	mov	r0, r7
 8006812:	47c0      	blx	r8
 8006814:	3001      	adds	r0, #1
 8006816:	d103      	bne.n	8006820 <_printf_common+0xac>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	3501      	adds	r5, #1
 8006822:	e7c6      	b.n	80067b2 <_printf_common+0x3e>
 8006824:	18e1      	adds	r1, r4, r3
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	2030      	movs	r0, #48	; 0x30
 800682a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682e:	4422      	add	r2, r4
 8006830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006838:	3302      	adds	r3, #2
 800683a:	e7c7      	b.n	80067cc <_printf_common+0x58>
 800683c:	2301      	movs	r3, #1
 800683e:	4622      	mov	r2, r4
 8006840:	4649      	mov	r1, r9
 8006842:	4638      	mov	r0, r7
 8006844:	47c0      	blx	r8
 8006846:	3001      	adds	r0, #1
 8006848:	d0e6      	beq.n	8006818 <_printf_common+0xa4>
 800684a:	3601      	adds	r6, #1
 800684c:	e7d9      	b.n	8006802 <_printf_common+0x8e>
	...

08006850 <_printf_i>:
 8006850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	7e0f      	ldrb	r7, [r1, #24]
 8006856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006858:	2f78      	cmp	r7, #120	; 0x78
 800685a:	4691      	mov	r9, r2
 800685c:	4680      	mov	r8, r0
 800685e:	460c      	mov	r4, r1
 8006860:	469a      	mov	sl, r3
 8006862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006866:	d807      	bhi.n	8006878 <_printf_i+0x28>
 8006868:	2f62      	cmp	r7, #98	; 0x62
 800686a:	d80a      	bhi.n	8006882 <_printf_i+0x32>
 800686c:	2f00      	cmp	r7, #0
 800686e:	f000 80d8 	beq.w	8006a22 <_printf_i+0x1d2>
 8006872:	2f58      	cmp	r7, #88	; 0x58
 8006874:	f000 80a3 	beq.w	80069be <_printf_i+0x16e>
 8006878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800687c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006880:	e03a      	b.n	80068f8 <_printf_i+0xa8>
 8006882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006886:	2b15      	cmp	r3, #21
 8006888:	d8f6      	bhi.n	8006878 <_printf_i+0x28>
 800688a:	a101      	add	r1, pc, #4	; (adr r1, 8006890 <_printf_i+0x40>)
 800688c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006879 	.word	0x08006879
 800689c:	08006879 	.word	0x08006879
 80068a0:	08006879 	.word	0x08006879
 80068a4:	08006879 	.word	0x08006879
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006879 	.word	0x08006879
 80068b0:	08006879 	.word	0x08006879
 80068b4:	08006879 	.word	0x08006879
 80068b8:	08006879 	.word	0x08006879
 80068bc:	08006a09 	.word	0x08006a09
 80068c0:	0800692d 	.word	0x0800692d
 80068c4:	080069eb 	.word	0x080069eb
 80068c8:	08006879 	.word	0x08006879
 80068cc:	08006879 	.word	0x08006879
 80068d0:	08006a2b 	.word	0x08006a2b
 80068d4:	08006879 	.word	0x08006879
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	08006879 	.word	0x08006879
 80068e0:	08006879 	.word	0x08006879
 80068e4:	080069f3 	.word	0x080069f3
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	1d1a      	adds	r2, r3, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	602a      	str	r2, [r5, #0]
 80068f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0a3      	b.n	8006a44 <_printf_i+0x1f4>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	6829      	ldr	r1, [r5, #0]
 8006900:	0606      	lsls	r6, r0, #24
 8006902:	f101 0304 	add.w	r3, r1, #4
 8006906:	d50a      	bpl.n	800691e <_printf_i+0xce>
 8006908:	680e      	ldr	r6, [r1, #0]
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	2e00      	cmp	r6, #0
 800690e:	da03      	bge.n	8006918 <_printf_i+0xc8>
 8006910:	232d      	movs	r3, #45	; 0x2d
 8006912:	4276      	negs	r6, r6
 8006914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006918:	485e      	ldr	r0, [pc, #376]	; (8006a94 <_printf_i+0x244>)
 800691a:	230a      	movs	r3, #10
 800691c:	e019      	b.n	8006952 <_printf_i+0x102>
 800691e:	680e      	ldr	r6, [r1, #0]
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006926:	bf18      	it	ne
 8006928:	b236      	sxthne	r6, r6
 800692a:	e7ef      	b.n	800690c <_printf_i+0xbc>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	1d19      	adds	r1, r3, #4
 8006932:	6029      	str	r1, [r5, #0]
 8006934:	0601      	lsls	r1, r0, #24
 8006936:	d501      	bpl.n	800693c <_printf_i+0xec>
 8006938:	681e      	ldr	r6, [r3, #0]
 800693a:	e002      	b.n	8006942 <_printf_i+0xf2>
 800693c:	0646      	lsls	r6, r0, #25
 800693e:	d5fb      	bpl.n	8006938 <_printf_i+0xe8>
 8006940:	881e      	ldrh	r6, [r3, #0]
 8006942:	4854      	ldr	r0, [pc, #336]	; (8006a94 <_printf_i+0x244>)
 8006944:	2f6f      	cmp	r7, #111	; 0x6f
 8006946:	bf0c      	ite	eq
 8006948:	2308      	moveq	r3, #8
 800694a:	230a      	movne	r3, #10
 800694c:	2100      	movs	r1, #0
 800694e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006952:	6865      	ldr	r5, [r4, #4]
 8006954:	60a5      	str	r5, [r4, #8]
 8006956:	2d00      	cmp	r5, #0
 8006958:	bfa2      	ittt	ge
 800695a:	6821      	ldrge	r1, [r4, #0]
 800695c:	f021 0104 	bicge.w	r1, r1, #4
 8006960:	6021      	strge	r1, [r4, #0]
 8006962:	b90e      	cbnz	r6, 8006968 <_printf_i+0x118>
 8006964:	2d00      	cmp	r5, #0
 8006966:	d04d      	beq.n	8006a04 <_printf_i+0x1b4>
 8006968:	4615      	mov	r5, r2
 800696a:	fbb6 f1f3 	udiv	r1, r6, r3
 800696e:	fb03 6711 	mls	r7, r3, r1, r6
 8006972:	5dc7      	ldrb	r7, [r0, r7]
 8006974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006978:	4637      	mov	r7, r6
 800697a:	42bb      	cmp	r3, r7
 800697c:	460e      	mov	r6, r1
 800697e:	d9f4      	bls.n	800696a <_printf_i+0x11a>
 8006980:	2b08      	cmp	r3, #8
 8006982:	d10b      	bne.n	800699c <_printf_i+0x14c>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	07de      	lsls	r6, r3, #31
 8006988:	d508      	bpl.n	800699c <_printf_i+0x14c>
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	6861      	ldr	r1, [r4, #4]
 800698e:	4299      	cmp	r1, r3
 8006990:	bfde      	ittt	le
 8006992:	2330      	movle	r3, #48	; 0x30
 8006994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800699c:	1b52      	subs	r2, r2, r5
 800699e:	6122      	str	r2, [r4, #16]
 80069a0:	f8cd a000 	str.w	sl, [sp]
 80069a4:	464b      	mov	r3, r9
 80069a6:	aa03      	add	r2, sp, #12
 80069a8:	4621      	mov	r1, r4
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff fee2 	bl	8006774 <_printf_common>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d14c      	bne.n	8006a4e <_printf_i+0x1fe>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	b004      	add	sp, #16
 80069ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069be:	4835      	ldr	r0, [pc, #212]	; (8006a94 <_printf_i+0x244>)
 80069c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069c4:	6829      	ldr	r1, [r5, #0]
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80069cc:	6029      	str	r1, [r5, #0]
 80069ce:	061d      	lsls	r5, r3, #24
 80069d0:	d514      	bpl.n	80069fc <_printf_i+0x1ac>
 80069d2:	07df      	lsls	r7, r3, #31
 80069d4:	bf44      	itt	mi
 80069d6:	f043 0320 	orrmi.w	r3, r3, #32
 80069da:	6023      	strmi	r3, [r4, #0]
 80069dc:	b91e      	cbnz	r6, 80069e6 <_printf_i+0x196>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	2310      	movs	r3, #16
 80069e8:	e7b0      	b.n	800694c <_printf_i+0xfc>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	2378      	movs	r3, #120	; 0x78
 80069f4:	4828      	ldr	r0, [pc, #160]	; (8006a98 <_printf_i+0x248>)
 80069f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069fa:	e7e3      	b.n	80069c4 <_printf_i+0x174>
 80069fc:	0659      	lsls	r1, r3, #25
 80069fe:	bf48      	it	mi
 8006a00:	b2b6      	uxthmi	r6, r6
 8006a02:	e7e6      	b.n	80069d2 <_printf_i+0x182>
 8006a04:	4615      	mov	r5, r2
 8006a06:	e7bb      	b.n	8006980 <_printf_i+0x130>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	6826      	ldr	r6, [r4, #0]
 8006a0c:	6961      	ldr	r1, [r4, #20]
 8006a0e:	1d18      	adds	r0, r3, #4
 8006a10:	6028      	str	r0, [r5, #0]
 8006a12:	0635      	lsls	r5, r6, #24
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0x1cc>
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <_printf_i+0x1d2>
 8006a1c:	0670      	lsls	r0, r6, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0x1c8>
 8006a20:	8019      	strh	r1, [r3, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	4615      	mov	r5, r2
 8006a28:	e7ba      	b.n	80069a0 <_printf_i+0x150>
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	1d1a      	adds	r2, r3, #4
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	681d      	ldr	r5, [r3, #0]
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	2100      	movs	r1, #0
 8006a36:	4628      	mov	r0, r5
 8006a38:	f7f9 fbd2 	bl	80001e0 <memchr>
 8006a3c:	b108      	cbz	r0, 8006a42 <_printf_i+0x1f2>
 8006a3e:	1b40      	subs	r0, r0, r5
 8006a40:	6060      	str	r0, [r4, #4]
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	2300      	movs	r3, #0
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4c:	e7a8      	b.n	80069a0 <_printf_i+0x150>
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	462a      	mov	r2, r5
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	47d0      	blx	sl
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d0ab      	beq.n	80069b4 <_printf_i+0x164>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	079b      	lsls	r3, r3, #30
 8006a60:	d413      	bmi.n	8006a8a <_printf_i+0x23a>
 8006a62:	68e0      	ldr	r0, [r4, #12]
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	4298      	cmp	r0, r3
 8006a68:	bfb8      	it	lt
 8006a6a:	4618      	movlt	r0, r3
 8006a6c:	e7a4      	b.n	80069b8 <_printf_i+0x168>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4632      	mov	r2, r6
 8006a72:	4649      	mov	r1, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	47d0      	blx	sl
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d09b      	beq.n	80069b4 <_printf_i+0x164>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	9903      	ldr	r1, [sp, #12]
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dcf2      	bgt.n	8006a6e <_printf_i+0x21e>
 8006a88:	e7eb      	b.n	8006a62 <_printf_i+0x212>
 8006a8a:	2500      	movs	r5, #0
 8006a8c:	f104 0619 	add.w	r6, r4, #25
 8006a90:	e7f5      	b.n	8006a7e <_printf_i+0x22e>
 8006a92:	bf00      	nop
 8006a94:	08006e75 	.word	0x08006e75
 8006a98:	08006e86 	.word	0x08006e86

08006a9c <_read_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d07      	ldr	r5, [pc, #28]	; (8006abc <_read_r+0x20>)
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7f9 fffe 	bl	8000aac <_read>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_read_r+0x1e>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_read_r+0x1e>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	20004f90 	.word	0x20004f90

08006ac0 <__swbuf_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	b118      	cbz	r0, 8006ad2 <__swbuf_r+0x12>
 8006aca:	6983      	ldr	r3, [r0, #24]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <__swbuf_r+0x12>
 8006ace:	f7ff f963 	bl	8005d98 <__sinit>
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <__swbuf_r+0x98>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d12b      	bne.n	8006b30 <__swbuf_r+0x70>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	69a3      	ldr	r3, [r4, #24]
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	071a      	lsls	r2, r3, #28
 8006ae2:	d52f      	bpl.n	8006b44 <__swbuf_r+0x84>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	b36b      	cbz	r3, 8006b44 <__swbuf_r+0x84>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	1ac0      	subs	r0, r0, r3
 8006aee:	6963      	ldr	r3, [r4, #20]
 8006af0:	b2f6      	uxtb	r6, r6
 8006af2:	4283      	cmp	r3, r0
 8006af4:	4637      	mov	r7, r6
 8006af6:	dc04      	bgt.n	8006b02 <__swbuf_r+0x42>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff fc3a 	bl	8006374 <_fflush_r>
 8006b00:	bb30      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	60a3      	str	r3, [r4, #8]
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	701e      	strb	r6, [r3, #0]
 8006b10:	6963      	ldr	r3, [r4, #20]
 8006b12:	3001      	adds	r0, #1
 8006b14:	4283      	cmp	r3, r0
 8006b16:	d004      	beq.n	8006b22 <__swbuf_r+0x62>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d506      	bpl.n	8006b2c <__swbuf_r+0x6c>
 8006b1e:	2e0a      	cmp	r6, #10
 8006b20:	d104      	bne.n	8006b2c <__swbuf_r+0x6c>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f7ff fc25 	bl	8006374 <_fflush_r>
 8006b2a:	b988      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <__swbuf_r+0x9c>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d101      	bne.n	8006b3a <__swbuf_r+0x7a>
 8006b36:	68ac      	ldr	r4, [r5, #8]
 8006b38:	e7cf      	b.n	8006ada <__swbuf_r+0x1a>
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <__swbuf_r+0xa0>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	bf08      	it	eq
 8006b40:	68ec      	ldreq	r4, [r5, #12]
 8006b42:	e7ca      	b.n	8006ada <__swbuf_r+0x1a>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 f80c 	bl	8006b64 <__swsetup_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0cb      	beq.n	8006ae8 <__swbuf_r+0x28>
 8006b50:	f04f 37ff 	mov.w	r7, #4294967295
 8006b54:	e7ea      	b.n	8006b2c <__swbuf_r+0x6c>
 8006b56:	bf00      	nop
 8006b58:	08006e20 	.word	0x08006e20
 8006b5c:	08006e40 	.word	0x08006e40
 8006b60:	08006e00 	.word	0x08006e00

08006b64 <__swsetup_r>:
 8006b64:	4b32      	ldr	r3, [pc, #200]	; (8006c30 <__swsetup_r+0xcc>)
 8006b66:	b570      	push	{r4, r5, r6, lr}
 8006b68:	681d      	ldr	r5, [r3, #0]
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	b125      	cbz	r5, 8006b7a <__swsetup_r+0x16>
 8006b70:	69ab      	ldr	r3, [r5, #24]
 8006b72:	b913      	cbnz	r3, 8006b7a <__swsetup_r+0x16>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff f90f 	bl	8005d98 <__sinit>
 8006b7a:	4b2e      	ldr	r3, [pc, #184]	; (8006c34 <__swsetup_r+0xd0>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	d10f      	bne.n	8006ba0 <__swsetup_r+0x3c>
 8006b80:	686c      	ldr	r4, [r5, #4]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b88:	0719      	lsls	r1, r3, #28
 8006b8a:	d42c      	bmi.n	8006be6 <__swsetup_r+0x82>
 8006b8c:	06dd      	lsls	r5, r3, #27
 8006b8e:	d411      	bmi.n	8006bb4 <__swsetup_r+0x50>
 8006b90:	2309      	movs	r3, #9
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	e03e      	b.n	8006c1e <__swsetup_r+0xba>
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <__swsetup_r+0xd4>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d101      	bne.n	8006baa <__swsetup_r+0x46>
 8006ba6:	68ac      	ldr	r4, [r5, #8]
 8006ba8:	e7eb      	b.n	8006b82 <__swsetup_r+0x1e>
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <__swsetup_r+0xd8>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	bf08      	it	eq
 8006bb0:	68ec      	ldreq	r4, [r5, #12]
 8006bb2:	e7e6      	b.n	8006b82 <__swsetup_r+0x1e>
 8006bb4:	0758      	lsls	r0, r3, #29
 8006bb6:	d512      	bpl.n	8006bde <__swsetup_r+0x7a>
 8006bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bba:	b141      	cbz	r1, 8006bce <__swsetup_r+0x6a>
 8006bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d002      	beq.n	8006bca <__swsetup_r+0x66>
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff fc2f 	bl	8006428 <_free_r>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f043 0308 	orr.w	r3, r3, #8
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	b94b      	cbnz	r3, 8006bfe <__swsetup_r+0x9a>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf4:	d003      	beq.n	8006bfe <__swsetup_r+0x9a>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f847 	bl	8006c8c <__smakebuf_r>
 8006bfe:	89a0      	ldrh	r0, [r4, #12]
 8006c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c04:	f010 0301 	ands.w	r3, r0, #1
 8006c08:	d00a      	beq.n	8006c20 <__swsetup_r+0xbc>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60a3      	str	r3, [r4, #8]
 8006c0e:	6963      	ldr	r3, [r4, #20]
 8006c10:	425b      	negs	r3, r3
 8006c12:	61a3      	str	r3, [r4, #24]
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	b943      	cbnz	r3, 8006c2a <__swsetup_r+0xc6>
 8006c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c1c:	d1ba      	bne.n	8006b94 <__swsetup_r+0x30>
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	0781      	lsls	r1, r0, #30
 8006c22:	bf58      	it	pl
 8006c24:	6963      	ldrpl	r3, [r4, #20]
 8006c26:	60a3      	str	r3, [r4, #8]
 8006c28:	e7f4      	b.n	8006c14 <__swsetup_r+0xb0>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e7f7      	b.n	8006c1e <__swsetup_r+0xba>
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010
 8006c34:	08006e20 	.word	0x08006e20
 8006c38:	08006e40 	.word	0x08006e40
 8006c3c:	08006e00 	.word	0x08006e00

08006c40 <__swhatbuf_r>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	460e      	mov	r6, r1
 8006c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	b096      	sub	sp, #88	; 0x58
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	da08      	bge.n	8006c64 <__swhatbuf_r+0x24>
 8006c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	602a      	str	r2, [r5, #0]
 8006c5a:	061a      	lsls	r2, r3, #24
 8006c5c:	d410      	bmi.n	8006c80 <__swhatbuf_r+0x40>
 8006c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c62:	e00e      	b.n	8006c82 <__swhatbuf_r+0x42>
 8006c64:	466a      	mov	r2, sp
 8006c66:	f000 f851 	bl	8006d0c <_fstat_r>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	dbf1      	blt.n	8006c52 <__swhatbuf_r+0x12>
 8006c6e:	9a01      	ldr	r2, [sp, #4]
 8006c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c78:	425a      	negs	r2, r3
 8006c7a:	415a      	adcs	r2, r3
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	e7ee      	b.n	8006c5e <__swhatbuf_r+0x1e>
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	2000      	movs	r0, #0
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	b016      	add	sp, #88	; 0x58
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c8c <__smakebuf_r>:
 8006c8c:	898b      	ldrh	r3, [r1, #12]
 8006c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c90:	079d      	lsls	r5, r3, #30
 8006c92:	4606      	mov	r6, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	d507      	bpl.n	8006ca8 <__smakebuf_r+0x1c>
 8006c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	6163      	str	r3, [r4, #20]
 8006ca4:	b002      	add	sp, #8
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	ab01      	add	r3, sp, #4
 8006caa:	466a      	mov	r2, sp
 8006cac:	f7ff ffc8 	bl	8006c40 <__swhatbuf_r>
 8006cb0:	9900      	ldr	r1, [sp, #0]
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff f96b 	bl	8005f90 <_malloc_r>
 8006cba:	b948      	cbnz	r0, 8006cd0 <__smakebuf_r+0x44>
 8006cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc0:	059a      	lsls	r2, r3, #22
 8006cc2:	d4ef      	bmi.n	8006ca4 <__smakebuf_r+0x18>
 8006cc4:	f023 0303 	bic.w	r3, r3, #3
 8006cc8:	f043 0302 	orr.w	r3, r3, #2
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	e7e3      	b.n	8006c98 <__smakebuf_r+0xc>
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <__smakebuf_r+0x7c>)
 8006cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	6020      	str	r0, [r4, #0]
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	9b00      	ldr	r3, [sp, #0]
 8006ce0:	6163      	str	r3, [r4, #20]
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	6120      	str	r0, [r4, #16]
 8006ce6:	b15b      	cbz	r3, 8006d00 <__smakebuf_r+0x74>
 8006ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 f81f 	bl	8006d30 <_isatty_r>
 8006cf2:	b128      	cbz	r0, 8006d00 <__smakebuf_r+0x74>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	f043 0301 	orr.w	r3, r3, #1
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	89a0      	ldrh	r0, [r4, #12]
 8006d02:	4305      	orrs	r5, r0
 8006d04:	81a5      	strh	r5, [r4, #12]
 8006d06:	e7cd      	b.n	8006ca4 <__smakebuf_r+0x18>
 8006d08:	08005d31 	.word	0x08005d31

08006d0c <_fstat_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d07      	ldr	r5, [pc, #28]	; (8006d2c <_fstat_r+0x20>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f7f9 fef0 	bl	8000afe <_fstat>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d102      	bne.n	8006d28 <_fstat_r+0x1c>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	b103      	cbz	r3, 8006d28 <_fstat_r+0x1c>
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20004f90 	.word	0x20004f90

08006d30 <_isatty_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d06      	ldr	r5, [pc, #24]	; (8006d4c <_isatty_r+0x1c>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	f7f9 feef 	bl	8000b1e <_isatty>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_isatty_r+0x1a>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_isatty_r+0x1a>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20004f90 	.word	0x20004f90

08006d50 <_init>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr

08006d5c <_fini>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr
